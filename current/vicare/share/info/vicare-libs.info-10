This is vicare-libs.info, produced by makeinfo version 6.5 from
vicare-libs.texi.

This document describes the libraries distributed along with version
0.4.1-devel.3 of Vicare Scheme, an R6RS compliant native compiler for
the Scheme language.

Copyright (C) 2010-2017 by Marco Maggi.
Copyright (C) 2006-2010 by Abdulaziz Ghuloum.

   The documentation of IrRegex is Copyright (C) 2005-2012 Alex Shinn.
All rights reserved.

   The documentation of Pregexp is Copyright (C) 1999-2005 Dorai
Sitaram.  All rights reserved.

   The documentation of the library '(vicare formations)' is derived
from the documentation of Guile.  Copyright (C) 1996-2005, 2009-2013
Free Software Foundation.

   The documentation of the libraries '(vicare parser-tools silex ---)'
are derived form the documentation of SILex.  Copyright (C) 2001, 2009
Danny Dube'.

     This program is free software: you can redistribute it and/or
     modify it under the terms of the GNU General Public License version
     3 as published by the Free Software Foundation.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see
     <http://www.gnu.org/licenses/>.

   Trademarks used herein are the property of their respective owners.
INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* vicare-libs: (vicare-libs).   Libraries for Vicare Scheme.
END-INFO-DIR-ENTRY


File: vicare-libs.info,  Node: parser-tools unix-pathnames preds,  Next: parser-tools unix-pathnames conv,  Prev: parser-tools unix-pathnames errors,  Up: parser-tools unix-pathnames

54.1.3 Predicates for Unix pathnames
------------------------------------

The following bindings are exported by the library '(vicare parser-tools
unix-pathnames)'.

 -- Function: pathname? OBJ
 -- Function: bytevector-pathname? OBJ
 -- Function: $bytevector-pathname? BV
 -- Function: string-pathname? OBJ
 -- Function: $string-pathname? STR
     Return '#t' if OBJ is a string or bytevector acceptable as
     representation of a Unix pathname; otherwise return '#f'.  If OBJ
     is neither string nor bytevector: return '#f'.

     'bytevector-pathname?' returns '#f' if OBJ is not a bytevector.
     'string-pathname?' returns '#f' if OBJ is not a string.
     '$bytevector-pathname?' assumes that BV is a bytevector.
     '$string-pathname?' assumes that STR is a string.

 -- Function: segment? OBJ
 -- Function: bytevector-segment? OBJ
 -- Function: $bytevector-segment? BV
 -- Function: string-segment? OBJ
 -- Function: $string-segment? STR
     Return '#t' if OBJ is a string or bytevector acceptable as
     representation of a Unix pathname segment; otherwise return '#f'.
     If OBJ is neither string nor bytevector: return '#f'.

     'bytevector-segment?' returns '#f' if OBJ is not a bytevector.
     'string-segment?' returns '#f' if OBJ is not a string.
     '$bytevector-segment?' assumes that BV is a bytevector.
     '$string-segment?' assumes that STR is a string.

 -- Function: list-of-segments? OBJ
     Return '#t' if OBJ is a null or a proper list of strings and/or
     bytevectors each acceptable as representation of a Unix pathname
     segment; otherwise return '#f'.

 -- Function: absolute? OBJ
 -- Function: $bytevector-absolute? BV
 -- Function: $string-absolute? STR
     Return '#t' if OBJ is a string or bytevector acceptable as
     representation of absolute Unix pathname; otherwise return '#f'.
     If OBJ is not a valid representation of Unix pathname: raise an
     exception.

     '$bytevector-absolute?' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-absolute?' assumes that STR
     satisfies the predicate 'string-pathname?'.

 -- Function: relative? OBJ
 -- Function: $bytevector-relative? BV
 -- Function: $string-relative? STR
     Return '#t' if OBJ is a string or bytevector acceptable as
     representation of absolute Unix pathname; otherwise return '#f'.
     If OBJ is not a valid representation of Unix pathname: raise an
     exception.

     '$bytevector-relative?' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-relative?' assumes that STR
     satisfies the predicate 'string-pathname?'.


File: vicare-libs.info,  Node: parser-tools unix-pathnames conv,  Next: parser-tools unix-pathnames parser,  Prev: parser-tools unix-pathnames preds,  Up: parser-tools unix-pathnames

54.1.4 Converting Unix pathnames
--------------------------------

The following bindings are exported by the library '(vicare parser-tools
unix-pathnames)'.

 -- Function: string/bytevector->pathname-bytevector OBJ
 -- Function: string/bytevector->pathname-bytevector OBJ WHO
     Convert the string or bytevector OBJ to a bytevector representation
     of a pathname; when successful return a bytevector, if an error
     occurs raise an exception with compound condition object of types:
     '&unix-pathname-parser-error', '&who', '&message', '&irritants'
     using the optional WHO as value for the condition object of type
     '&who'.

     When OBJ is a string: only characters whose Unicode code point is
     in the range [1, 255] are accepted, notice that zero is excluded;
     in this case a new bytevector is returned.  An empty string is
     equivalent to a pathname segment representing the current
     directory: the return value is '#vu8(46)'.

     When OBJ is a bytevector: all the octets are accepted, with the
     exception of the octet zero; in this case OBJ itself is returned.
     An empty bytevector is equivalent to a pathname segment
     representing the current directory: the return value is '#vu8(46)'.

 -- Function: pathname-bytevector->string OBJ
 -- Function: pathname-bytevector->string OBJ WHO
     Convert the bytevector pathname representation OBJ to a string
     pathname representation; when successful return a string, if an
     error occurs raise an exception with compound condition object of
     types: '&unix-pathname-parser-error', '&who', '&message',
     '&irritants' using the optional WHO as value for the condition
     object of type '&who'.  An empty bytevector is equivalent to a
     bytevector representing the current directory: the return value is
     '"."'.

     All the octets in the bytevector are considered valid, with the
     exception of the octet zero.


File: vicare-libs.info,  Node: parser-tools unix-pathnames parser,  Next: parser-tools unix-pathnames manip,  Prev: parser-tools unix-pathnames conv,  Up: parser-tools unix-pathnames

54.1.5 Parsing Unix pathnames
-----------------------------

The following bindings are exported by the library '(vicare parser-tools
unix-pathnames)'.

 -- Function: parse-segment PORT
     Accumulate bytes from PORT while they are valid for a 'segment'
     component; notice that an empty 'segment' is valid.

     If EOF or a slash character in ASCII coding is read: return a
     possibly empty bytevector holding the bytes accumulated so far; the
     port position is left pointing to the byte after the last
     accumulated one.

     If an invalid byte is read: an exception is raised using
     'raise-unix-pathname-parser-error'; the port position is rewind to
     the one before this function call.

 -- Function: parse-segment-nz PORT
     Accumulate bytes from PORT while they are valid for a 'segment-nz'
     component; notice that an empty 'segment-nz' is not valid.

     If the first read operation returns EOF or a slash character in
     ASCII coding: the port position is restored to the one before this
     function call and the return value is false.

     If, after at least one valid byte is read, EOF or a slash is read:
     return a bytevector holding the bytes accumulated so far; the port
     position is left pointing to the byte after the last accumulated
     one.

     If an invalid byte is read: an exception is raised using
     'raise-unix-pathname-parser-error'; the port position is rewind to
     the one before this function call.

 -- Function: parse-slash-and-segment PORT
     Attempt to read from PORT the sequence slash character plus
     'segment' component; notice that an empty 'segment' is valid.

     If these components are successfully read: return a bytevector
     holding the accumulated 'segment' bytes; if the 'segment' component
     is empty: the returned bytevector is normalised to hold a single
     byte representing a dot in ASCII coding.  The port position is left
     pointing to the byte after the last accumulated byte from the
     'segment'.

     If EOF or a valid byte different from slash is read as first byte:
     return false; the port position is rewind to the one before this
     function call.

     If an invalid byte is read: an exception is raised using
     'raise-unix-pathname-parser-error'; the port position is rewind to
     the one before this function call.

 -- Function: parse-pathname PORT
     Parse from PORT an absolute or relative pathname until EOF is
     found; return two values: a boolean, '#t' if the pathname is
     absolute; a possibly empty list of bytevectors representing the
     segments.

     If an invalid octet is read or EOF is read before any octet: an
     exception is raised with 'raise-unix-pathname-parser-error'; the
     port position is rewind to the one before this function call.


File: vicare-libs.info,  Node: parser-tools unix-pathnames manip,  Next: parser-tools unix-pathnames comp,  Prev: parser-tools unix-pathnames parser,  Up: parser-tools unix-pathnames

54.1.6 Manipulating Unix pathnames
----------------------------------

The following bindings are exported by the library '(vicare parser-tools
unix-pathnames)'.

 -- Function: normalise-segments ABSOLUTE? SEGMENTS
     Given a list of bytevectors representing Unix pathname segments:
     normalise them, as much as possible, removing segments representing
     single-dot and double-dot directory entries; if ABSOLUTE? is true:
     normalise SEGMENTS as an absolute pathname, else normalise it as a
     relative pathname.  Return two values:

       1. A boolean, '#t' if some change was made from SEGMENTS to the
          second return value; this allows us to detect if a normalised
          list of segments when serialised into a bytevector becomes
          different from the original bytevector that generated
          SEGMENTS.

       2. A new, possibly empty, list of bytevectors representing the
          normalisation of SEGMENTS.  Absolute pathname segments can
          hold neither single-dot nor double-dot segments: if a
          double-dot segment cannot annihilate its previous segment, it
          is just discarded.

 -- Function: serialise-segments ABSOLUTE? SEGMENTS
     Given a possibly empty list of bytevectors representing pathname
     segments build and return a new bytevector representing the full
     pathname; if ABSOLUTE? is true: the first byte of the result
     represents a slash in ASCII coding.

     If SEGMENTS is null and ABSOLUTE? is true: the returned value is a
     bytevector holding a single byte representing a slash in ASCII
     coding.

     If SEGMENTS is null and ABSOLUTE? is false: the returned value is a
     bytevector holding a single byte representing a dot in ASCII
     coding.


File: vicare-libs.info,  Node: parser-tools unix-pathnames comp,  Prev: parser-tools unix-pathnames manip,  Up: parser-tools unix-pathnames

54.1.7 Components of Unix pathnames
-----------------------------------

The following functions accept as argument a string or bytevector
representing a Unix pathname and return a string or bytevector; the
returned value is not always a newly built object, so we must *not*
mutate it.

   The following bindings are exported by the library '(vicare
parser-tools unix-pathnames)'.  Identifiers whose name is prefixed with
'$' are bound to unsafe operations which do not validate their
arguments.

 -- Function: extension OBJ
 -- Function: $bytevector-extension BV
 -- Function: $string-extension STR
     Return a string or bytevector representing the extension of OBJ,
     which must be a valid Unix pathname string or bytevector
     representation.  The extension of a pathname is the sequence of
     characters from the end up to the first dot character before the
     first slash character; the returned value does *not* include the
     dot character and can be empty.

     If the dot is the first character in the pathname's last segment:
     return the empty bytevector because we interpret this pathname as
     representing a Unix-style "hidden" filename or dirname.

     '$bytevector-extension' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-extension' assumes that STR
     satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.extension ?pathname))

          (doit "ciao.it")                => "it"
          (doit "ciao")                   => ""
          (doit "/path/to/file.ext")      => "ext"
          (doit "/path/to/file.")         => ""
          (doit "/path/to/file")          => ""
          (doit "/path/to/file.ext/ab")   => ""
          (doit "/path/to/some.file.ext") => "ext"
          (doit "a/")                     => ""
          (doit "a.")                     => ""
          (doit ".")                      => ""
          (doit "..")                     => ""
          (doit "...")                    => ""
          (doit ".a")                     => ""
          (doit ".emacsrc")               => ""
          (doit "..a")                    => "a"
          (doit "...a")                   => "a"
          (doit "..a.b")                  => "b"
          (doit "~/.")                    => ""
          (doit "~/..")                   => ""
          (doit "~/...")                  => ""
          (doit "~/.a")                   => ""
          (doit "~/.emacsrc")             => ""
          (doit "~/..a")                  => "a"
          (doit "~/...a")                 => "a"
          (doit "~/..a.b")                => "b"

          (doit '#ve(ascii "/path/to/file.ext"))
          => #ve(ascii "ext")

 -- Function: dirname OBJ
 -- Function: $bytevector-dirname BV
 -- Function: $string-dirname STR
     Return a string or bytevector representing the dirname of OBJ,
     which must be a valid Unix pathname string or bytevector
     representation.  The dirname of a pathname is the sequence of
     characters from the beginning up to the last slash character; the
     returned value does *not* include the slash character and is never
     empty: when there is no directory part in the pathname, the
     returned value represents the current directory as single dot.
     Notice that contiguous slashses are "collapsed" into one slash.

     '$bytevector-dirname' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-dirname' assumes that STR
     satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.dirname ?pathname))

          (doit "/path/to/file.ext")      => "/path/to"
          (doit "file.ext")               => "."
          (doit "/file.ext")              => "/"
          (doit "//file.ext")             => "/"
          (doit "/path/to///file.ext")    => "/path/to"
          (doit "//////file.ext")         => "/"
          (doit "a/b")                    => "a"
          (doit "a")                      => "."
          (doit "../a")                   => ".."
          (doit "./a")                    => "."
          (doit "../abcd")                => ".."
          (doit "./abcd")                 => "."
          (doit "../abcd/efgh")           => "../abcd"
          (doit "./abcd/efgh")            => "./abcd"
          (doit "/ciao/")                 => "/"
          (doit "ciao/")                  => "."
          (doit "./ciao/")                => "."
          (doit "hello/ciao/")            => "hello"
          (doit "//////")                 => "/"
          (doit "ciao//////")             => "."

          (doit '#ve(ascii "/path/to/file.ext"))
          => #ve(ascii "/path/to")

 -- Function: tailname OBJ
 -- Function: $bytevector-tailname BV
 -- Function: $string-tailname STR
     Return a string or bytevector representing the tailname of OBJ,
     which must be a valid Unix pathname string or bytevector
     representation.  The tailname of a pathname is its last segment;
     the returned value does *not* include the leading slash character,
     if any, and it cannot be empty; the only exception is when the
     argument represents the root directory, in which case the returned
     value is the dot segment.  When the whole OBJ is the tailname: the
     returned value is OBJ itself.

     '$bytevector-tailname' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-tailname' assumes that STR
     satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.tailname ?pathname))

          (doit "/path/to/file.ext")      => "file.ext"
          (doit "file.ext")               => "file.ext"
          (doit "/file.ext")              => "file.ext"
          (doit "//file.ext")             => "file.ext"
          (doit "/path/to///file.ext")    => "file.ext"
          (doit "//////file.ext")         => "file.ext"
          (doit "a/b")                    => "b"
          (doit "a")                      => "a"
          (doit "../a")                   => "a"
          (doit "./a")                    => "a"
          (doit "../abcd")                => "abcd"
          (doit "./abcd")                 => "abcd"
          (doit "../abcd/efgh")           => "efgh"
          (doit "./abcd/efgh")            => "efgh"
          (doit "/ciao/")                 => "ciao"
          (doit "ciao/")                  => "ciao"
          (doit "./ciao/")                => "ciao"
          (doit "hello/ciao/")            => "ciao"
          (doit "ciao//////")             => "ciao"
          (doit "/")                      => "."
          (doit "//////")                 => "."

 -- Function: rootname OBJ
 -- Function: $bytevector-rootname BV
 -- Function: $string-rootname STR
     Return a string or bytevector representing the rootname of OBJ,
     which must be a valid Unix pathname string or bytevector
     representation.  The rootname of a pathname is the sequence of
     characters from the beginning up to the last dot character before
     the extension, in other words: everything but the extension; the
     returned value does *not* include the dot character and cannot be
     empty.

     If the dot is the first character in the pathname's last segment:
     return the whole bytevector because we interpret such pathname as
     representing a Unix-style "hidden" filename or dirname.  If the
     last segment represents the uplevel directory (it is the
     double-dot): return the full pathname.  The return value can be the
     argument itself.

     '$bytevector-rootname' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-rootname' assumes that STR
     satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.rootname ?pathname))

          (doit "ciao.it")                => "ciao"
          (doit "ciao")                   => "ciao"
          (doit "/path/to/file.ext")      => "/path/to/file"
          (doit "/path/to/file.")         => "/path/to/file"
          (doit "/path/to/file")          => "/path/to/file"
          (doit "/path/to/file.ext/ab")   => "/path/to/file.ext/ab"
          (doit "/path/to/some.file.ext") => "/path/to/some.file"
          (doit "a/")                     => "a"
          (doit "a.")                     => "a"
          (doit ".")                      => "."
          (doit "..")                     => ".."
          (doit "...")                    => ".."
          (doit ".a")                     => ".a"
          (doit ".emacsrc")               => ".emacsrc"
          (doit "..a")                    => "."
          (doit "...a")                   => ".."
          (doit "..a.b")                  => "..a"
          (doit "~/.")                    => "~/."
          (doit "~/..")                   => "~/.."
          (doit "~/...")                  => "~/.."
          (doit "~/.a")                   => "~/.a"
          (doit "~/.emacsrc")             => "~/.emacsrc"
          (doit "~/..a")                  => "~/."
          (doit "~/...a")                 => "~/.."
          (doit "~/..a.b")                => "~/..a"
          (doit "///")                    => "/"
          (doit "ciao///")                => "ciao"
          (doit "ciao.it///")             => "ciao"
          (doit "ciao.it.en///")          => "ciao.it"

 -- Function: strip-trailing-slashes OBJ
 -- Function: $bytevector-strip-trailing-slashes BV
 -- Function: $string-strip-trailing-slashes STR
     Return a string or bytevector representing the argument with the
     trailing slashes stripped, if any.  If there are no trailing
     slashes: return OBJ itself.

     '$bytevector-strip-trailing-slashes' assumes that BV satisfies the
     predicate 'bytevector-pathname?'.  '$string-strip-trailing-slashes'
     assumes that STR satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.strip-trailing-slashes ?pathname))

          (doit "/path/to/file.ext")      => "/path/to/file.ext"
          (doit "/path/to/file.ext///")   => "/path/to/file.ext"
          (doit "/")                      => "/"
          (doit "///")                    => "/"

 -- Function: split OBJ
 -- Function: $bytevector-split BV
 -- Function: $string-split STR
     Split into segments the argument OBJ, which must be a valid Unix
     pathname string or bytevector representation.  Return 2 values: a
     boolean, true if the pathname is absolute; null or a proper list of
     bytevectors representing the segments.  The returned segments are
     normalised by removing, when possible, segments representing the
     current directory and segments representing the uplevel directory.

     '$bytevector-split' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-split' assumes that STR satisfies
     the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.split ?pathname))

          (doit "/path/to/file.ext")
          => #t (#ve(ascii "path")
                 #ve(ascii "to")
                 #ve(ascii "file.ext"))

          (doit "path/to/file.ext")
          => #f (#ve(ascii "path")
                 #ve(ascii "to")
                 #ve(ascii "file.ext"))

          (doit "ciao//")         => #f (#ve(ascii "ciao"))
          (doit "/")              => #t ()
          (doit ".")              => #f ()
          (doit "..")             => #f (#ve(ascii ".."))
          (doit "ciao/..")        => #f ()
          (doit "/.")             => #t ()
          (doit "/..")            => #t ()
          (doit "/ciao/..")       => #t ()

 -- Function: normalise OBJ
 -- Function: $bytevector-normalise BV
 -- Function: $string-normalise STR
     Normalise the argument OBJ, which must be a valid Unix pathname
     string or bytevector representation, by removing, when possible,
     segments representing the current directory and segments
     representing the uplevel directory.  The result of this function is
     *not* a full canonicalisation as can be performed by a system
     function like the POSIX 'realpath()'.

     '$bytevector-normalise' assumes that BV satisfies the predicate
     'bytevector-pathname?'.  '$string-normalise' assumes that STR
     satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (normalise (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.normalise ?pathname))

          (doit "/path/to/file.ext")      => "/path/to/file.ext"
          (doit "path/to/file.ext")       => "path/to/file.ext"
          (doit "ciao//")                 => "ciao"
          (doit "/")                      => "/"
          (doit ".")                      => "."
          (doit "..")                     => ".."
          (doit "ciao/..")                => "."
          (doit "/.")                     => "/"
          (doit "/..")                    => "/"
          (doit "/ciao/..")               => "/"

 -- Function: prefix? OBJ1 OBJ2
 -- Function: $bytevector-prefix? BV1 BV2
 -- Function: $string-prefix? STR1 STR2
     Given two strings or two bytevectors representing valid and
     *normalised* Unix pathname representations: return '#t' if the
     first is the prefix of the second, otherwise return '#f'.  The
     result of this function is fully reliable only if the arguments are
     absolute pathnames resulting from the canonicalisation performed by
     a system function like the POSIX 'realpath()'.

     '$bytevector-prefix?' assumes that BV1 and BV2 satisfy the
     predicate 'bytevector-pathname?'.  '$string-prefix?' assumes that
     STR1 and STR2 satisfy the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (prefix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.prefix? ?pathname))

          (doit "/path/to/file.ext" "/path/to/file.ext") => #t
          (doit "/path/to/"         "/path/to/file.ext") => #t
          (doit "/path/from"        "/path/to/file.ext") => #f

 -- Function: suffix? OBJ1 OBJ2
 -- Function: $bytevector-suffix? BV1 BV2
 -- Function: $string-suffix? STR1 STR2
     Given two strings or two bytevectors representing valid and
     *normalised* Unix pathname representations: return '#t' if the
     first is the suffix of the second, otherwise return '#f'.  The
     result of this function is fully reliable only if the arguments are
     absolute pathnames resulting from the canonicalisation performed by
     a system function like the POSIX 'realpath()'.

     '$bytevector-suffix?' assumes that BV1 and BV2 satisfy the
     predicate 'bytevector-pathname?'.  '$string-suffix?' assumes that
     STR1 and STR2 satisfy the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (suffix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.suffix? ?pathname))

          (doit "/path/to/file.ext" "/path/to/file.ext") => #t
          (doit "/to/file.ext"      "/path/to/file.ext") => #t
          (doit "/from/file.ext"    "/path/to/file.ext") => #f

 -- Function: prepend OBJ1 OBJ2
 -- Function: $bytevector-prepend BV1 BV2
 -- Function: $string-prepend STR1 STR2
     Given two strings or two bytevectors representing valid Unix
     pathnames: prepend the first to the second and return the result.

     '$bytevector-prepend' assumes that BV1 and BV2 satisfy the
     predicate 'bytevector-pathname?'.  '$string-prepend' assumes that
     STR1 and STR2 satisfy the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (suffix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.prepend ?pathname))

          (doit "/path/to" "file.ext")    => "/path/to/file.ext"
          (doit "/" "path/to/file.ext")   => "/path/to/file.ext"
          (doit "." "path/to/file.ext")   => "./path/to/file.ext"
          (doit ".." "path/to/file.ext")  => "../path/to/file.ext"

 -- Function: append OBJ1 OBJ2
 -- Function: $bytevector-append BV1 BV2
 -- Function: $string-append STR1 STR2
     Given two strings or two bytevectors representing valid Unix
     pathnames: append the first to the second and return the result.

     '$bytevector-append' assumes that BV1 and BV2 satisfy the predicate
     'bytevector-pathname?'.  '$string-append' assumes that STR1 and
     STR2 satisfy the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (suffix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.append ?pathname))

          (doit "file.ext" "/path/to")    => "/path/to/file.ext"
          (doit "path/to/file.ext" "/")   => "/path/to/file.ext"
          (doit "path/to/file.ext" ".")   => "./path/to/file.ext"
          (doit "path/to/file.ext" "..")  => "../path/to/file.ext"

 -- Function: replace-extension PTN EXT
 -- Function: $bytevector-replace-extension PTN-BV EXT-BV
 -- Function: $string-replace-extension PTN-STR EXT-STR
     Given a string representing a valid Unix pathname and a string
     representing a valid Unix pathname segment, or a bytevector
     representing a valid Unix pathname and a bytevector representing a
     valid Unix pathname segment: strip the extension from the pathname
     and append the segment to the result as new extension.

     '$bytevector-replace-extension' assumes that PTN-BV satisfies the
     predicate 'bytevector-pathname?' and that EXT-BV satisfies the
     predicate 'bytevector-segment?'.  '$string-replace-extension'
     assumes that PTN-STR satisfies the predicate 'string-pathname?' and
     that EXT-STR satisfies the predicate 'string-segment?'.

          #!vicare
          (import (vicare)
            (suffix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname ?extension)
            (uxptn.replace-extension ?pathname ?extension))

          (doit "file.one"          "two") => "file.two"
          (doit "/path/to/file.one" "two") => "/path/to/file.two"
          (doit ".emacs"            "elc") => ".emacs.elc"
          (doit "/path/to/.emacs"   "elc") => "/path/to/.emacs.elc"

          (doit "/"   "ext")
          error-> &unix-pathname-normalisation-error

          (doit "///" "ext")
          error-> &unix-pathname-normalisation-error

          (doit "."   "ext")
          error-> &unix-pathname-normalisation-error

          (doit ".."  "ext")
          error-> &unix-pathname-normalisation-error

 -- Function: uri-representation OBJ
 -- Function: $bytevector-uri-representation BV
 -- Function: $string-uri-representation STR
     Return a string or bytevector being the URI representation of OBJ,
     which must be a valid Unix pathname string or bytevector
     representation.

     '$bytevector-uri-representation' assumes that BV satisfies the
     predicate 'bytevector-pathname?'.  '$string-uri-representation'
     assumes that STR satisfies the predicate 'string-pathname?'.

          #!vicare
          (import (vicare)
            (suffix (vicare parser-tools unix-pathnames) uxptn.))

          (define-syntax-rule (doit ?pathname)
            (uxptn.uri-representation ?pathname))

          (doit "/path/to/file.ext")      => "file:///path/to/file.ext"
          (doit "path/to/file.ext")       => "file:path/to/file.ext"


File: vicare-libs.info,  Node: Package License,  Next: concept index,  Prev: parser-tools,  Up: Top

Appendix A GNU General Public License
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: vicare-libs.info,  Node: concept index,  Next: function index,  Prev: Package License,  Up: Top

Appendix B An entry for each concept
************************************

 [index ]
* Menu:

* (srfi 61 cond), library:               srfi general-cond.   (line   6)
* (srfi 61), library:                    srfi general-cond.   (line   6)
* (srfi :0 cond-expand), library:        srfi cond-expand.    (line   6)
* (srfi :0), library:                    srfi cond-expand.    (line   6)
* (srfi :1 lists), library:              srfi list.           (line   6)
* (srfi :1), library:                    srfi list.           (line   6)
* (srfi :101 random-access-lists equal), library: srfi ralists.
                                                              (line   6)
* (srfi :101 random-access-lists procedures), library: srfi ralists.
                                                              (line   6)
* (srfi :101 random-access-lists syntax), library: srfi ralists.
                                                              (line   6)
* (srfi :101 random-access-lists), library: srfi ralists.     (line   6)
* (srfi :101), library:                  srfi ralists.        (line   6)
* (srfi :106 socket), library:           srfi basic-socket.   (line   6)
* (srfi :106), library:                  srfi basic-socket.   (line   6)
* (srfi :11 let-values), library:        srfi let-values.     (line   6)
* (srfi :11), library:                   srfi let-values.     (line   6)
* (srfi :111 boxes), library:            srfi boxes.          (line   6)
* (srfi :111), library:                  srfi boxes.          (line   6)
* (srfi :112 boxes), library:            srfi env-inquiry.    (line   6)
* (srfi :112), library:                  srfi env-inquiry.    (line   6)
* (srfi :113 sets-and-bags), library:    srfi sets-and-bags.  (line   6)
* (srfi :113), library:                  srfi sets-and-bags.  (line   6)
* (srfi :114 comparators), library:      srfi comparators.    (line   6)
* (srfi :114), library:                  srfi comparators.    (line   6)
* (srfi :115 regexps), library:          srfi regexps.        (line   6)
* (srfi :115), library:                  srfi regexps.        (line   6)
* (srfi :116 ilists), library:           srfi ilists.         (line   6)
* (srfi :116), library:                  srfi ilists.         (line   6)
* (srfi :13 strings), library:           srfi strings.        (line   6)
* (srfi :13), library:                   srfi strings.        (line   6)
* (srfi :14 char-sets), library:         srfi char-sets.      (line   6)
* (srfi :14), library:                   srfi char-sets.      (line   6)
* (srfi :16 case-lambda), library:       srfi case-lambda.    (line   6)
* (srfi :16), library:                   srfi case-lambda.    (line   6)
* (srfi :19 time), library:              srfi time.           (line   6)
* (srfi :19), library:                   srfi time.           (line   6)
* (srfi :2 and-let*), library:           srfi and-let-star.   (line   6)
* (srfi :2), library:                    srfi and-let-star.   (line   6)
* (srfi :23 error), library:             srfi error-reporting.
                                                              (line   6)
* (srfi :23), library:                   srfi error-reporting.
                                                              (line   6)
* (srfi :25 multi-dimensional-arrays), library: srfi marray.  (line   6)
* (srfi :25), library:                   srfi marray.         (line   6)
* (srfi :26 cut), library:               srfi specialize-procedures.
                                                              (line   6)
* (srfi :26), library:                   srfi specialize-procedures.
                                                              (line   6)
* (srfi :27 random-bits), library:       srfi random.         (line   6)
* (srfi :27), library:                   srfi random.         (line   6)
* (srfi :28 basic-format-strings), library: srfi basic-format.
                                                              (line   6)
* (srfi :28), library:                   srfi basic-format.   (line   6)
* (srfi :31 rec), library:               srfi rec.            (line   6)
* (srfi :31), library:                   srfi rec.            (line   6)
* (srfi :37 args-fold), library:         srfi args-fold.      (line   6)
* (srfi :37), library:                   srfi args-fold.      (line   6)
* (srfi :38 with-shared-structure), library: srfi shared structures.
                                                              (line   6)
* (srfi :38), library:                   srfi shared structures.
                                                              (line   6)
* (srfi :39 parameters), library:        srfi parameters.     (line   6)
* (srfi :39), library:                   srfi parameters.     (line   6)
* (srfi :41 streams), library:           srfi streams.        (line   6)
* (srfi :41), library:                   srfi streams.        (line   6)
* (srfi :42 eager-comprehensions), library: srfi eager-comp.  (line   6)
* (srfi :42), library:                   srfi eager-comp.     (line   6)
* (srfi :45 lazy), library:              srfi lazy.           (line   6)
* (srfi :45), library:                   srfi lazy.           (line   6)
* (srfi :48 intermediate-format-string), library: srfi intermediate-format.
                                                              (line   6)
* (srfi :48), library:                   srfi intermediate-format.
                                                              (line   6)
* (srfi :6 basic-string-ports), library: srfi string-ports.   (line   6)
* (srfi :6), library:                    srfi string-ports.   (line   6)
* (srfi :64 testing), library:           srfi testing.        (line   6)
* (srfi :64), library:                   srfi testing.        (line   6)
* (srfi :67 compare-procedures), library: srfi compare-procedures.
                                                              (line   6)
* (srfi :67), library:                   srfi compare-procedures.
                                                              (line   6)
* (srfi :69 basic-hash-tables), library: srfi hash-tables.    (line   6)
* (srfi :69), library:                   srfi hash-tables.    (line   6)
* (srfi :78 lightweight-testing), library: srfi lightweight-testing.
                                                              (line   6)
* (srfi :78), library:                   srfi lightweight-testing.
                                                              (line   6)
* (srfi :8 receive), library:            srfi receive.        (line   6)
* (srfi :8), library:                    srfi receive.        (line   6)
* (srfi :9 records), library:            srfi records.        (line   6)
* (srfi :9), library:                    srfi records.        (line   6)
* (srfi :98 os-environment-variables), library: srfi environment-variables.
                                                              (line   6)
* (srfi :98), library:                   srfi environment-variables.
                                                              (line   6)
* (srfi :99 records inspection), library: srfi err5rs records.
                                                              (line   6)
* (srfi :99 records procedural), library: srfi err5rs records.
                                                              (line   6)
* (srfi :99 records syntactic), library: srfi err5rs records. (line   6)
* (srfi :99 records), library:           srfi err5rs records. (line   6)
* (srfi :99), library:                   srfi err5rs records. (line   6)
* (vicare arguments general-c-buffers), library: cbuffers api.
                                                              (line   6)
* (vicare arguments validation), library: args.               (line   6)
* (vicare checks), library:              checks.              (line   6)
* (vicare containers arrays), library:   arrays.              (line   6)
* (vicare containers binary-heaps), library: binary heaps.    (line   6)
* (vicare containers binary-search-trees), library: bst.      (line   6)
* (vicare containers bitvectors), library: bitvectors.        (line   6)
* (vicare containers bytevector-compounds), library: bytevector compounds.
                                                              (line   6)
* (vicare containers bytevectors s8), library: bytevectors 8. (line   6)
* (vicare containers bytevectors s8low), library: bytevectors 8.
                                                              (line   6)
* (vicare containers bytevectors u8), library: bytevectors 8. (line   6)
* (vicare containers bytevectors u8low), library: bytevectors 8.
                                                              (line   6)
* (vicare containers bytevectors), library: bytevectors utils.
                                                              (line   6)
* (vicare containers chains sort), library: chains.           (line   6)
* (vicare containers chains), library:   chains.              (line   6)
* (vicare containers char-sets), library: char-sets.          (line   6)
* (vicare containers comparators), library: comparators.      (line   6)
* (vicare containers deques), library:   deques.              (line   6)
* (vicare containers dynamic-arrays sort), library: dynamic arrays.
                                                              (line   6)
* (vicare containers dynamic-arrays), library: dynamic arrays.
                                                              (line   6)
* (vicare containers ideques chains), library: ideques chains.
                                                              (line   6)
* (vicare containers ideques deques), library: ideques deques.
                                                              (line   6)
* (vicare containers ideques dynamic-arrays), library: ideques dynamic arrays.
                                                              (line   6)
* (vicare containers ideques), library:  ideques.             (line   6)
* (vicare containers ilists comparators), library: ilists.    (line   6)
* (vicare containers ilists quotations), library: ilists.     (line   6)
* (vicare containers ilists), library:   ilists.              (line   6)
* (vicare containers iqueues chains), library: iqueues chains.
                                                              (line   6)
* (vicare containers iqueues deques), library: iqueues deques.
                                                              (line   6)
* (vicare containers iqueues dynamic-arrays), library: iqueues dynamic arrays.
                                                              (line   6)
* (vicare containers iqueues queues), library: iqueues queues.
                                                              (line   6)
* (vicare containers iqueues), library:  iqueues.             (line   6)
* (vicare containers istacks chains), library: istacks chains.
                                                              (line   6)
* (vicare containers istacks deques), library: istacks deques.
                                                              (line   6)
* (vicare containers istacks dynamic-arrays), library: istacks dynamic arrays.
                                                              (line   6)
* (vicare containers istacks ilists), library: istacks ilists.
                                                              (line   6)
* (vicare containers istacks lists), library: istacks lists.  (line   6)
* (vicare containers istacks ralists), library: istacks ralists.
                                                              (line   6)
* (vicare containers istacks stacks), library: istacks stacks.
                                                              (line   6)
* (vicare containers istacks), library:  istacks.             (line   6)
* (vicare containers iteration-thunks), library: iteration thunks.
                                                              (line   6)
* (vicare containers knuth-morris-pratt), library: kmp.       (line   6)
* (vicare containers levenshtein), library: levenshtein.      (line   6)
* (vicare containers lists low), library: lists.              (line   6)
* (vicare containers lists stx), library: lists.              (line   6)
* (vicare containers lists), library:    lists.               (line   6)
* (vicare containers object-properties), library: object-properties.
                                                              (line   6)
* (vicare containers one-dimension-cc), library: one-dimension.
                                                              (line   6)
* (vicare containers one-dimension-co), library: one-dimension.
                                                              (line   6)
* (vicare containers queues), library:   queues.              (line   6)
* (vicare containers ralists), library:  ralists.             (line   6)
* (vicare containers sets-and-bags), library: sets bags.      (line   6)
* (vicare containers stacks), library:   stacks.              (line   6)
* (vicare containers strings low), library: strings.          (line   6)
* (vicare containers strings rabin-karp), library: strings rabin-karp.
                                                              (line   6)
* (vicare containers strings), library:  strings.             (line   6)
* (vicare containers vectors low), library: vectors.          (line   6)
* (vicare containers vectors), library:  vectors.             (line   6)
* (vicare containers weak-hashtables), library: wtables.      (line   6)
* (vicare crypto randomisations blum-blum-shub), library: random generators bbs.
                                                              (line   6)
* (vicare crypto randomisations borosh), library: random generators borosh.
                                                              (line   6)
* (vicare crypto randomisations cmrg), library: random generators cmrg.
                                                              (line   6)
* (vicare crypto randomisations distributions), library: random dist.
                                                              (line   6)
* (vicare crypto randomisations lists), library: random utils lists.
                                                              (line   6)
* (vicare crypto randomisations marsaglia), library: random generators marsaglia.
                                                              (line   6)
* (vicare crypto randomisations mersenne), library: random generators mersenne.
                                                              (line   6)
* (vicare crypto randomisations strings), library: random utils strings.
                                                              (line   6)
* (vicare crypto randomisations vectors), library: random utils vectors.
                                                              (line   6)
* (vicare crypto randomisations), library: random.            (line   6)
* (vicare debugging compiler), library:  debugging compiler.  (line   6)
* (vicare formations), library:          formations.          (line   6)
* (vicare gcc), library:                 gcc.                 (line   6)
* (vicare getopts), library:             getopts.             (line   6)
* (vicare irregex), library:             irregex.             (line   6)
* (vicare language-extensions amb), library: amb.             (line   6)
* (vicare language-extensions ascii-chars), library: asciis.  (line   6)
* (vicare language-extensions c-enumerations), library: c-enums.
                                                              (line   6)
* (vicare language-extensions callables), library: callables. (line   6)
* (vicare language-extensions comparisons), library: comparisons.
                                                              (line   6)
* (vicare language-extensions cond-expand helpers), library: cond-expand.
                                                              (line   6)
* (vicare language-extensions cond-expand), library: cond-expand.
                                                              (line   6)
* (vicare language-extensions conditions-and-restarts), library: restarts.
                                                              (line   6)
* (vicare language-extensions custom-ports), library: custom-ports.
                                                              (line   6)
* (vicare language-extensions hooks), library: hooks.         (line   6)
* (vicare language-extensions include), library: include.     (line   6)
* (vicare language-extensions instantiable-bodies), library: ibodies.
                                                              (line   6)
* (vicare language-extensions keywords), library: keywords.   (line   6)
* (vicare language-extensions loops), library: loops.         (line   6)
* (vicare language-extensions makers), library: makers.       (line   6)
* (vicare language-extensions multimethods), library: multimethods.
                                                              (line   6)
* (vicare language-extensions pipelines), library: pipelines. (line   6)
* (vicare language-extensions simple-match), library: simple-match.
                                                              (line   6)
* (vicare language-extensions streams), library: streams.     (line   6)
* (vicare language-extensions syntaxes), library: syntaxes.   (line   6)
* (vicare language-extensions tracing-syntaxes), library: tracing.
                                                              (line   6)
* (vicare language-extensions tuples), library: tuples.       (line   6)
* (vicare language-extensions variables), library: variables. (line   6)
* (vicare net channels), library:        net channels.        (line   6)
* (vicare numerics flonum-formatter), library: flonum format. (line   6)
* (vicare numerics flonum-parser), library: flonum parser.    (line   6)
* (vicare parser-logic), library:        parser logic.        (line   6)
* (vicare parser-tools silex lexer), library: silex.          (line   6)
* (vicare parser-tools silex utilities), library: silex utilities.
                                                              (line   6)
* (vicare parser-tools silex), library:  silex.               (line   6)
* (vicare parser-tools unix-pathnames), library: parser-tools unix-pathnames.
                                                              (line   6)
* (vicare platform constants), library:  platform constants.  (line   6)
* (vicare platform errno), library:      errno.               (line   6)
* (vicare platform features), library:   platform features.   (line   6)
* (vicare platform utilities), library:  platform utilities.  (line   6)
* (vicare platform words), library:      words.               (line   6)
* (vicare posix curl), library:          posix curl.          (line   6)
* (vicare posix daemonisations), library: posix daemonisations.
                                                              (line   6)
* (vicare posix find), library:          posix find.          (line   6)
* (vicare posix lock-pid-files) library: posix lock-pid-files.
                                                              (line   6)
* (vicare posix log-files), library:     posix log-files.     (line   6)
* (vicare posix mailx), library:         posix mailx.         (line   6)
* (vicare posix pid-files) library:      posix pid-files.     (line   6)
* (vicare posix sendmail), library:      posix sendmail.      (line   6)
* (vicare posix simple-event-loop), library: posix sel.       (line   6)
* (vicare posix tcp-server-sockets), library: posix tcp-server-sockets.
                                                              (line   6)
* (vicare posix wget), library:          posix wget.          (line   6)
* (vicare pregexp), library:             pregexp.             (line   6)
* (vicare readline), library:            readline.            (line   6)
* Alists:                                srfi list spec alist.
                                                              (line   6)
* Alists <1>:                            lists alist.         (line   6)
* Argument ARRY:                         dynamic arrays objects.
                                                              (line  23)
* Argument BNODE:                        bst bnodes objects.  (line  10)
* Argument BVCOM:                        bytevector compounds types.
                                                              (line  10)
* Argument CHAIN:                        chains objects.      (line   6)
* Argument DEQUE:                        deques objects.      (line  14)
* Argument HEAP:                         binary heaps objects.
                                                              (line  12)
* Argument IDEQUE:                       ideques common.      (line  10)
* Argument IQUEUE:                       iqueues common.      (line  10)
* Argument ISTACK:                       istacks common.      (line  10)
* Argument LINK:                         chains objects.      (line  16)
* Argument QUEUE:                        queues objects.      (line  14)
* Argument STACK:                        stacks objects.      (line  14)
* Argument UNODE:                        bst unodes objects.  (line  10)
* ARRY argument:                         dynamic arrays objects.
                                                              (line  23)
* Association lists:                     srfi list spec alist.
                                                              (line   6)
* Association lists <1>:                 lists alist.         (line   6)
* Block/unblock interprocess signals API: posix signal.       (line  24)
* BNODE argument:                        bst bnodes objects.  (line  10)
* BUB interprocess signals API:          posix signal.        (line  24)
* BUB signals API:                       posix signal.        (line  24)
* BVCOM, function argument:              bytevector compounds types.
                                                              (line  10)
* CHAIN argument:                        chains objects.      (line   6)
* Changing current directory:            posix dir.           (line  33)
* Closing a directory stream:            posix dir.           (line 103)
* Creating directories:                  posix dir.           (line   7)
* Creating lock PID files:               posix lock-pid-files.
                                                              (line   6)
* Creating PID files:                    posix pid-files.     (line   6)
* curl, downloading files:               posix curl.          (line   6)
* Current working directory:             posix dir.           (line  26)
* Daemon process:                        posix daemonisations.
                                                              (line   6)
* Daemon service process:                posix daemonisations.
                                                              (line   6)
* DEQUE argument:                        deques objects.      (line  14)
* Directories, changing current:         posix dir.           (line  33)
* Directories, closing a stream:         posix dir.           (line 103)
* Directories, creating:                 posix dir.           (line   7)
* Directories, current working:          posix dir.           (line  26)
* Directories, inspecting a stream:      posix dir.           (line 118)
* Directories, making:                   posix dir.           (line   7)
* Directories, opening a stream:         posix dir.           (line  77)
* Directories, reading a stream:         posix dir.           (line  91)
* Directories, removing:                 posix dir.           (line  19)
* Directories, rewinding a stream:       posix dir.           (line 112)
* Directories, seeking a stream:         posix dir.           (line 125)
* Downloading files with curl:           posix curl.          (line   6)
* Downloading files with wget:           posix wget.          (line   6)
* Environment variable SILEX_PATH:       silex syntax includes.
                                                              (line  22)
* Environment variable VICARE_ARGUMENTS_VALIDATION: args config.
                                                              (line   6)
* Executable files, finding:             posix process exec.  (line  88)
* Executing processes:                   posix process exec.  (line  15)
* ffi-enabled, cond-expand clause:       srfi cond-expand vicare.
                                                              (line  29)
* File system scanning with find:        posix find.          (line   6)
* File, logging:                         posix log-files.     (line   6)
* find, scanning the file system:        posix find.          (line   6)
* Finding executable files:              posix process exec.  (line  88)
* Finding programs:                      posix process exec.  (line  88)
* Forking a process:                     posix process fork fork.
                                                              (line   6)
* Forking processes:                     posix process fork fork.
                                                              (line   8)
* Function argument BVCOM:               bytevector compounds types.
                                                              (line  10)
* glibc-enabled, cond-expand clause:     srfi cond-expand vicare.
                                                              (line  44)
* HEAP argument:                         binary heaps objects.
                                                              (line  12)
* iconv-enabled, cond-expand clause:     srfi cond-expand vicare.
                                                              (line  34)
* IDEQUE argument:                       ideques common.      (line  10)
* Inspecting a directory stream:         posix dir.           (line 118)
* Interprocess signals, block/unblock API: posix signal.      (line  24)
* IQUEUE argument:                       iqueues common.      (line  10)
* ISTACK argument:                       istacks common.      (line  10)
* Iteration thunks:                      iteration thunks.    (line   6)
* Iterators, iteration thunks:           iteration thunks.    (line   6)
* Library (srfi 61 cond):                srfi general-cond.   (line   6)
* Library (srfi 61):                     srfi general-cond.   (line   6)
* Library (srfi :0 cond-expand):         srfi cond-expand.    (line   6)
* Library (srfi :0):                     srfi cond-expand.    (line   6)
* Library (srfi :1 lists):               srfi list.           (line   6)
* Library (srfi :1):                     srfi list.           (line   6)
* Library (srfi :101 random-access-lists equal): srfi ralists.
                                                              (line   6)
* Library (srfi :101 random-access-lists procedures): srfi ralists.
                                                              (line   6)
* Library (srfi :101 random-access-lists syntax): srfi ralists.
                                                              (line   6)
* Library (srfi :101 random-access-lists): srfi ralists.      (line   6)
* Library (srfi :101):                   srfi ralists.        (line   6)
* Library (srfi :106 socket):            srfi basic-socket.   (line   6)
* Library (srfi :106):                   srfi basic-socket.   (line   6)
* Library (srfi :11 let-values):         srfi let-values.     (line   6)
* Library (srfi :11):                    srfi let-values.     (line   6)
* Library (srfi :111 boxes):             srfi boxes.          (line   6)
* Library (srfi :111):                   srfi boxes.          (line   6)
* Library (srfi :112 boxes):             srfi env-inquiry.    (line   6)
* Library (srfi :112):                   srfi env-inquiry.    (line   6)
* Library (srfi :113 sets-and-bags):     srfi sets-and-bags.  (line   6)
* Library (srfi :113):                   srfi sets-and-bags.  (line   6)
* Library (srfi :114 comparators):       srfi comparators.    (line   6)
* Library (srfi :114):                   srfi comparators.    (line   6)
* Library (srfi :115 regexps):           srfi regexps.        (line   6)
* Library (srfi :115):                   srfi regexps.        (line   6)
* Library (srfi :116 ilists):            srfi ilists.         (line   6)
* Library (srfi :116):                   srfi ilists.         (line   6)
* Library (srfi :13 strings):            srfi strings.        (line   6)
* Library (srfi :13):                    srfi strings.        (line   6)
* Library (srfi :14 char-sets):          srfi char-sets.      (line   6)
* Library (srfi :14):                    srfi char-sets.      (line   6)
* Library (srfi :16 case-lambda):        srfi case-lambda.    (line   6)
* Library (srfi :16):                    srfi case-lambda.    (line   6)
* Library (srfi :19 time):               srfi time.           (line   6)
* Library (srfi :19):                    srfi time.           (line   6)
* Library (srfi :2 and-let*):            srfi and-let-star.   (line   6)
* Library (srfi :2):                     srfi and-let-star.   (line   6)
* Library (srfi :23 error):              srfi error-reporting.
                                                              (line   6)
* Library (srfi :23):                    srfi error-reporting.
                                                              (line   6)
* Library (srfi :25 multi-dimensional-arrays): srfi marray.   (line   6)
* Library (srfi :25):                    srfi marray.         (line   6)
* Library (srfi :26 cut):                srfi specialize-procedures.
                                                              (line   6)
* Library (srfi :26):                    srfi specialize-procedures.
                                                              (line   6)
* Library (srfi :27 random-bits):        srfi random.         (line   6)
* Library (srfi :27):                    srfi random.         (line   6)
* Library (srfi :28 basic-format-strings): srfi basic-format. (line   6)
* Library (srfi :28):                    srfi basic-format.   (line   6)
* Library (srfi :31 rec):                srfi rec.            (line   6)
* Library (srfi :31):                    srfi rec.            (line   6)
* Library (srfi :37 args-fold):          srfi args-fold.      (line   6)
* Library (srfi :37):                    srfi args-fold.      (line   6)
* Library (srfi :38 with-shared-structure): srfi shared structures.
                                                              (line   6)
* Library (srfi :38):                    srfi shared structures.
                                                              (line   6)
* Library (srfi :39 parameters):         srfi parameters.     (line   6)
* Library (srfi :39):                    srfi parameters.     (line   6)
* Library (srfi :41 streams):            srfi streams.        (line   6)
* Library (srfi :41):                    srfi streams.        (line   6)
* Library (srfi :42 eager-comprehensions): srfi eager-comp.   (line   6)
* Library (srfi :42):                    srfi eager-comp.     (line   6)
* Library (srfi :45 lazy):               srfi lazy.           (line   6)
* Library (srfi :45):                    srfi lazy.           (line   6)
* Library (srfi :48 intermediate-format-string): srfi intermediate-format.
                                                              (line   6)
* Library (srfi :48):                    srfi intermediate-format.
                                                              (line   6)
* Library (srfi :6 basic-string-ports):  srfi string-ports.   (line   6)
* Library (srfi :6):                     srfi string-ports.   (line   6)
* Library (srfi :64 testing):            srfi testing.        (line   6)
* Library (srfi :64):                    srfi testing.        (line   6)
* Library (srfi :67 compare-procedures): srfi compare-procedures.
                                                              (line   6)
* Library (srfi :67):                    srfi compare-procedures.
                                                              (line   6)
* Library (srfi :69 basic-hash-tables):  srfi hash-tables.    (line   6)
* Library (srfi :69):                    srfi hash-tables.    (line   6)
* Library (srfi :78 lightweight-testing): srfi lightweight-testing.
                                                              (line   6)
* Library (srfi :78):                    srfi lightweight-testing.
                                                              (line   6)
* Library (srfi :8 receive):             srfi receive.        (line   6)
* Library (srfi :8):                     srfi receive.        (line   6)
* Library (srfi :9 records):             srfi records.        (line   6)
* Library (srfi :9):                     srfi records.        (line   6)
* Library (srfi :98 args-fold):          srfi environment-variables.
                                                              (line   6)
* Library (srfi :98):                    srfi environment-variables.
                                                              (line   6)
* Library (srfi :99 records inspection): srfi err5rs records. (line   6)
* Library (srfi :99 records procedural): srfi err5rs records. (line   6)
* Library (srfi :99 records syntactic):  srfi err5rs records. (line   6)
* Library (srfi :99 records):            srfi err5rs records. (line   6)
* Library (srfi :99):                    srfi err5rs records. (line   6)
* Library (vicare arguments general-c-buffers): cbuffers api. (line   6)
* Library (vicare arguments validation): args.                (line   6)
* Library (vicare checks):               checks.              (line   6)
* Library (vicare containers arrays):    arrays.              (line   6)
* Library (vicare containers binary-search-trees): bst.       (line   6)
* Library (vicare containers bitvectors): bitvectors.         (line   6)
* Library (vicare containers bytevector-compounds): bytevector compounds.
                                                              (line   6)
* Library (vicare containers bytevectors s8): bytevectors 8.  (line   6)
* Library (vicare containers bytevectors s8low): bytevectors 8.
                                                              (line   6)
* Library (vicare containers bytevectors u8): bytevectors 8.  (line   6)
* Library (vicare containers bytevectors u8low): bytevectors 8.
                                                              (line   6)
* Library (vicare containers bytevectors): bytevectors utils. (line   6)
* Library (vicare containers chains sort): chains.            (line   6)
* Library (vicare containers chains):    chains.              (line   6)
* Library (vicare containers char-sets): char-sets.           (line   6)
* Library (vicare containers comparators): comparators.       (line   6)
* Library (vicare containers deques):    deques.              (line   6)
* Library (vicare containers dynamic-arrays sort): dynamic arrays.
                                                              (line   6)
* Library (vicare containers dynamic-arrays): dynamic arrays. (line   6)
* Library (vicare containers ideques chains): ideques chains. (line   6)
* Library (vicare containers ideques deques): ideques deques. (line   6)
* Library (vicare containers ideques dynamic-arrays): ideques dynamic arrays.
                                                              (line   6)
* Library (vicare containers ideques):   ideques.             (line   6)
* Library (vicare containers ilists comparators): ilists.     (line   6)
* Library (vicare containers ilists quotations): ilists.      (line   6)
* Library (vicare containers ilists):    ilists.              (line   6)
* Library (vicare containers iqueues chains): iqueues chains. (line   6)
* Library (vicare containers iqueues deques): iqueues deques. (line   6)
* Library (vicare containers iqueues dynamic-arrays): iqueues dynamic arrays.
                                                              (line   6)
* Library (vicare containers iqueues queues): iqueues queues. (line   6)
* Library (vicare containers iqueues):   iqueues.             (line   6)
* Library (vicare containers istacks chains): istacks chains. (line   6)
* Library (vicare containers istacks deques): istacks deques. (line   6)
* Library (vicare containers istacks dynamic-arrays): istacks dynamic arrays.
                                                              (line   6)
* Library (vicare containers istacks ilists): istacks ilists. (line   6)
* Library (vicare containers istacks lists): istacks lists.   (line   6)
* Library (vicare containers istacks ralists): istacks ralists.
                                                              (line   6)
* Library (vicare containers istacks stacks): istacks stacks. (line   6)
* Library (vicare containers istacks):   istacks.             (line   6)
* Library (vicare containers iteration-thunks): iteration thunks.
                                                              (line   6)
* Library (vicare containers knuth-morris-pratt): kmp.        (line   6)
* Library (vicare containers levenshtein): levenshtein.       (line   6)
* Library (vicare containers lists low): lists.               (line   6)
* Library (vicare containers lists stx): lists.               (line   6)
* Library (vicare containers lists):     lists.               (line   6)
* Library (vicare containers object-properties): object-properties.
                                                              (line   6)
* Library (vicare containers one-dimension-cc): one-dimension.
                                                              (line   6)
* Library (vicare containers one-dimension-co): one-dimension.
                                                              (line   6)
* Library (vicare containers queues):    queues.              (line   6)
* Library (vicare containers ralists):   ralists.             (line   6)
* Library (vicare containers sets-and-bags): sets bags.       (line   6)
* Library (vicare containers stacks):    stacks.              (line   6)
* Library (vicare containers strings low): strings.           (line   6)
* Library (vicare containers strings rabin-karp): strings rabin-karp.
                                                              (line   6)
* Library (vicare containers strings):   strings.             (line   6)
* Library (vicare containers vectors low): vectors.           (line   6)
* Library (vicare containers vectors):   vectors.             (line   6)
* Library (vicare containers weak-hashtables): wtables.       (line   6)
* Library (vicare containers-binary heaps): binary heaps.     (line   6)
* Library (vicare crypto randomisations blum-blum-shub): random generators bbs.
                                                              (line   6)
* Library (vicare crypto randomisations borosh): random generators borosh.
                                                              (line   6)
* Library (vicare crypto randomisations cmrg): random generators cmrg.
                                                              (line   6)
* Library (vicare crypto randomisations distributions): random dist.
                                                              (line   6)
* Library (vicare crypto randomisations lists): random utils lists.
                                                              (line   6)
* Library (vicare crypto randomisations marsaglia): random generators marsaglia.
                                                              (line   6)
* Library (vicare crypto randomisations mersenne): random generators mersenne.
                                                              (line   6)
* Library (vicare crypto randomisations strings): random utils strings.
                                                              (line   6)
* Library (vicare crypto randomisations vectors): random utils vectors.
                                                              (line   6)
* Library (vicare crypto randomisations): random.             (line   6)
* Library (vicare debugging compiler):   debugging compiler.  (line   6)
* Library (vicare formations):           formations.          (line   6)
* Library (vicare gcc):                  gcc.                 (line   6)
* Library (vicare getopts):              getopts.             (line   6)
* Library (vicare irregex):              irregex.             (line   6)
* Library (vicare language-extensions amb): amb.              (line   6)
* Library (vicare language-extensions ascii-chars): asciis.   (line   6)
* Library (vicare language-extensions c-enumerations): c-enums.
                                                              (line   6)
* Library (vicare language-extensions callables): callables.  (line   6)
* Library (vicare language-extensions comparisons): comparisons.
                                                              (line   6)
* Library (vicare language-extensions cond-expand helpers): cond-expand.
                                                              (line   6)
* Library (vicare language-extensions cond-expand): cond-expand.
                                                              (line   6)
* Library (vicare language-extensions conditions-and-restarts): restarts.
                                                              (line   6)
* Library (vicare language-extensions custom-ports): custom-ports.
                                                              (line   6)
* Library (vicare language-extensions hooks): hooks.          (line   6)
* Library (vicare language-extensions include): include.      (line   6)
* Library (vicare language-extensions instantiable-bodies): ibodies.
                                                              (line   6)
* Library (vicare language-extensions keywords): keywords.    (line   6)
* Library (vicare language-extensions loops): loops.          (line   6)
* Library (vicare language-extensions makers): makers.        (line   6)
* Library (vicare language-extensions multimethods): multimethods.
                                                              (line   6)
* Library (vicare language-extensions pipelines): pipelines.  (line   6)
* Library (vicare language-extensions simple-match): simple-match.
                                                              (line   6)
* Library (vicare language-extensions streams): streams.      (line   6)
* Library (vicare language-extensions syntaxes): syntaxes.    (line   6)
* Library (vicare language-extensions tracing-syntaxes): tracing.
                                                              (line   6)
* Library (vicare language-extensions tuples): tuples.        (line   6)
* Library (vicare language-extensions variables): variables.  (line   6)
* Library (vicare net channels):         net channels.        (line   6)
* Library (vicare numerics flonum-formatter): flonum format.  (line   6)
* Library (vicare numerics flonum-parser): flonum parser.     (line   6)
* Library (vicare parser-logic):         parser logic.        (line   6)
* Library (vicare parser-tools silex lexer): silex.           (line   6)
* Library (vicare parser-tools silex utilities): silex utilities.
                                                              (line   6)
* Library (vicare parser-tools silex):   silex.               (line   6)
* Library (vicare parser-tools unix-pathnames): parser-tools unix-pathnames.
                                                              (line   6)
* Library (vicare platform constants):   platform constants.  (line   6)
* Library (vicare platform errno):       errno.               (line   6)
* Library (vicare platform features):    platform features.   (line   6)
* Library (vicare platform utilities):   platform utilities.  (line   6)
* Library (vicare platform words):       words.               (line   6)
* Library (vicare posix curl):           posix curl.          (line   6)
* Library (vicare posix daemonisations): posix daemonisations.
                                                              (line   6)
* Library (vicare posix find):           posix find.          (line   6)
* Library (vicare posix lock-pid-files): posix lock-pid-files.
                                                              (line   6)
* Library (vicare posix log-files):      posix log-files.     (line   6)
* Library (vicare posix mailx):          posix mailx.         (line   6)
* Library (vicare posix pid-files):      posix pid-files.     (line   6)
* Library (vicare posix sendmail):       posix sendmail.      (line   6)
* Library (vicare posix simple-event-loop): posix sel.        (line   6)
* Library (vicare posix tcp-server-sockets): posix tcp-server-sockets.
                                                              (line   6)
* Library (vicare posix wget):           posix wget.          (line   6)
* Library (vicare pregexp):              pregexp.             (line   6)
* Library (vicare readline):             readline.            (line   6)
* LINK argument:                         chains objects.      (line  16)
* linux-enabled, cond-expand clause:     srfi cond-expand vicare.
                                                              (line  49)
* List appending:                        srfi list spec misc. (line   6)
* List appending <1>:                    lists misc.          (line   6)
* List constructors:                     srfi list spec cons. (line   6)
* List constructors <1>:                 lists cons.          (line   6)
* List contatenation:                    srfi list spec misc. (line   6)
* List contatenation <1>:                lists misc.          (line   6)
* List counting:                         srfi list spec misc. (line   6)
* List counting <1>:                     lists misc.          (line   6)
* List deletion:                         srfi list spec delete.
                                                              (line   6)
* List deletion <1>:                     lists delete.        (line   6)
* List filtering:                        srfi list spec filter.
                                                              (line   6)
* List filtering <1>:                    lists filter.        (line   6)
* List fold, unfold and map:             srfi list spec fold. (line   6)
* List fold, unfold and map <1>:         lists fold.          (line   6)
* List length:                           srfi list spec misc. (line   6)
* List length <1>:                       lists misc.          (line   6)
* List library interface:                srfi list spec.      (line   6)
* List predicates:                       srfi list spec pred. (line   6)
* List reversing:                        srfi list spec misc. (line   6)
* List reversing <1>:                    lists misc.          (line   6)
* List searching:                        srfi list spec search.
                                                              (line   6)
* List searching <1>:                    lists search.        (line   6)
* List selectors:                        srfi list spec select.
                                                              (line   6)
* List selectors <1>:                    lists select.        (line   6)
* List set operations:                   srfi list spec set.  (line   6)
* List set operations <1>:               lists set.           (line   6)
* List side effects:                     srfi list spec side. (line   6)
* List zip:                              srfi list spec misc. (line   6)
* List zip <1>:                          lists misc.          (line   6)
* List, association lists:               srfi list spec alist.
                                                              (line   6)
* List, association lists <1>:           lists alist.         (line   6)
* Lock PID files creation:               posix lock-pid-files.
                                                              (line   6)
* Log files:                             posix log-files.     (line   6)
* Logging facilities:                    posix log-files.     (line   6)
* mailx, sending email:                  posix mailx.         (line   6)
* Making directories:                    posix dir.           (line   7)
* Opening a directory stream:            posix dir.           (line  77)
* Parameter amb-random-fixnum-maker:     amb api random.      (line  30)
* Parameter CFLAGS:                      gcc.                 (line  77)
* Parameter COMPILE-FLAGS:               gcc.                 (line  69)
* Parameter file-existence-procedure:    posix pid-files config.
                                                              (line  16)
* Parameter file-removal-procedure:      posix pid-files config.
                                                              (line  39)
* Parameter format-output-column:        formations output.   (line  74)
* Parameter LDFLAGS:                     gcc.                 (line  81)
* Parameter LINK-FLAGS:                  gcc.                 (line  73)
* Parameter log-pathname:                posix log-files config.
                                                              (line  28)
* Parameter log-port:                    posix log-files config.
                                                              (line  14)
* Parameter log-prefix:                  posix log-files config.
                                                              (line  22)
* Parameter log-procedure:               posix sel.           (line  26)
* Parameter log-procedure <1>:           posix pid-files config.
                                                              (line  43)
* Parameter logging-enabled?:            posix log-files config.
                                                              (line  10)
* Parameter object-property-default-value: object-properties. (line  35)
* Parameter object-property-initial-capacity: object-properties.
                                                              (line  31)
* Parameter pid-pathname:                posix pid-files config.
                                                              (line  10)
* Parameter random-device-cache-length:  random device.       (line  31)
* Parameter random-source-maker:         random source.       (line   7)
* Parameter tcp-connect.connect-proc:    posix socket socket. (line 283)
* Parameter textual-contents-reading-procedure: posix pid-files config.
                                                              (line  20)
* Parameter textual-contents-writing-procedure: posix pid-files config.
                                                              (line  31)
* Per-process timers:                    posix timers.        (line   6)
* PID and lock files creation:           posix lock-pid-files.
                                                              (line   6)
* PID files creation:                    posix pid-files.     (line   6)
* POSIX per-process timers:              posix timers.        (line   6)
* POSIX timers:                          posix timers.        (line   6)
* posix-enabled, cond-expand clause:     srfi cond-expand vicare.
                                                              (line  39)
* pregexp-comment-char:                  pregexp syntax clusters.
                                                              (line 127)
* Process working directory:             posix dir.           (line  26)
* Process, forking:                      posix process fork fork.
                                                              (line   6)
* Processes, executing:                  posix process exec.  (line  15)
* Processes, forking:                    posix process fork fork.
                                                              (line   8)
* Programs, finding:                     posix process exec.  (line  88)
* QUEUE argument:                        queues objects.      (line  14)
* Reading a directory stream:            posix dir.           (line  91)
* Removing directories:                  posix dir.           (line  19)
* Rewinding a directory stream:          posix dir.           (line 112)
* Scanning the file system with find:    posix find.          (line   6)
* Searching in lists:                    srfi list spec search.
                                                              (line   6)
* Searching in lists <1>:                lists search.        (line   6)
* Seeking a directory stream:            posix dir.           (line 125)
* Sending email with mailx:              posix mailx.         (line   6)
* Sending email with sendmail:           posix sendmail.      (line   6)
* sendmail, sending email:               posix sendmail.      (line   6)
* Server sockets, TCP.:                  posix tcp-server-sockets.
                                                              (line   6)
* Set operations on lists:               srfi list spec set.  (line   6)
* Set operations on lists <1>:           lists set.           (line   6)
* Side effects on lists:                 srfi list spec side. (line   6)
* Signals, block/unblock API:            posix signal.        (line  24)
* SILEX_PATH, environment variable:      silex syntax includes.
                                                              (line  22)
* Sockets, TCP servers.:                 posix tcp-server-sockets.
                                                              (line   6)
* SRFI let-values API:                   srfi let-values spec.
                                                              (line   6)
* SRFI receive api:                      srfi receive spec.   (line   6)
* SRFI record API:                       srfi records spec.   (line   6)
* SRFI streams abstract:                 srfi streams abstract.
                                                              (line   6)
* SRFI streams derived library:          srfi streams derived.
                                                              (line   6)
* SRFI streams examples:                 streams examples.    (line   6)
* SRFI streams examples <1>:             srfi streams examples.
                                                              (line   6)
* SRFI streams primitive library:        srfi streams primitive.
                                                              (line   6)
* SRFI streams rationale:                srfi streams rationale.
                                                              (line   6)
* SRFI streams utilities:                streams utilities.   (line   6)
* SRFI streams utilities <1>:            srfi streams utilities.
                                                              (line   6)
* SRFI string-ports api:                 srfi string-ports spec.
                                                              (line   6)
* SRFI-0 feature based conditional expansion construct: srfi cond-expand.
                                                              (line   6)
* SRFI-1 list library:                   srfi list.           (line   6)
* SRFI-101 purely functional random-access pairs and lists: srfi ralists.
                                                              (line   6)
* SRFI-106 basic socket interface:       srfi basic-socket.   (line   6)
* SRFI-11 syntax for receiving multiple values: srfi let-values.
                                                              (line   6)
* SRFI-111 boxes:                        srfi boxes.          (line   6)
* SRFI-112 environment inquiry:          srfi env-inquiry.    (line   6)
* SRFI-113 sets-and-bags:                srfi sets-and-bags.  (line   6)
* SRFI-114 comparators:                  srfi comparators.    (line   6)
* SRFI-115 feature based conditional expansion construct: srfi regexps.
                                                              (line   6)
* SRFI-116 feature based conditional expansion construct: srfi ilists.
                                                              (line   6)
* SRFI-13 string library:                srfi strings.        (line   6)
* SRFI-14 character sets:                srfi char-sets.      (line   6)
* SRFI-16 case-lambda:                   srfi case-lambda.    (line   6)
* SRFI-19 time data types and procedures: srfi time.          (line   6)
* SRFI-2 and-let-star:                   srfi and-let-star.   (line   6)
* SRFI-23 error reporting mechanism:     srfi error-reporting.
                                                              (line   6)
* SRFI-25 multi-dimensional array primitives: srfi marray.    (line   6)
* SRFI-26 notation for specializing parameters without currying: srfi specialize-procedures.
                                                              (line   6)
* SRFI-27 sources of random bits:        srfi random.         (line   6)
* SRFI-28 basic format strings:          srfi basic-format.   (line   6)
* SRFI-31 a special form rec for recursive evaluation: srfi rec.
                                                              (line   6)
* SRFI-37 args-fold:                     srfi args-fold.      (line   6)
* SRFI-38 representation for data with shared structure: srfi shared structures.
                                                              (line   6)
* SRFI-39 parameters:                    srfi parameters.     (line   6)
* SRFI-41 streams:                       srfi streams.        (line   6)
* SRFI-42 eager comprehensions:          srfi eager-comp.     (line   6)
* SRFI-43 vector library:                srfi vectors.        (line   6)
* SRFI-45 lazy iterative algorithms:     srfi lazy.           (line   6)
* SRFI-48 intermediate format strings:   srfi intermediate-format.
                                                              (line   6)
* SRFI-6 basic string ports:             srfi string-ports.   (line   6)
* SRFI-61 a more general cond clause:    srfi general-cond.   (line   6)
* SRFI-64 testing:                       srfi testing.        (line   6)
* SRFI-67 compare procedures:            srfi compare-procedures.
                                                              (line   6)
* SRFI-69 basic hash tables:             srfi hash-tables.    (line   6)
* SRFI-78 lightweight testing:           srfi lightweight-testing.
                                                              (line   6)
* SRFI-8 receive: binding to multiple values: srfi receive.   (line   6)
* SRFI-9 defining record types:          srfi records.        (line   6)
* SRFI-98 environment variables:         srfi environment-variables.
                                                              (line   6)
* SRFI-99 ERR5RS records:                srfi err5rs records. (line   6)
* srfi-enabled, cond-expand clause:      srfi cond-expand vicare.
                                                              (line  26)
* STACK argument:                        stacks objects.      (line  14)
* Subprocess, forking:                   posix process fork fork.
                                                              (line   6)
* TCP server sockets:                    posix tcp-server-sockets.
                                                              (line   6)
* Timer, POSIX per-process timers:       posix timers.        (line   6)
* Turn a process into a daemon:          posix daemonisations.
                                                              (line   6)
* UNODE argument:                        bst unodes objects.  (line  10)
* URL, downloading with curl:            posix curl.          (line   6)
* URL, downloading with wget:            posix wget.          (line   6)
* VICARE_ARGUMENTS_VALIDATION environment variable: args config.
                                                              (line   6)
* VICARE_CHECK_QUIET:                    checks output.       (line   7)
* wget, downloading files:               posix wget.          (line   6)


File: vicare-libs.info,  Node: function index,  Next: variable index,  Prev: concept index,  Up: Top

Appendix C An entry for each function
*************************************

 [index ]
* Menu:

* $ascii-alpha-digit?:                   asciis generic.      (line  55)
* $ascii-alphabetic?:                    asciis generic.      (line  40)
* $ascii-cased?:                         asciis generic.      (line  35)
* $ascii-chi-ampersand?:                 asciis predicates.   (line  20)
* $ascii-chi-at-sign?:                   asciis predicates.   (line  24)
* $ascii-chi-bang?:                      asciis predicates.   (line  60)
* $ascii-chi-close-bracket?:             asciis predicates.   (line  32)
* $ascii-chi-close-paren?:               asciis predicates.   (line  40)
* $ascii-chi-colon?:                     asciis predicates.   (line  52)
* $ascii-chi-comma?:                     asciis predicates.   (line  48)
* $ascii-chi-dash?:                      asciis predicates.   (line  89)
* $ascii-chi-dollar?:                    asciis predicates.   (line  64)
* $ascii-chi-dot?:                       asciis predicates.   (line  44)
* $ascii-chi-equal?:                     asciis predicates.   (line  80)
* $ascii-chi-minus?:                     asciis predicates.   (line  88)
* $ascii-chi-number-sign?:               asciis predicates.   (line  72)
* $ascii-chi-open-bracket?:              asciis predicates.   (line  28)
* $ascii-chi-open-paren?:                asciis predicates.   (line  36)
* $ascii-chi-percent?:                   asciis predicates.   (line  76)
* $ascii-chi-plus?:                      asciis predicates.   (line  84)
* $ascii-chi-question-mark?:             asciis predicates.   (line  68)
* $ascii-chi-quote?:                     asciis predicates.   (line 101)
* $ascii-chi-semicolon?:                 asciis predicates.   (line  56)
* $ascii-chi-slash?:                     asciis predicates.   (line 105)
* $ascii-chi-star?:                      asciis predicates.   (line 109)
* $ascii-chi-tilde?:                     asciis predicates.   (line  97)
* $ascii-chi-underscore?:                asciis predicates.   (line  93)
* $ascii-chi-V?:                         asciis predicates.   (line  12)
* $ascii-chi-v?:                         asciis predicates.   (line  16)
* $ascii-dec->fixnum:                    asciis conversion.   (line  13)
* $ascii-dec-digit?:                     asciis generic.      (line  45)
* $ascii-downcase:                       asciis generic.      (line  63)
* $ascii-hex->fixnum:                    asciis conversion.   (line  29)
* $ascii-hex-digit?:                     asciis generic.      (line  50)
* $ascii-lower-case?:                    asciis generic.      (line  29)
* $ascii-title-case?:                    asciis generic.      (line  30)
* $ascii-titlecase:                      asciis generic.      (line  64)
* $ascii-upcase:                         asciis generic.      (line  62)
* $ascii-upper-case?:                    asciis generic.      (line  28)
* $ascii-uri-gen-delim?:                 asciis uri.          (line  20)
* $ascii-uri-pchar-not-percent-encoded?: asciis uri.          (line  82)
* $ascii-uri-pchar?:                     asciis uri.          (line  87)
* $ascii-uri-pct-encoded?:               asciis uri.          (line  28)
* $ascii-uri-reserved?:                  asciis uri.          (line  12)
* $ascii-uri-sub-delim?:                 asciis uri.          (line  24)
* $ascii-uri-unreserved?:                asciis uri.          (line  16)
* $binary-heap-blend!:                   binary heaps misc.   (line  43)
* $binary-heap-copy:                     binary heaps misc.   (line  12)
* $binary-heap-empty?:                   binary heaps inspection.
                                                              (line  12)
* $binary-heap-fill!:                    binary heaps access. (line  26)
* $binary-heap-fold!:                    binary heaps misc.   (line  18)
* $binary-heap-getprop:                  binary heaps objects.
                                                              (line  39)
* $binary-heap-hash:                     binary heaps objects.
                                                              (line  58)
* $binary-heap-merge:                    binary heaps misc.   (line  36)
* $binary-heap-not-empty?:               binary heaps inspection.
                                                              (line  16)
* $binary-heap-pop!:                     binary heaps access. (line  21)
* $binary-heap-property-list:            binary heaps objects.
                                                              (line  49)
* $binary-heap-purge!:                   binary heaps access. (line  30)
* $binary-heap-push!:                    binary heaps access. (line  17)
* $binary-heap-putprop:                  binary heaps objects.
                                                              (line  33)
* $binary-heap-remprop:                  binary heaps objects.
                                                              (line  44)
* $binary-heap-size?:                    binary heaps inspection.
                                                              (line  20)
* $binary-heap-sort-to-list!:            binary heaps sorting.
                                                              (line  12)
* $binary-heap-top:                      binary heaps access. (line  12)
* $binary-node-depth:                    bst bnodes inspect.  (line  12)
* $binary-node-leaf?:                    bst bnodes pred.     (line  32)
* $binary-node-left:                     bst bnodes access.   (line  17)
* $binary-node-left-set!:                bst bnodes access.   (line  22)
* $binary-node-parent:                   bst bnodes access.   (line  12)
* $binary-node-parent-and-child?:        bst bnodes pred.     (line  22)
* $binary-node-parent-and-left-child?:   bst bnodes pred.     (line  12)
* $binary-node-parent-and-right-child?:  bst bnodes pred.     (line  17)
* $binary-node-replace-in-parent!:       bst bnodes access.   (line  41)
* $binary-node-right:                    bst bnodes access.   (line  29)
* $binary-node-right-set!:               bst bnodes access.   (line  34)
* $binary-node-root?:                    bst bnodes pred.     (line  27)
* $binary-tree-begin-breadth-first-backwards: bst bnodes iterating breadth-first.
                                                              (line  74)
* $binary-tree-begin-breadth-first-forwards: bst bnodes iterating breadth-first.
                                                              (line  39)
* $binary-tree-begin-in-order-backwards: bst bnodes iterating in-order.
                                                              (line  91)
* $binary-tree-begin-in-order-forwards:  bst bnodes iterating in-order.
                                                              (line  66)
* $binary-tree-begin-level-order-backwards: bst bnodes iterating level-order.
                                                              (line  66)
* $binary-tree-begin-level-order-forwards: bst bnodes iterating level-order.
                                                              (line  41)
* $binary-tree-begin-post-order-backwards: bst bnodes iterating post-order.
                                                              (line  61)
* $binary-tree-begin-post-order-forwards: bst bnodes iterating post-order.
                                                              (line  36)
* $binary-tree-begin-pre-order-backwards: bst bnodes iterating pre-order.
                                                              (line  64)
* $binary-tree-begin-pre-order-forwards: bst bnodes iterating pre-order.
                                                              (line  39)
* $binary-tree-deepest-left-leaf:        bst bnodes searching.
                                                              (line  79)
* $binary-tree-deepest-right-leaf:       bst bnodes searching.
                                                              (line  96)
* $binary-tree-find:                     bst bnodes searching.
                                                              (line  51)
* $binary-tree-fold-breadth-first-backwards: bst bnodes iterating breadth-first.
                                                              (line  67)
* $binary-tree-fold-breadth-first-forwards: bst bnodes iterating breadth-first.
                                                              (line  32)
* $binary-tree-fold-in-order-backwards:  bst bnodes iterating in-order.
                                                              (line  84)
* $binary-tree-fold-in-order-forwards:   bst bnodes iterating in-order.
                                                              (line  59)
* $binary-tree-fold-level-order-backwards: bst bnodes iterating level-order.
                                                              (line  59)
* $binary-tree-fold-level-order-forwards: bst bnodes iterating level-order.
                                                              (line  34)
* $binary-tree-fold-post-order-backwards: bst bnodes iterating post-order.
                                                              (line  54)
* $binary-tree-fold-post-order-forwards: bst bnodes iterating post-order.
                                                              (line  29)
* $binary-tree-fold-pre-order-backwards: bst bnodes iterating pre-order.
                                                              (line  57)
* $binary-tree-fold-pre-order-forwards:  bst bnodes iterating pre-order.
                                                              (line  32)
* $binary-tree-maximum:                  bst bnodes searching.
                                                              (line  37)
* $binary-tree-minimum:                  bst bnodes searching.
                                                              (line  23)
* $binary-tree-root:                     bst bnodes searching.
                                                              (line  12)
* $binary-tree-step-breadth-first-backwards: bst bnodes iterating breadth-first.
                                                              (line  87)
* $binary-tree-step-breadth-first-forwards: bst bnodes iterating breadth-first.
                                                              (line  52)
* $binary-tree-step-in-order-backwards:  bst bnodes iterating in-order.
                                                              (line  99)
* $binary-tree-step-in-order-forwards:   bst bnodes iterating in-order.
                                                              (line  74)
* $binary-tree-step-level-order-backwards: bst bnodes iterating level-order.
                                                              (line  74)
* $binary-tree-step-level-order-forwards: bst bnodes iterating level-order.
                                                              (line  49)
* $binary-tree-step-post-order-backwards: bst bnodes iterating post-order.
                                                              (line  69)
* $binary-tree-step-post-order-forwards: bst bnodes iterating post-order.
                                                              (line  44)
* $binary-tree-step-pre-order-backwards: bst bnodes iterating pre-order.
                                                              (line  72)
* $binary-tree-step-pre-order-forwards:  bst bnodes iterating pre-order.
                                                              (line  47)
* $binary-tree-valid?:                   bst bnodes validating.
                                                              (line  12)
* $bytevector-absolute?:                 parser-tools unix-pathnames preds.
                                                              (line  43)
* $bytevector-append:                    parser-tools unix-pathnames comp.
                                                              (line 389)
* $bytevector-dirname:                   parser-tools unix-pathnames comp.
                                                              (line  71)
* $bytevector-extension:                 parser-tools unix-pathnames comp.
                                                              (line  17)
* $bytevector-normalise:                 parser-tools unix-pathnames comp.
                                                              (line 285)
* $bytevector-pathname?:                 parser-tools unix-pathnames preds.
                                                              (line  11)
* $bytevector-prefix?:                   parser-tools unix-pathnames comp.
                                                              (line 317)
* $bytevector-prepend:                   parser-tools unix-pathnames comp.
                                                              (line 367)
* $bytevector-relative?:                 parser-tools unix-pathnames preds.
                                                              (line  55)
* $bytevector-replace-extension:         parser-tools unix-pathnames comp.
                                                              (line 411)
* $bytevector-rootname:                  parser-tools unix-pathnames comp.
                                                              (line 163)
* $bytevector-segment?:                  parser-tools unix-pathnames preds.
                                                              (line  25)
* $bytevector-split:                     parser-tools unix-pathnames comp.
                                                              (line 245)
* $bytevector-strip-trailing-slashes:    parser-tools unix-pathnames comp.
                                                              (line 222)
* $bytevector-suffix?:                   parser-tools unix-pathnames comp.
                                                              (line 342)
* $bytevector-tailname:                  parser-tools unix-pathnames comp.
                                                              (line 118)
* $bytevector-uri-representation:        parser-tools unix-pathnames comp.
                                                              (line 450)
* $callable-object:                      callables.           (line  31)
* $chain->list:                          chains conversion.   (line  12)
* $chain->vector:                        chains conversion.   (line  18)
* $chain-append-forwards:                chains ops.          (line  24)
* $chain-backwards-length?:              chains inspection.   (line  24)
* $chain-copy-forwards:                  chains ops.          (line  12)
* $chain-exists-forwards:                chains searching.    (line  23)
* $chain-find-forwards:                  chains searching.    (line  36)
* $chain-fold-left-backwards:            chains folding.      (line  55)
* $chain-fold-left-forwards:             chains folding.      (line  12)
* $chain-fold-right-backwards:           chains folding.      (line  76)
* $chain-fold-right-forwards:            chains folding.      (line  33)
* $chain-for-all-forwards:               chains searching.    (line  12)
* $chain-for-each-forwards:              chains mapping.      (line  20)
* $chain-forwards-length?:               chains inspection.   (line  18)
* $chain-front:                          chains access.       (line  36)
* $chain-index-backwards!:               chains access.       (line 104)
* $chain-index-forwards!:                chains access.       (line  90)
* $chain-length?:                        chains inspection.   (line  12)
* $chain-link-getprop:                   chains objects.      (line  56)
* $chain-link-hash:                      chains objects.      (line  75)
* $chain-link-next:                      chains access.       (line  12)
* $chain-link-next-set!:                 chains access.       (line  22)
* $chain-link-prev:                      chains access.       (line  17)
* $chain-link-prev-set!:                 chains access.       (line  29)
* $chain-link-property-list:             chains objects.      (line  66)
* $chain-link-putprop:                   chains objects.      (line  50)
* $chain-link-ref:                       chains objects.      (line  39)
* $chain-link-remove!:                   chains access.       (line  74)
* $chain-link-remprop:                   chains objects.      (line  61)
* $chain-link-set!:                      chains objects.      (line  43)
* $chain-map-forwards:                   chains mapping.      (line  12)
* $chain-pop-front!:                     chains access.       (line  60)
* $chain-pop-rear!:                      chains access.       (line  67)
* $chain-push-front!:                    chains access.       (line  48)
* $chain-push-rear!:                     chains access.       (line  54)
* $chain-rear:                           chains access.       (line  42)
* $chain-reverse-forwards:               chains ops.          (line  18)
* $chain-sort-forwards:                  chains sort.         (line  12)
* $define-variable-alias:                variables.           (line  48)
* $deque->list:                          deques conversion.   (line  12)
* $deque->vector:                        deques conversion.   (line  26)
* $deque-copy!:                          deques misc.         (line  12)
* $deque-empty?:                         deques inspection.   (line  12)
* $deque-exists:                         deques searching.    (line  34)
* $deque-exists-left:                    deques searching.    (line  20)
* $deque-exists-right:                   deques searching.    (line  27)
* $deque-filter:                         deques filtering.    (line  12)
* $deque-find:                           deques searching.    (line  82)
* $deque-find-left:                      deques searching.    (line  39)
* $deque-find-right:                     deques searching.    (line  69)
* $deque-fold-left:                      deques folding.      (line  12)
* $deque-fold-right:                     deques folding.      (line  25)
* $deque-for-all:                        deques searching.    (line  12)
* $deque-for-each:                       deques mapping.      (line  52)
* $deque-for-each-left:                  deques mapping.      (line  42)
* $deque-for-each-right:                 deques mapping.      (line  47)
* $deque-front:                          deques access.       (line  12)
* $deque-getprop:                        deques objects.      (line  50)
* $deque-hash:                           deques objects.      (line  69)
* $deque-map:                            deques mapping.      (line  38)
* $deque-map-left:                       deques mapping.      (line  12)
* $deque-map-right:                      deques mapping.      (line  25)
* $deque-not-empty?:                     deques inspection.   (line  16)
* $deque-partition:                      deques filtering.    (line  21)
* $deque-pop-front!:                     deques access.       (line  30)
* $deque-pop-rear!:                      deques access.       (line  35)
* $deque-property-list:                  deques objects.      (line  60)
* $deque-purge!:                         deques access.       (line  40)
* $deque-push-front!:                    deques access.       (line  22)
* $deque-push-rear!:                     deques access.       (line  26)
* $deque-putprop:                        deques objects.      (line  44)
* $deque-rear:                           deques access.       (line  17)
* $deque-remprop:                        deques objects.      (line  55)
* $deque-reverse!:                       deques misc.         (line  23)
* $deque-size?:                          deques inspection.   (line  20)
* $dynamic-array->list:                  dynamic arrays conversion.
                                                              (line  12)
* $dynamic-array->vector:                dynamic arrays conversion.
                                                              (line  27)
* $dynamic-array-copy!:                  dynamic arrays misc. (line  12)
* $dynamic-array-empty?:                 dynamic arrays inspection.
                                                              (line  12)
* $dynamic-array-exists:                 dynamic arrays searching.
                                                              (line  35)
* $dynamic-array-exists-left:            dynamic arrays searching.
                                                              (line  21)
* $dynamic-array-exists-right:           dynamic arrays searching.
                                                              (line  28)
* $dynamic-array-filter:                 dynamic arrays filtering.
                                                              (line  12)
* $dynamic-array-find:                   dynamic arrays searching.
                                                              (line  84)
* $dynamic-array-find-left:              dynamic arrays searching.
                                                              (line  41)
* $dynamic-array-find-right:             dynamic arrays searching.
                                                              (line  71)
* $dynamic-array-fold-left:              dynamic arrays folding.
                                                              (line  12)
* $dynamic-array-fold-right:             dynamic arrays folding.
                                                              (line  26)
* $dynamic-array-for-all:                dynamic arrays searching.
                                                              (line  12)
* $dynamic-array-for-each:               dynamic arrays mapping.
                                                              (line  58)
* $dynamic-array-for-each-left:          dynamic arrays mapping.
                                                              (line  48)
* $dynamic-array-for-each-right:         dynamic arrays mapping.
                                                              (line  53)
* $dynamic-array-front:                  dynamic arrays access.
                                                              (line  58)
* $dynamic-array-getprop:                dynamic arrays objects.
                                                              (line  65)
* $dynamic-array-hash:                   dynamic arrays objects.
                                                              (line  84)
* $dynamic-array-insert!:                dynamic arrays access.
                                                              (line  22)
* $dynamic-array-length:                 dynamic arrays inspection.
                                                              (line  20)
* $dynamic-array-map:                    dynamic arrays mapping.
                                                              (line  44)
* $dynamic-array-map-left:               dynamic arrays mapping.
                                                              (line  12)
* $dynamic-array-map-right:              dynamic arrays mapping.
                                                              (line  28)
* $dynamic-array-not-empty?:             dynamic arrays inspection.
                                                              (line  16)
* $dynamic-array-partition:              dynamic arrays filtering.
                                                              (line  22)
* $dynamic-array-pop-front!:             dynamic arrays access.
                                                              (line  76)
* $dynamic-array-pop-rear!:              dynamic arrays access.
                                                              (line  81)
* $dynamic-array-property-list:          dynamic arrays objects.
                                                              (line  75)
* $dynamic-array-purge!:                 dynamic arrays access.
                                                              (line  86)
* $dynamic-array-push-front!:            dynamic arrays access.
                                                              (line  68)
* $dynamic-array-push-rear!:             dynamic arrays access.
                                                              (line  72)
* $dynamic-array-putprop:                dynamic arrays objects.
                                                              (line  59)
* $dynamic-array-rear:                   dynamic arrays access.
                                                              (line  63)
* $dynamic-array-ref:                    dynamic arrays access.
                                                              (line  12)
* $dynamic-array-remove!:                dynamic arrays access.
                                                              (line  49)
* $dynamic-array-remprop:                dynamic arrays objects.
                                                              (line  70)
* $dynamic-array-reverse!:               dynamic arrays misc. (line  23)
* $dynamic-array-set!:                   dynamic arrays access.
                                                              (line  17)
* $dynamic-array-size:                   dynamic arrays inspection.
                                                              (line  25)
* $dynamic-array-sort:                   dynamic arrays sort. (line  12)
* $dynamic-array-sort!:                  dynamic arrays sort. (line  27)
* $fixnum->ascii-dec:                    asciis conversion.   (line  21)
* $fixnum->ascii-hex:                    asciis conversion.   (line  40)
* $fixnum-in-ascii-range?:               asciis generic.      (line  13)
* $fixnum-in-base10-range?:              asciis generic.      (line  18)
* $fixnum-in-base16-range?:              asciis generic.      (line  22)
* $iteration-thunk-exists:               iteration thunks searching.
                                                              (line  38)
* $iteration-thunk-filter:               iteration thunks filtering.
                                                              (line  11)
* $iteration-thunk-find:                 iteration thunks searching.
                                                              (line  66)
* $iteration-thunk-fold:                 iteration thunks folding.
                                                              (line  11)
* $iteration-thunk-for-all:              iteration thunks searching.
                                                              (line  11)
* $iteration-thunk-for-each:             iteration thunks mapping.
                                                              (line  38)
* $iteration-thunk-map:                  iteration thunks mapping.
                                                              (line  11)
* $iteration-thunk-partition:            iteration thunks filtering.
                                                              (line  36)
* $list->chain:                          chains conversion.   (line  14)
* $list->deque:                          deques conversion.   (line  14)
* $list->dynamic-array:                  dynamic arrays conversion.
                                                              (line  14)
* $list->position:                       arrays positions.    (line  33)
* $list->queue:                          queues conversion.   (line  14)
* $list->stack:                          stacks conversion.   (line  14)
* $make-position:                        arrays positions.    (line  23)
* $position:                             arrays positions.    (line  18)
* $position-copy:                        arrays positions.    (line  38)
* $position-dimension:                   arrays positions.    (line  60)
* $position-index?:                      arrays positions.    (line  48)
* $position-ref:                         arrays positions.    (line  65)
* $position-set!:                        arrays positions.    (line  69)
* $position=?:                           arrays positions.    (line  77)
* $queue->list:                          queues conversion.   (line  12)
* $queue->vector:                        queues conversion.   (line  26)
* $queue-copy!:                          queues misc.         (line  12)
* $queue-empty?:                         queues inspection.   (line  12)
* $queue-exists:                         queues searching.    (line  34)
* $queue-exists-left:                    queues searching.    (line  20)
* $queue-exists-right:                   queues searching.    (line  27)
* $queue-filter:                         queues filtering.    (line  12)
* $queue-find:                           queues searching.    (line  82)
* $queue-find-left:                      queues searching.    (line  39)
* $queue-find-right:                     queues searching.    (line  69)
* $queue-fold-left:                      queues folding.      (line  12)
* $queue-fold-right:                     queues folding.      (line  25)
* $queue-for-all:                        queues searching.    (line  12)
* $queue-for-each:                       queues mapping.      (line  52)
* $queue-for-each-left:                  queues mapping.      (line  42)
* $queue-for-each-right:                 queues mapping.      (line  47)
* $queue-front:                          queues access.       (line  12)
* $queue-getprop:                        queues objects.      (line  50)
* $queue-hash:                           queues objects.      (line  69)
* $queue-map:                            queues mapping.      (line  38)
* $queue-map-left:                       queues mapping.      (line  12)
* $queue-map-right:                      queues mapping.      (line  25)
* $queue-not-empty?:                     queues inspection.   (line  16)
* $queue-partition:                      queues filtering.    (line  21)
* $queue-pop!:                           queues access.       (line  26)
* $queue-property-list:                  queues objects.      (line  60)
* $queue-purge!:                         queues access.       (line  31)
* $queue-push!:                          queues access.       (line  22)
* $queue-putprop:                        queues objects.      (line  44)
* $queue-rear:                           queues access.       (line  17)
* $queue-remprop:                        queues objects.      (line  55)
* $queue-reverse!:                       queues misc.         (line  23)
* $queue-size?:                          queues inspection.   (line  20)
* $stack->list:                          stacks conversion.   (line  12)
* $stack->vector:                        stacks conversion.   (line  25)
* $stack-copy!:                          stacks misc.         (line  12)
* $stack-empty?:                         stacks inspection.   (line  12)
* $stack-exists:                         stacks searching.    (line  34)
* $stack-exists-left:                    stacks searching.    (line  20)
* $stack-exists-right:                   stacks searching.    (line  27)
* $stack-filter:                         stacks filtering.    (line  12)
* $stack-find:                           stacks searching.    (line  82)
* $stack-find-left:                      stacks searching.    (line  39)
* $stack-find-right:                     stacks searching.    (line  69)
* $stack-fold-left:                      stacks folding.      (line  12)
* $stack-fold-right:                     stacks folding.      (line  25)
* $stack-for-all:                        stacks searching.    (line  12)
* $stack-for-each:                       stacks mapping.      (line  52)
* $stack-for-each-left:                  stacks mapping.      (line  42)
* $stack-for-each-right:                 stacks mapping.      (line  47)
* $stack-getprop:                        stacks objects.      (line  49)
* $stack-hash:                           stacks objects.      (line  68)
* $stack-map:                            stacks mapping.      (line  38)
* $stack-map-left:                       stacks mapping.      (line  12)
* $stack-map-right:                      stacks mapping.      (line  25)
* $stack-not-empty?:                     stacks inspection.   (line  16)
* $stack-partition:                      stacks filtering.    (line  21)
* $stack-pop!:                           stacks access.       (line  21)
* $stack-property-list:                  stacks objects.      (line  59)
* $stack-purge!:                         stacks access.       (line  26)
* $stack-push!:                          stacks access.       (line  17)
* $stack-putprop:                        stacks objects.      (line  43)
* $stack-remprop:                        stacks objects.      (line  54)
* $stack-reverse!:                       stacks misc.         (line  23)
* $stack-size?:                          stacks inspection.   (line  20)
* $stack-top:                            stacks access.       (line  12)
* $string-absolute?:                     parser-tools unix-pathnames preds.
                                                              (line  44)
* $string-append:                        parser-tools unix-pathnames comp.
                                                              (line 390)
* $string-dirname:                       parser-tools unix-pathnames comp.
                                                              (line  72)
* $string-extension:                     parser-tools unix-pathnames comp.
                                                              (line  18)
* $string-normalise:                     parser-tools unix-pathnames comp.
                                                              (line 286)
* $string-pathname?:                     parser-tools unix-pathnames preds.
                                                              (line  13)
* $string-prefix?:                       parser-tools unix-pathnames comp.
                                                              (line 318)
* $string-prepend:                       parser-tools unix-pathnames comp.
                                                              (line 368)
* $string-relative?:                     parser-tools unix-pathnames preds.
                                                              (line  56)
* $string-replace-extension:             parser-tools unix-pathnames comp.
                                                              (line 412)
* $string-rootname:                      parser-tools unix-pathnames comp.
                                                              (line 164)
* $string-segment?:                      parser-tools unix-pathnames preds.
                                                              (line  27)
* $string-split:                         parser-tools unix-pathnames comp.
                                                              (line 246)
* $string-strip-trailing-slashes:        parser-tools unix-pathnames comp.
                                                              (line 223)
* $string-suffix?:                       parser-tools unix-pathnames comp.
                                                              (line 343)
* $string-tailname:                      parser-tools unix-pathnames comp.
                                                              (line 119)
* $string-uri-representation:            parser-tools unix-pathnames comp.
                                                              (line 451)
* $unbalanced-tree-insert!:              bst unodes ops.      (line  12)
* $unbalanced-tree-remove!:              bst unodes ops.      (line  37)
* $variable-ref:                         variables.           (line  26)
* $variable-set!:                        variables.           (line  25)
* $vector->chain:                        chains conversion.   (line  20)
* $vector->deque:                        deques conversion.   (line  28)
* $vector->dynamic-array:                dynamic arrays conversion.
                                                              (line  29)
* $vector->position:                     arrays positions.    (line  28)
* $vector->queue:                        queues conversion.   (line  28)
* $vector->stack:                        stacks conversion.   (line  27)
* %and/or-eq?:                           lists low.           (line  13)
* %and/or-null?:                         lists low.           (line   8)
* %bytevector->s8-list*:                 bytevectors 8 list.  (line   6)
* %bytevector->u8-list*:                 bytevectors 8 list.  (line   7)
* %bytevector-s8-any:                    bytevectors 8 pred.  (line  11)
* %bytevector-s8-ci<:                    bytevectors 8 compar lexi.
                                                              (line  77)
* %bytevector-s8-ci<=:                   bytevectors 8 compar lexi.
                                                              (line  90)
* %bytevector-s8-ci<>:                   bytevectors 8 compar lexi.
                                                              (line  61)
* %bytevector-s8-ci=:                    bytevectors 8 compar lexi.
                                                              (line  50)
* %bytevector-s8-ci>:                    bytevectors 8 compar lexi.
                                                              (line 103)
* %bytevector-s8-ci>=:                   bytevectors 8 compar lexi.
                                                              (line 116)
* %bytevector-s8-compare:                bytevectors 8 compar lexi.
                                                              (line   6)
* %bytevector-s8-compare-ci:             bytevectors 8 compar lexi.
                                                              (line  10)
* %bytevector-s8-concatenate-reverse:    bytevectors 8 cons.  (line  16)
* %bytevector-s8-contains:               bytevectors 8 search.
                                                              (line  75)
* %bytevector-s8-contains-ci:            bytevectors 8 search.
                                                              (line  77)
* %bytevector-s8-copy*:                  bytevectors 8 select.
                                                              (line  16)
* %bytevector-s8-copy*!:                 bytevectors 8 select.
                                                              (line  37)
* %bytevector-s8-count:                  bytevectors 8 search.
                                                              (line  57)
* %bytevector-s8-delete:                 bytevectors 8 filter.
                                                              (line  26)
* %bytevector-s8-dictionary-ci<=?:       bytevectors 8 compar dict.
                                                              (line  81)
* %bytevector-s8-dictionary-ci<>?:       bytevectors 8 compar dict.
                                                              (line  75)
* %bytevector-s8-dictionary-ci<?:        bytevectors 8 compar dict.
                                                              (line  77)
* %bytevector-s8-dictionary-ci=?:        bytevectors 8 compar dict.
                                                              (line  73)
* %bytevector-s8-dictionary-ci>=?:       bytevectors 8 compar dict.
                                                              (line  83)
* %bytevector-s8-dictionary-ci>?:        bytevectors 8 compar dict.
                                                              (line  79)
* %bytevector-s8-dictionary-compare:     bytevectors 8 compar dict.
                                                              (line  20)
* %bytevector-s8-dictionary-compare-ci:  bytevectors 8 compar dict.
                                                              (line  55)
* %bytevector-s8-dictionary<=?:          bytevectors 8 compar dict.
                                                              (line  44)
* %bytevector-s8-dictionary<>?:          bytevectors 8 compar dict.
                                                              (line  40)
* %bytevector-s8-dictionary<?:           bytevectors 8 compar dict.
                                                              (line  42)
* %bytevector-s8-dictionary=?:           bytevectors 8 compar dict.
                                                              (line  38)
* %bytevector-s8-dictionary>=?:          bytevectors 8 compar dict.
                                                              (line  48)
* %bytevector-s8-dictionary>?:           bytevectors 8 compar dict.
                                                              (line  46)
* %bytevector-s8-drop:                   bytevectors 8 select.
                                                              (line  73)
* %bytevector-s8-drop-right:             bytevectors 8 select.
                                                              (line  75)
* %bytevector-s8-every:                  bytevectors 8 pred.  (line   9)
* %bytevector-s8-fill*!:                 bytevectors 8 mutate.
                                                              (line  10)
* %bytevector-s8-filter:                 bytevectors 8 filter.
                                                              (line   6)
* %bytevector-s8-index:                  bytevectors 8 search.
                                                              (line   6)
* %bytevector-s8-index-right:            bytevectors 8 search.
                                                              (line   8)
* %bytevector-s8-join:                   bytevectors 8 list.  (line  44)
* %bytevector-s8-pad:                    bytevectors 8 pad.   (line   6)
* %bytevector-s8-pad-right:              bytevectors 8 pad.   (line   8)
* %bytevector-s8-prefix-ci?:             bytevectors 8 prefix.
                                                              (line  39)
* %bytevector-s8-prefix-length:          bytevectors 8 prefix.
                                                              (line   6)
* %bytevector-s8-prefix-length-ci:       bytevectors 8 prefix.
                                                              (line  10)
* %bytevector-s8-prefix?:                bytevectors 8 prefix.
                                                              (line  37)
* %bytevector-s8-replace:                bytevectors 8 misc.  (line   6)
* %bytevector-s8-reverse:                bytevectors 8 misc.  (line  13)
* %bytevector-s8-reverse!:               bytevectors 8 misc.  (line  15)
* %bytevector-s8-reverse-copy*:          bytevectors 8 select.
                                                              (line  30)
* %bytevector-s8-reverse-copy*!:         bytevectors 8 select.
                                                              (line  52)
* %bytevector-s8-skip:                   bytevectors 8 search.
                                                              (line  31)
* %bytevector-s8-skip-right:             bytevectors 8 search.
                                                              (line  33)
* %bytevector-s8-suffix-ci?:             bytevectors 8 prefix.
                                                              (line  53)
* %bytevector-s8-suffix-length:          bytevectors 8 prefix.
                                                              (line  22)
* %bytevector-s8-suffix-length-ci:       bytevectors 8 prefix.
                                                              (line  26)
* %bytevector-s8-suffix?:                bytevectors 8 prefix.
                                                              (line  51)
* %bytevector-s8-take:                   bytevectors 8 select.
                                                              (line  62)
* %bytevector-s8-take-right:             bytevectors 8 select.
                                                              (line  64)
* %bytevector-s8-titlecase*!:            bytevectors 8 case.  (line   6)
* %bytevector-s8-tokenise:               bytevectors 8 list.  (line  27)
* %bytevector-s8-tokenize:               bytevectors 8 list.  (line  25)
* %bytevector-s8-trim:                   bytevectors 8 pad.   (line  27)
* %bytevector-s8-trim-both:              bytevectors 8 pad.   (line  33)
* %bytevector-s8-trim-right:             bytevectors 8 pad.   (line  29)
* %bytevector-s8/numbers-ci<=?:          bytevectors 8 compar number.
                                                              (line  93)
* %bytevector-s8/numbers-ci<>?:          bytevectors 8 compar number.
                                                              (line  87)
* %bytevector-s8/numbers-ci<?:           bytevectors 8 compar number.
                                                              (line  89)
* %bytevector-s8/numbers-ci=?:           bytevectors 8 compar number.
                                                              (line  85)
* %bytevector-s8/numbers-ci>=?:          bytevectors 8 compar number.
                                                              (line  95)
* %bytevector-s8/numbers-ci>?:           bytevectors 8 compar number.
                                                              (line  91)
* %bytevector-s8/numbers-compare:        bytevectors 8 compar number.
                                                              (line  30)
* %bytevector-s8/numbers-compare-ci:     bytevectors 8 compar number.
                                                              (line  66)
* %bytevector-s8/numbers-dictionary-ci<=?: bytevectors 8 compar dictnumber.
                                                              (line  78)
* %bytevector-s8/numbers-dictionary-ci<>?: bytevectors 8 compar dictnumber.
                                                              (line  72)
* %bytevector-s8/numbers-dictionary-ci<?: bytevectors 8 compar dictnumber.
                                                              (line  74)
* %bytevector-s8/numbers-dictionary-ci=?: bytevectors 8 compar dictnumber.
                                                              (line  70)
* %bytevector-s8/numbers-dictionary-ci>=?: bytevectors 8 compar dictnumber.
                                                              (line  80)
* %bytevector-s8/numbers-dictionary-ci>?: bytevectors 8 compar dictnumber.
                                                              (line  76)
* %bytevector-s8/numbers-dictionary-compare: bytevectors 8 compar dictnumber.
                                                              (line  15)
* %bytevector-s8/numbers-dictionary-compare-ci: bytevectors 8 compar dictnumber.
                                                              (line  51)
* %bytevector-s8/numbers-dictionary<=?:  bytevectors 8 compar dictnumber.
                                                              (line  40)
* %bytevector-s8/numbers-dictionary<>?:  bytevectors 8 compar dictnumber.
                                                              (line  36)
* %bytevector-s8/numbers-dictionary<?:   bytevectors 8 compar dictnumber.
                                                              (line  38)
* %bytevector-s8/numbers-dictionary=?:   bytevectors 8 compar dictnumber.
                                                              (line  34)
* %bytevector-s8/numbers-dictionary>=?:  bytevectors 8 compar dictnumber.
                                                              (line  44)
* %bytevector-s8/numbers-dictionary>?:   bytevectors 8 compar dictnumber.
                                                              (line  42)
* %bytevector-s8/numbers<=?:             bytevectors 8 compar number.
                                                              (line  55)
* %bytevector-s8/numbers<>?:             bytevectors 8 compar number.
                                                              (line  51)
* %bytevector-s8/numbers<?:              bytevectors 8 compar number.
                                                              (line  53)
* %bytevector-s8/numbers=?:              bytevectors 8 compar number.
                                                              (line  49)
* %bytevector-s8/numbers>=?:             bytevectors 8 compar number.
                                                              (line  59)
* %bytevector-s8/numbers>?:              bytevectors 8 compar number.
                                                              (line  57)
* %bytevector-s8<:                       bytevectors 8 compar lexi.
                                                              (line  75)
* %bytevector-s8<=:                      bytevectors 8 compar lexi.
                                                              (line  88)
* %bytevector-s8<>:                      bytevectors 8 compar lexi.
                                                              (line  59)
* %bytevector-s8=:                       bytevectors 8 compar lexi.
                                                              (line  48)
* %bytevector-s8>:                       bytevectors 8 compar lexi.
                                                              (line 101)
* %bytevector-s8>=:                      bytevectors 8 compar lexi.
                                                              (line 114)
* %bytevector-u8-any:                    bytevectors 8 pred.  (line  12)
* %bytevector-u8-ci<:                    bytevectors 8 compar lexi.
                                                              (line  78)
* %bytevector-u8-ci<=:                   bytevectors 8 compar lexi.
                                                              (line  91)
* %bytevector-u8-ci<>:                   bytevectors 8 compar lexi.
                                                              (line  62)
* %bytevector-u8-ci=:                    bytevectors 8 compar lexi.
                                                              (line  51)
* %bytevector-u8-ci>:                    bytevectors 8 compar lexi.
                                                              (line 104)
* %bytevector-u8-ci>=:                   bytevectors 8 compar lexi.
                                                              (line 117)
* %bytevector-u8-compare:                bytevectors 8 compar lexi.
                                                              (line   8)
* %bytevector-u8-compare-ci:             bytevectors 8 compar lexi.
                                                              (line  12)
* %bytevector-u8-concatenate-reverse:    bytevectors 8 cons.  (line  18)
* %bytevector-u8-contains:               bytevectors 8 search.
                                                              (line  76)
* %bytevector-u8-contains-ci:            bytevectors 8 search.
                                                              (line  79)
* %bytevector-u8-copy*:                  bytevectors 8 select.
                                                              (line  17)
* %bytevector-u8-copy*!:                 bytevectors 8 select.
                                                              (line  39)
* %bytevector-u8-count:                  bytevectors 8 search.
                                                              (line  58)
* %bytevector-u8-delete:                 bytevectors 8 filter.
                                                              (line  27)
* %bytevector-u8-dictionary-ci<=?:       bytevectors 8 compar dict.
                                                              (line  82)
* %bytevector-u8-dictionary-ci<>?:       bytevectors 8 compar dict.
                                                              (line  76)
* %bytevector-u8-dictionary-ci<?:        bytevectors 8 compar dict.
                                                              (line  78)
* %bytevector-u8-dictionary-ci=?:        bytevectors 8 compar dict.
                                                              (line  74)
* %bytevector-u8-dictionary-ci>=?:       bytevectors 8 compar dict.
                                                              (line  84)
* %bytevector-u8-dictionary-ci>?:        bytevectors 8 compar dict.
                                                              (line  80)
* %bytevector-u8-dictionary-compare:     bytevectors 8 compar dict.
                                                              (line  21)
* %bytevector-u8-dictionary-compare-ci:  bytevectors 8 compar dict.
                                                              (line  56)
* %bytevector-u8-dictionary<=?:          bytevectors 8 compar dict.
                                                              (line  45)
* %bytevector-u8-dictionary<>?:          bytevectors 8 compar dict.
                                                              (line  41)
* %bytevector-u8-dictionary<?:           bytevectors 8 compar dict.
                                                              (line  43)
* %bytevector-u8-dictionary=?:           bytevectors 8 compar dict.
                                                              (line  39)
* %bytevector-u8-dictionary>=?:          bytevectors 8 compar dict.
                                                              (line  49)
* %bytevector-u8-dictionary>?:           bytevectors 8 compar dict.
                                                              (line  47)
* %bytevector-u8-drop:                   bytevectors 8 select.
                                                              (line  74)
* %bytevector-u8-drop-right:             bytevectors 8 select.
                                                              (line  76)
* %bytevector-u8-every:                  bytevectors 8 pred.  (line  10)
* %bytevector-u8-fill*!:                 bytevectors 8 mutate.
                                                              (line  11)
* %bytevector-u8-filter:                 bytevectors 8 filter.
                                                              (line   7)
* %bytevector-u8-index:                  bytevectors 8 search.
                                                              (line   7)
* %bytevector-u8-index-right:            bytevectors 8 search.
                                                              (line   9)
* %bytevector-u8-join:                   bytevectors 8 list.  (line  45)
* %bytevector-u8-pad:                    bytevectors 8 pad.   (line   7)
* %bytevector-u8-pad-right:              bytevectors 8 pad.   (line   9)
* %bytevector-u8-prefix-ci?:             bytevectors 8 prefix.
                                                              (line  41)
* %bytevector-u8-prefix-length:          bytevectors 8 prefix.
                                                              (line   8)
* %bytevector-u8-prefix-length-ci:       bytevectors 8 prefix.
                                                              (line  12)
* %bytevector-u8-prefix?:                bytevectors 8 prefix.
                                                              (line  38)
* %bytevector-u8-replace:                bytevectors 8 misc.  (line   7)
* %bytevector-u8-reverse:                bytevectors 8 misc.  (line  14)
* %bytevector-u8-reverse!:               bytevectors 8 misc.  (line  16)
* %bytevector-u8-reverse-copy*:          bytevectors 8 select.
                                                              (line  31)
* %bytevector-u8-reverse-copy*!:         bytevectors 8 select.
                                                              (line  54)
* %bytevector-u8-skip:                   bytevectors 8 search.
                                                              (line  32)
* %bytevector-u8-skip-right:             bytevectors 8 search.
                                                              (line  34)
* %bytevector-u8-suffix-ci?:             bytevectors 8 prefix.
                                                              (line  55)
* %bytevector-u8-suffix-length:          bytevectors 8 prefix.
                                                              (line  24)
* %bytevector-u8-suffix-length-ci:       bytevectors 8 prefix.
                                                              (line  28)
* %bytevector-u8-suffix?:                bytevectors 8 prefix.
                                                              (line  52)
* %bytevector-u8-take:                   bytevectors 8 select.
                                                              (line  63)
* %bytevector-u8-take-right:             bytevectors 8 select.
                                                              (line  65)
* %bytevector-u8-titlecase*!:            bytevectors 8 case.  (line   7)
* %bytevector-u8-tokenise:               bytevectors 8 list.  (line  28)
* %bytevector-u8-tokenize:               bytevectors 8 list.  (line  26)
* %bytevector-u8-trim:                   bytevectors 8 pad.   (line  28)
* %bytevector-u8-trim-both:              bytevectors 8 pad.   (line  35)
* %bytevector-u8-trim-right:             bytevectors 8 pad.   (line  31)
* %bytevector-u8/numbers-ci<=?:          bytevectors 8 compar number.
                                                              (line  94)
* %bytevector-u8/numbers-ci<>?:          bytevectors 8 compar number.
                                                              (line  88)
* %bytevector-u8/numbers-ci<?:           bytevectors 8 compar number.
                                                              (line  90)
* %bytevector-u8/numbers-ci=?:           bytevectors 8 compar number.
                                                              (line  86)
* %bytevector-u8/numbers-ci>=?:          bytevectors 8 compar number.
                                                              (line  96)
* %bytevector-u8/numbers-ci>?:           bytevectors 8 compar number.
                                                              (line  92)
* %bytevector-u8/numbers-compare:        bytevectors 8 compar number.
                                                              (line  31)
* %bytevector-u8/numbers-compare-ci:     bytevectors 8 compar number.
                                                              (line  67)
* %bytevector-u8/numbers-dictionary-ci<=?: bytevectors 8 compar dictnumber.
                                                              (line  79)
* %bytevector-u8/numbers-dictionary-ci<>?: bytevectors 8 compar dictnumber.
                                                              (line  73)
* %bytevector-u8/numbers-dictionary-ci<?: bytevectors 8 compar dictnumber.
                                                              (line  75)
* %bytevector-u8/numbers-dictionary-ci=?: bytevectors 8 compar dictnumber.
                                                              (line  71)
* %bytevector-u8/numbers-dictionary-ci>=?: bytevectors 8 compar dictnumber.
                                                              (line  81)
* %bytevector-u8/numbers-dictionary-ci>?: bytevectors 8 compar dictnumber.
                                                              (line  77)
* %bytevector-u8/numbers-dictionary-compare: bytevectors 8 compar dictnumber.
                                                              (line  16)
* %bytevector-u8/numbers-dictionary-compare-ci: bytevectors 8 compar dictnumber.
                                                              (line  52)
* %bytevector-u8/numbers-dictionary<=?:  bytevectors 8 compar dictnumber.
                                                              (line  41)
* %bytevector-u8/numbers-dictionary<>?:  bytevectors 8 compar dictnumber.
                                                              (line  37)
* %bytevector-u8/numbers-dictionary<?:   bytevectors 8 compar dictnumber.
                                                              (line  39)
* %bytevector-u8/numbers-dictionary=?:   bytevectors 8 compar dictnumber.
                                                              (line  35)
* %bytevector-u8/numbers-dictionary>=?:  bytevectors 8 compar dictnumber.
                                                              (line  45)
* %bytevector-u8/numbers-dictionary>?:   bytevectors 8 compar dictnumber.
                                                              (line  43)
* %bytevector-u8/numbers<=?:             bytevectors 8 compar number.
                                                              (line  56)
* %bytevector-u8/numbers<>?:             bytevectors 8 compar number.
                                                              (line  52)
* %bytevector-u8/numbers<?:              bytevectors 8 compar number.
                                                              (line  54)
* %bytevector-u8/numbers=?:              bytevectors 8 compar number.
                                                              (line  50)
* %bytevector-u8/numbers>=?:             bytevectors 8 compar number.
                                                              (line  60)
* %bytevector-u8/numbers>?:              bytevectors 8 compar number.
                                                              (line  58)
* %bytevector-u8<:                       bytevectors 8 compar lexi.
                                                              (line  76)
* %bytevector-u8<=:                      bytevectors 8 compar lexi.
                                                              (line  89)
* %bytevector-u8<>:                      bytevectors 8 compar lexi.
                                                              (line  60)
* %bytevector-u8=:                       bytevectors 8 compar lexi.
                                                              (line  49)
* %bytevector-u8>:                       bytevectors 8 compar lexi.
                                                              (line 102)
* %bytevector-u8>=:                      bytevectors 8 compar lexi.
                                                              (line 115)
* %cars:                                 lists low.           (line  47)
* %cars <1>:                             lists low.           (line  48)
* %cars*:                                lists low.           (line  57)
* %cars+cdrs*/no-test:                   lists low.           (line  84)
* %cars+knil:                            lists low.           (line  88)
* %cars+knil <1>:                        lists low.           (line  90)
* %cars+knil*:                           lists low.           (line 101)
* %cars+knil/cdrs:                       lists low.           (line 107)
* %cars+knil/cdrs <1>:                   lists low.           (line 109)
* %cars+knil/cdrs*:                      lists low.           (line 121)
* %cars/cdrs:                            lists low.           (line  75)
* %cars/cdrs*:                           lists low.           (line  80)
* %cdrs:                                 lists low.           (line  61)
* %cdrs <1>:                             lists low.           (line  62)
* %cdrs*:                                lists low.           (line  71)
* %domain->list:                         one-dimension ops.   (line 137)
* %domain-add-item:                      one-dimension make.  (line  26)
* %domain-add-range:                     one-dimension make.  (line  37)
* %domain-any:                           one-dimension ops.   (line 129)
* %domain-complement:                    one-dimension ops.   (line  92)
* %domain-contains?:                     one-dimension pred.  (line  69)
* %domain-copy:                          one-dimension make.  (line  23)
* %domain-difference:                    one-dimension ops.   (line  85)
* %domain-empty?:                        one-dimension pred.  (line  66)
* %domain-every:                         one-dimension ops.   (line 124)
* %domain-fold:                          one-dimension ops.   (line 134)
* %domain-for-each:                      one-dimension ops.   (line 121)
* %domain-intersection:                  one-dimension ops.   (line  71)
* %domain-size:                          one-dimension inspect.
                                                              (line   9)
* %domain-subset?:                       one-dimension pred.  (line  80)
* %domain-subset?/strict:                one-dimension pred.  (line  81)
* %domain-superset?:                     one-dimension pred.  (line  84)
* %domain-superset?/strict:              one-dimension pred.  (line  85)
* %domain-union:                         one-dimension ops.   (line  78)
* %domain<?:                             one-dimension pred.  (line  75)
* %domain=?:                             one-dimension pred.  (line  72)
* %domain?:                              one-dimension pred.  (line  63)
* %kmp-make-restart-vector:              kmp vector.          (line   6)
* %kmp-partial-search:                   kmp partial.         (line   6)
* %kmp-search:                           kmp full.            (line   6)
* %kmp-step:                             kmp step.            (line   6)
* %knil+cars:                            lists low.           (line  89)
* %knil+cars <1>:                        lists low.           (line  91)
* %knil+cars*:                           lists low.           (line 102)
* %knil+cars/cdrs:                       lists low.           (line 108)
* %knil+cars/cdrs <1>:                   lists low.           (line 110)
* %knil+cars/cdrs*:                      lists low.           (line 122)
* %list->queue:                          lists low.           (line 153)
* %make-domain:                          one-dimension make.  (line  18)
* %make-queue:                           lists low.           (line 149)
* %make-range:                           one-dimension make.  (line  10)
* %make-range <1>:                       one-dimension make.  (line  11)
* %make-type-descriptor:                 one-dimension make.  (line   6)
* %queue-last-pair-ref:                  lists low.           (line 165)
* %queue-list-ref:                       lists low.           (line 162)
* %random-bytevector:                    random device.       (line  38)
* %random-bytevector!:                   random device.       (line  47)
* %random-string-sample:                 random utils strings.
                                                              (line  45)
* %random-string-sample-population:      random utils strings.
                                                              (line  51)
* %random-string-shuffle:                random utils strings.
                                                              (line  35)
* %random-string-shuffle!:               random utils strings.
                                                              (line  40)
* %random-vector-sample:                 random utils vectors.
                                                              (line  28)
* %random-vector-sample-population:      random utils vectors.
                                                              (line  34)
* %random-vector-shuffle:                random utils vectors.
                                                              (line  18)
* %random-vector-shuffle!:               random utils vectors.
                                                              (line  23)
* %range->list:                          one-dimension ops.   (line 118)
* %range-any:                            one-dimension ops.   (line 110)
* %range-concatenate:                    one-dimension ops.   (line 143)
* %range-contains?:                      one-dimension pred.  (line  12)
* %range-contiguous?:                    one-dimension pred.  (line  44)
* %range-copy:                           one-dimension make.  (line  15)
* %range-difference:                     one-dimension ops.   (line  39)
* %range-every:                          one-dimension ops.   (line 105)
* %range-fold:                           one-dimension ops.   (line 115)
* %range-for-each:                       one-dimension ops.   (line 102)
* %range-in-first-only:                  one-dimension ops.   (line  56)
* %range-intersection:                   one-dimension ops.   (line   9)
* %range-last<=?:                        one-dimension pred.  (line  39)
* %range-last<?:                         one-dimension pred.  (line  35)
* %range-length:                         one-dimension inspect.
                                                              (line   6)
* %range-overlapping?:                   one-dimension pred.  (line  48)
* %range-past<=?:                        one-dimension pred.  (line  40)
* %range-past<?:                         one-dimension pred.  (line  34)
* %range-start<=?:                       one-dimension pred.  (line  30)
* %range-start<?:                        one-dimension pred.  (line  26)
* %range-subset?:                        one-dimension pred.  (line  56)
* %range-subset?/strict:                 one-dimension pred.  (line  57)
* %range-superset?:                      one-dimension pred.  (line  51)
* %range-superset?/strict:               one-dimension pred.  (line  52)
* %range-union:                          one-dimension ops.   (line  19)
* %range<=?:                             one-dimension pred.  (line  22)
* %range<?:                              one-dimension pred.  (line  18)
* %range=?:                              one-dimension pred.  (line  15)
* %range?:                               one-dimension pred.  (line   9)
* %reverse-bytevector->s8-list:          bytevectors 8 list.  (line  13)
* %reverse-bytevector->u8-list:          bytevectors 8 list.  (line  14)
* %reverse-string->list:                 strings list.        (line  12)
* %reverse-vector->list:                 vectors list.        (line  12)
* %string->list*:                        strings list.        (line   6)
* %string-any:                           strings pred.        (line  10)
* %string-ci<:                           strings compar lexi. (line  59)
* %string-ci<=:                          strings compar lexi. (line  80)
* %string-ci<>:                          strings compar lexi. (line  47)
* %string-ci=:                           strings compar lexi. (line  40)
* %string-ci>:                           strings compar lexi. (line 101)
* %string-ci>=:                          strings compar lexi. (line 122)
* %string-compare:                       strings compar lexi. (line   6)
* %string-compare-ci:                    strings compar lexi. (line   8)
* %string-concatenate-reverse:           strings cons.        (line  10)
* %string-contains:                      strings search.      (line  51)
* %string-contains-ci:                   strings search.      (line  52)
* %string-copy*:                         strings select.      (line   9)
* %string-copy*!:                        strings select.      (line  30)
* %string-count:                         strings search.      (line  38)
* %string-delete:                        strings filter.      (line  21)
* %string-dictionary-ci<=?:              strings compar dict. (line  51)
* %string-dictionary-ci<>?:              strings compar dict. (line  48)
* %string-dictionary-ci<?:               strings compar dict. (line  49)
* %string-dictionary-ci=?:               strings compar dict. (line  47)
* %string-dictionary-ci>=?:              strings compar dict. (line  52)
* %string-dictionary-ci>?:               strings compar dict. (line  50)
* %string-dictionary-compare:            strings compar dict. (line  15)
* %string-dictionary-compare-ci:         strings compar dict. (line  36)
* %string-dictionary<=?:                 strings compar dict. (line  29)
* %string-dictionary<>?:                 strings compar dict. (line  27)
* %string-dictionary<?:                  strings compar dict. (line  28)
* %string-dictionary=?:                  strings compar dict. (line  26)
* %string-dictionary>=?:                 strings compar dict. (line  31)
* %string-dictionary>?:                  strings compar dict. (line  30)
* %string-drop:                          strings select.      (line  55)
* %string-drop-right:                    strings select.      (line  56)
* %string-every:                         strings pred.        (line   9)
* %string-fill*!:                        strings mutate.      (line   9)
* %string-filter:                        strings filter.      (line   6)
* %string-index:                         strings search.      (line   6)
* %string-index-right:                   strings search.      (line   7)
* %string-join:                          strings list.        (line  47)
* %string-pad:                           strings pad.         (line   6)
* %string-pad-right:                     strings pad.         (line   7)
* %string-prefix-ci?:                    strings prefix.      (line  24)
* %string-prefix-length:                 strings prefix.      (line   6)
* %string-prefix-length-ci:              strings prefix.      (line   7)
* %string-prefix?:                       strings prefix.      (line  23)
* %string-replace:                       strings misc.        (line   6)
* %string-reverse:                       strings misc.        (line  11)
* %string-reverse!:                      strings misc.        (line  12)
* %string-reverse-copy*:                 strings select.      (line  20)
* %string-reverse-copy*!:                strings select.      (line  42)
* %string-search-and-replace:            strings search.      (line  59)
* %string-search-and-replace-ci:         strings search.      (line  61)
* %string-skip:                          strings search.      (line  22)
* %string-skip-right:                    strings search.      (line  23)
* %string-suffix-ci?:                    strings prefix.      (line  32)
* %string-suffix-length:                 strings prefix.      (line  15)
* %string-suffix-length-ci:              strings prefix.      (line  16)
* %string-suffix?:                       strings prefix.      (line  31)
* %string-take:                          strings select.      (line  48)
* %string-take-right:                    strings select.      (line  49)
* %string-titlecase*!:                   strings case.        (line   6)
* %string-tokenise:                      strings list.        (line  25)
* %string-tokenize:                      strings list.        (line  24)
* %string-trim:                          strings pad.         (line  26)
* %string-trim-both:                     strings pad.         (line  28)
* %string-trim-right:                    strings pad.         (line  27)
* %string/numbers-ci<=?:                 strings compar number.
                                                              (line  74)
* %string/numbers-ci<>?:                 strings compar number.
                                                              (line  71)
* %string/numbers-ci<?:                  strings compar number.
                                                              (line  72)
* %string/numbers-ci=?:                  strings compar number.
                                                              (line  70)
* %string/numbers-ci>=?:                 strings compar number.
                                                              (line  75)
* %string/numbers-ci>?:                  strings compar number.
                                                              (line  73)
* %string/numbers-compare:               strings compar number.
                                                              (line  36)
* %string/numbers-compare-ci:            strings compar number.
                                                              (line  58)
* %string/numbers-dictionary-ci<=?:      strings compar dictnumber.
                                                              (line  59)
* %string/numbers-dictionary-ci<>?:      strings compar dictnumber.
                                                              (line  56)
* %string/numbers-dictionary-ci<?:       strings compar dictnumber.
                                                              (line  57)
* %string/numbers-dictionary-ci=?:       strings compar dictnumber.
                                                              (line  55)
* %string/numbers-dictionary-ci>=?:      strings compar dictnumber.
                                                              (line  60)
* %string/numbers-dictionary-ci>?:       strings compar dictnumber.
                                                              (line  58)
* %string/numbers-dictionary-compare:    strings compar dictnumber.
                                                              (line  21)
* %string/numbers-dictionary-compare-ci: strings compar dictnumber.
                                                              (line  43)
* %string/numbers-dictionary<=?:         strings compar dictnumber.
                                                              (line  36)
* %string/numbers-dictionary<>?:         strings compar dictnumber.
                                                              (line  34)
* %string/numbers-dictionary<?:          strings compar dictnumber.
                                                              (line  35)
* %string/numbers-dictionary=?:          strings compar dictnumber.
                                                              (line  33)
* %string/numbers-dictionary>=?:         strings compar dictnumber.
                                                              (line  38)
* %string/numbers-dictionary>?:          strings compar dictnumber.
                                                              (line  37)
* %string/numbers<=?:                    strings compar number.
                                                              (line  51)
* %string/numbers<>?:                    strings compar number.
                                                              (line  49)
* %string/numbers<?:                     strings compar number.
                                                              (line  50)
* %string/numbers=?:                     strings compar number.
                                                              (line  48)
* %string/numbers>=?:                    strings compar number.
                                                              (line  53)
* %string/numbers>?:                     strings compar number.
                                                              (line  52)
* %string<:                              strings compar lexi. (line  58)
* %string<=:                             strings compar lexi. (line  79)
* %string<>:                             strings compar lexi. (line  46)
* %string=:                              strings compar lexi. (line  39)
* %string>:                              strings compar lexi. (line 100)
* %string>=:                             strings compar lexi. (line 121)
* %subbytevector-s8-fold-left:           bytevectors 8 fold.  (line  41)
* %subbytevector-s8-fold-right:          bytevectors 8 fold.  (line  43)
* %subbytevector-s8-for-each:            bytevectors 8 map.   (line  78)
* %subbytevector-s8-for-each-index:      bytevectors 8 map.   (line  85)
* %subbytevector-s8-map:                 bytevectors 8 map.   (line  62)
* %subbytevector-s8-map!:                bytevectors 8 map.   (line  70)
* %subbytevector-u8-fold-left:           bytevectors 8 fold.  (line  42)
* %subbytevector-u8-fold-right:          bytevectors 8 fold.  (line  44)
* %subbytevector-u8-for-each:            bytevectors 8 map.   (line  79)
* %subbytevector-u8-for-each-index:      bytevectors 8 map.   (line  86)
* %subbytevector-u8-map:                 bytevectors 8 map.   (line  63)
* %subbytevector-u8-map!:                bytevectors 8 map.   (line  71)
* %substring-fold-left:                  strings fold.        (line  35)
* %substring-fold-right:                 strings fold.        (line  36)
* %substring-for-each:                   strings map.         (line  69)
* %substring-for-each-index:             strings map.         (line  74)
* %substring-map:                        strings map.         (line  57)
* %substring-map!:                       strings map.         (line  63)
* %subvector-fold-left:                  vectors fold sub.    (line   6)
* %subvector-fold-right:                 vectors fold sub.    (line   7)
* %subvector-for-each:                   vectors fold map.    (line  79)
* %subvector-for-each-index:             vectors fold map.    (line  86)
* %subvector-for-each/with-index:        vectors fold map.    (line  80)
* %subvector-map:                        vectors fold map.    (line  64)
* %subvector-map!:                       vectors fold map.    (line  72)
* %subvector-map!/with-index:            vectors fold map.    (line  73)
* %subvector-map/with-index:             vectors fold map.    (line  65)
* %vector->list*:                        vectors list.        (line   6)
* %vector-any:                           vectors pred.        (line  10)
* %vector-binary-search:                 vectors search.      (line  33)
* %vector-compare:                       vectors compar.      (line   6)
* %vector-concatenate-reverse:           vectors cons.        (line  10)
* %vector-contains:                      vectors search.      (line  27)
* %vector-copy:                          vectors select.      (line   6)
* %vector-copy!:                         vectors select.      (line  22)
* %vector-count:                         vectors search.      (line  22)
* %vector-delete:                        vectors filter.      (line  11)
* %vector-drop:                          vectors select.      (line  44)
* %vector-drop-right:                    vectors select.      (line  45)
* %vector-every:                         vectors pred.        (line   9)
* %vector-fill*!:                        vectors mutate.      (line   9)
* %vector-filter:                        vectors filter.      (line   6)
* %vector-index:                         vectors search.      (line   6)
* %vector-index-right:                   vectors search.      (line   7)
* %vector-pad:                           vectors pad.         (line   6)
* %vector-pad-right:                     vectors pad.         (line   7)
* %vector-prefix-length:                 vectors prefix.      (line   6)
* %vector-prefix?:                       vectors prefix.      (line  17)
* %vector-replace:                       vectors misc.        (line   6)
* %vector-reverse:                       vectors misc.        (line  11)
* %vector-reverse!:                      vectors misc.        (line  12)
* %vector-reverse-copy:                  vectors select.      (line  12)
* %vector-reverse-copy!:                 vectors select.      (line  31)
* %vector-skip:                          vectors search.      (line  14)
* %vector-skip-right:                    vectors search.      (line  15)
* %vector-suffix-length:                 vectors prefix.      (line  12)
* %vector-suffix?:                       vectors prefix.      (line  23)
* %vector-take:                          vectors select.      (line  37)
* %vector-take-right:                    vectors select.      (line  38)
* %vector-trim:                          vectors pad.         (line  24)
* %vector-trim-both:                     vectors pad.         (line  26)
* %vector-trim-right:                    vectors pad.         (line  25)
* %vector<:                              vectors compar.      (line  74)
* %vector<=:                             vectors compar.      (line  79)
* %vector<>:                             vectors compar.      (line  44)
* %vector=:                              vectors compar.      (line  39)
* %vector>:                              vectors compar.      (line  84)
* %vector>=:                             vectors compar.      (line  89)
* %xsubbytevector-s8:                    bytevectors 8 replicate.
                                                              (line   6)
* %xsubbytevector-u8:                    bytevectors 8 replicate.
                                                              (line   7)
* %xsubstring:                           strings replicate.   (line   6)
* %xsubvector:                           vectors replicate.   (line   6)
* (max-compare:                          srfi compare-procedures spec using.
                                                              (line 243)
* (min-compare:                          srfi compare-procedures spec using.
                                                              (line 242)
* ->char-set:                            srfi char-sets spec create.
                                                              (line  83)
* ...:                                   simple-match syntax. (line  23)
* ... <1>:                               srfi ralists spec random.
                                                              (line 174)
* ::                                     loops generators dispatch.
                                                              (line   6)
* : <1>:                                 srfi eager-comp spec generators.
                                                              (line  37)
* :after:                                multimethods methods.
                                                              (line  17)
* :after <1>:                            multimethods methods.
                                                              (line  60)
* :around:                               multimethods methods.
                                                              (line  15)
* :around <1>:                           multimethods methods.
                                                              (line  58)
* :before:                               multimethods methods.
                                                              (line  16)
* :before <1>:                           multimethods methods.
                                                              (line  59)
* :char-range:                           loops generators ranges.
                                                              (line  49)
* :char-range <1>:                       srfi eager-comp spec generators.
                                                              (line 129)
* :dispatched:                           loops generators dispatch.
                                                              (line  59)
* :dispatched <1>:                       srfi eager-comp spec generators.
                                                              (line 145)
* :do:                                   loops generators do. (line   6)
* :do <1>:                               loops generators do. (line   7)
* :do <2>:                               srfi eager-comp spec generators.
                                                              (line 276)
* :do <3>:                               srfi eager-comp spec generators.
                                                              (line 277)
* :end-of-input:                         parser logic api.    (line  10)
* :generate-delimiter-test:              parser logic api.    (line 108)
* :generate-end-of-input-or-char-tests:  parser logic api.    (line 106)
* :integers:                             loops generators typed.
                                                              (line  24)
* :integers <1>:                         srfi eager-comp spec generators.
                                                              (line  83)
* :introduce-device-arguments:           parser logic api.    (line 105)
* :invalid-input-char:                   parser logic api.    (line 109)
* :let:                                  loops generators let.
                                                              (line   6)
* :let <1>:                              srfi eager-comp spec generators.
                                                              (line 307)
* :list:                                 loops generators typed.
                                                              (line   6)
* :list <1>:                             srfi eager-comp spec generators.
                                                              (line  69)
* :parallel:                             loops generators parallel.
                                                              (line   6)
* :parallel <1>:                         srfi eager-comp spec generators.
                                                              (line 317)
* :port:                                 loops generators port.
                                                              (line   6)
* :port <1>:                             loops generators port.
                                                              (line   7)
* :port <2>:                             srfi eager-comp spec generators.
                                                              (line 137)
* :port <3>:                             srfi eager-comp spec generators.
                                                              (line 138)
* :primary:                              multimethods methods.
                                                              (line  14)
* :primary <1>:                          multimethods methods.
                                                              (line  57)
* :range:                                loops generators ranges.
                                                              (line   6)
* :range <1>:                            loops generators ranges.
                                                              (line   7)
* :range <2>:                            loops generators ranges.
                                                              (line   8)
* :range <3>:                            srfi eager-comp spec generators.
                                                              (line  89)
* :range <4>:                            srfi eager-comp spec generators.
                                                              (line  90)
* :range <5>:                            srfi eager-comp spec generators.
                                                              (line  91)
* :real-range:                           loops generators ranges.
                                                              (line  32)
* :real-range <1>:                       loops generators ranges.
                                                              (line  33)
* :real-range <2>:                       loops generators ranges.
                                                              (line  34)
* :real-range <3>:                       srfi eager-comp spec generators.
                                                              (line 112)
* :real-range <4>:                       srfi eager-comp spec generators.
                                                              (line 113)
* :real-range <5>:                       srfi eager-comp spec generators.
                                                              (line 114)
* :string:                               loops generators typed.
                                                              (line   7)
* :string <1>:                           srfi eager-comp spec generators.
                                                              (line  70)
* :unexpected-end-of-input:              parser logic api.    (line 107)
* :until:                                loops generators cond.
                                                              (line  14)
* :until <1>:                            srfi eager-comp spec generators.
                                                              (line 334)
* :vector:                               loops generators typed.
                                                              (line   8)
* :vector <1>:                           srfi eager-comp spec generators.
                                                              (line  71)
* :while:                                loops generators cond.
                                                              (line   6)
* :while <1>:                            srfi eager-comp spec generators.
                                                              (line 326)
* </<=?:                                 comparisons pred.    (line  59)
* </<=? <1>:                             srfi compare-procedures spec using.
                                                              (line 150)
* </<=? <2>:                             srfi compare-procedures spec using.
                                                              (line 151)
* </<=? <3>:                             srfi compare-procedures spec using.
                                                              (line 152)
* </<=? <4>:                             srfi compare-procedures spec using.
                                                              (line 153)
* </<?:                                  comparisons pred.    (line  58)
* </<? <1>:                              srfi compare-procedures spec using.
                                                              (line 146)
* </<? <2>:                              srfi compare-procedures spec using.
                                                              (line 147)
* </<? <3>:                              srfi compare-procedures spec using.
                                                              (line 148)
* </<? <4>:                              srfi compare-procedures spec using.
                                                              (line 149)
* <=/<=?:                                comparisons pred.    (line  61)
* <=/<=? <1>:                            srfi compare-procedures spec using.
                                                              (line 158)
* <=/<=? <2>:                            srfi compare-procedures spec using.
                                                              (line 159)
* <=/<=? <3>:                            srfi compare-procedures spec using.
                                                              (line 160)
* <=/<=? <4>:                            srfi compare-procedures spec using.
                                                              (line 161)
* <=/<?:                                 comparisons pred.    (line  60)
* <=/<? <1>:                             srfi compare-procedures spec using.
                                                              (line 154)
* <=/<? <2>:                             srfi compare-procedures spec using.
                                                              (line 155)
* <=/<? <3>:                             srfi compare-procedures spec using.
                                                              (line 156)
* <=/<? <4>:                             srfi compare-procedures spec using.
                                                              (line 157)
* <=?:                                   comparisons pred.    (line   9)
* <=? <1>:                               srfi compare-procedures spec using.
                                                              (line  94)
* <=? <2>:                               srfi compare-procedures spec using.
                                                              (line  95)
* <=? <3>:                               srfi compare-procedures spec using.
                                                              (line  96)
* <=? <4>:                               srfi compare-procedures spec using.
                                                              (line  97)
* <=? <5>:                               srfi comparators compar pred.
                                                              (line   9)
* <?:                                    comparisons pred.    (line   7)
* <? <1>:                                srfi compare-procedures spec using.
                                                              (line  86)
* <? <2>:                                srfi compare-procedures spec using.
                                                              (line  87)
* <? <3>:                                srfi compare-procedures spec using.
                                                              (line  88)
* <? <4>:                                srfi compare-procedures spec using.
                                                              (line  89)
* <? <5>:                                srfi comparators compar pred.
                                                              (line   7)
* <bitvector> on <bitvector>:            bitvectors type.     (line  14)
* =>:                                    simple-match syntax. (line  12)
* => <1>:                                pipelines.           (line  10)
* => <2>:                                checks eval.         (line  84)
* => <3>:                                checks eval.         (line  97)
* => <4>:                                checks eval.         (line 110)
* => <5>:                                checks eval.         (line 125)
* => <6>:                                checks eval.         (line 140)
* => <7>:                                checks eval.         (line 153)
* =?:                                    comparisons pred.    (line   6)
* =? <1>:                                srfi compare-procedures spec using.
                                                              (line  82)
* =? <2>:                                srfi compare-procedures spec using.
                                                              (line  83)
* =? <3>:                                srfi compare-procedures spec using.
                                                              (line  84)
* =? <4>:                                srfi compare-procedures spec using.
                                                              (line  85)
* =? <5>:                                srfi comparators compar pred.
                                                              (line   6)
* >/>=?:                                 comparisons pred.    (line  63)
* >/>=? <1>:                             srfi compare-procedures spec using.
                                                              (line 166)
* >/>=? <2>:                             srfi compare-procedures spec using.
                                                              (line 167)
* >/>=? <3>:                             srfi compare-procedures spec using.
                                                              (line 168)
* >/>=? <4>:                             srfi compare-procedures spec using.
                                                              (line 169)
* >/>?:                                  comparisons pred.    (line  62)
* >/>? <1>:                              srfi compare-procedures spec using.
                                                              (line 162)
* >/>? <2>:                              srfi compare-procedures spec using.
                                                              (line 163)
* >/>? <3>:                              srfi compare-procedures spec using.
                                                              (line 164)
* >/>? <4>:                              srfi compare-procedures spec using.
                                                              (line 165)
* >=/>=?:                                comparisons pred.    (line  65)
* >=/>=? <1>:                            srfi compare-procedures spec using.
                                                              (line 174)
* >=/>=? <2>:                            srfi compare-procedures spec using.
                                                              (line 175)
* >=/>=? <3>:                            srfi compare-procedures spec using.
                                                              (line 176)
* >=/>=? <4>:                            srfi compare-procedures spec using.
                                                              (line 177)
* >=/>?:                                 comparisons pred.    (line  64)
* >=/>? <1>:                             srfi compare-procedures spec using.
                                                              (line 170)
* >=/>? <2>:                             srfi compare-procedures spec using.
                                                              (line 171)
* >=/>? <3>:                             srfi compare-procedures spec using.
                                                              (line 172)
* >=/>? <4>:                             srfi compare-procedures spec using.
                                                              (line 173)
* >=?:                                   comparisons pred.    (line  10)
* >=? <1>:                               srfi compare-procedures spec using.
                                                              (line  98)
* >=? <2>:                               srfi compare-procedures spec using.
                                                              (line  99)
* >=? <3>:                               srfi compare-procedures spec using.
                                                              (line 100)
* >=? <4>:                               srfi compare-procedures spec using.
                                                              (line 101)
* >=? <5>:                               srfi comparators compar pred.
                                                              (line  10)
* >?:                                    comparisons pred.    (line   8)
* >? <1>:                                srfi compare-procedures spec using.
                                                              (line  90)
* >? <2>:                                srfi compare-procedures spec using.
                                                              (line  91)
* >? <3>:                                srfi compare-procedures spec using.
                                                              (line  92)
* >? <4>:                                srfi compare-procedures spec using.
                                                              (line  93)
* >? <5>:                                srfi comparators compar pred.
                                                              (line   8)
* ?GENERATOR:                            loops qualifiers.    (line  16)
* _:                                     simple-match syntax. (line  24)
* ~!:                                    formations escape misc.
                                                              (line  39)
* ~%:                                    formations escape lines.
                                                              (line   6)
* ~&:                                    formations escape lines.
                                                              (line  22)
* ~( ~):                                 formations escape case.
                                                              (line   6)
* ~*:                                    formations escape args.
                                                              (line  23)
* ~/:                                    formations escape columns.
                                                              (line  71)
* ~?:                                    formations escape args.
                                                              (line   6)
* ~a:                                    formations escape generic.
                                                              (line   6)
* ~b:                                    formations escape integers.
                                                              (line   9)
* ~c:                                    formations escape char.
                                                              (line   6)
* ~d:                                    formations escape integers.
                                                              (line   6)
* ~e:                                    formations escape flonums.
                                                              (line  64)
* ~f:                                    formations escape flonums.
                                                              (line   6)
* ~i:                                    formations escape complex.
                                                              (line   6)
* ~k:                                    formations escape args.
                                                              (line   7)
* ~o:                                    formations escape integers.
                                                              (line   8)
* ~p:                                    formations escape misc.
                                                              (line   6)
* ~r:                                    formations escape integers.
                                                              (line  44)
* ~s:                                    formations escape generic.
                                                              (line   7)
* ~t:                                    formations escape columns.
                                                              (line  23)
* ~x:                                    formations escape integers.
                                                              (line   7)
* ~y:                                    formations escape columns.
                                                              (line   6)
* ~[ ~; ~]:                              formations escape args.
                                                              (line 106)
* ~\n:                                   formations escape lines.
                                                              (line  44)
* ~^:                                    formations escape args.
                                                              (line 149)
* ~_:                                    formations escape columns.
                                                              (line  11)
* ~{:                                    formations escape args.
                                                              (line  47)
* ~|:                                    formations escape lines.
                                                              (line  36)
* ~~:                                    formations escape misc.
                                                              (line  29)
* abort-restart:                         restarts func.       (line  42)
* abort-restart <1>:                     restarts func.       (line  43)
* absolute?:                             parser-tools unix-pathnames preds.
                                                              (line  42)
* accept:                                posix socket socket. (line  54)
* access:                                posix stat.          (line  84)
* acosh:                                 glibc math.          (line  62)
* action:                                getopts types.       (line  54)
* add-duration:                          srfi time spec time. (line  90)
* add-duration!:                         srfi time spec time. (line  95)
* add-hook!:                             hooks.               (line  22)
* add-hook! <1>:                         hooks.               (line  23)
* add-method:                            multimethods methods.
                                                              (line  55)
* add-method <1>:                        multimethods methods.
                                                              (line  56)
* add-result:                            checks result.       (line  14)
* address-family:                        srfi basic-socket spec flag.
                                                              (line  13)
* address-info:                          srfi basic-socket spec flag.
                                                              (line  30)
* after-fork/prepare-child-binary-input/output-ports: posix process fork binary.
                                                              (line  43)
* after-fork/prepare-child-file-descriptors: posix process fork fds.
                                                              (line  40)
* after-fork/prepare-child-textual-input/output-ports: posix process fork textual.
                                                              (line  43)
* after-fork/prepare-parent-binary-input/output-ports: posix process fork binary.
                                                              (line  58)
* after-fork/prepare-parent-textual-input/output-ports: posix process fork textual.
                                                              (line  56)
* alarm:                                 posix time functions.
                                                              (line  98)
* alist->bag:                            srfi sets-and-bags bag.
                                                              (line 137)
* alist->hash-table:                     srfi hash-tables spec type.
                                                              (line  32)
* alist->hash-table <1>:                 srfi hash-tables spec type.
                                                              (line  33)
* alist->hash-table <2>:                 srfi hash-tables spec type.
                                                              (line  34)
* alist->hash-table <3>:                 srfi hash-tables spec type.
                                                              (line  35)
* alist-cons:                            srfi list spec alist.
                                                              (line  56)
* alist-cons <1>:                        lists alist.         (line  41)
* alist-copy:                            srfi list spec alist.
                                                              (line  64)
* alist-copy <1>:                        lists alist.         (line  49)
* alist-delete:                          srfi list spec alist.
                                                              (line  73)
* alist-delete <1>:                      lists alist.         (line  58)
* alist-delete <2>:                      lists alist.         (line  59)
* alist-delete!:                         srfi list spec alist.
                                                              (line  74)
* alist-delete! <1>:                     lists alist.         (line  60)
* alist-delete! <2>:                     lists alist.         (line  61)
* amb:                                   amb api core.        (line  24)
* amb-assert:                            amb api utilities.   (line   9)
* amb-backtrack-log:                     amb api utilities.   (line  15)
* amb-exhaustion?:                       amb api condition.   (line  16)
* amb-not-initialised?:                  amb api condition.   (line  31)
* amb-permute:                           amb api random.      (line   9)
* amb-permute <1>:                       amb api random.      (line  22)
* amb-random-fixnum-maker:               amb api random.      (line  29)
* amb-thunk:                             amb api generator.   (line   9)
* and:                                   simple-match syntax. (line  18)
* and <1>:                               loops qualifiers.    (line  39)
* and <2>:                               srfi eager-comp spec qualifiers.
                                                              (line  28)
* and on <bitvector>:                    bitvectors bits.     (line  35)
* and! on <bitvector>:                   bitvectors bits.     (line  42)
* and-fold-left*:                        lists fold derived.  (line   6)
* and-fold-left*/stx:                    lists fold derived.  (line   8)
* and-fold-right*:                       lists fold derived.  (line   7)
* and-fold-right*/stx:                   lists fold derived.  (line   9)
* and-let*:                              srfi and-let-star spec.
                                                              (line   6)
* and-null?:                             lists pred.          (line  25)
* and-null?/stx:                         lists pred.          (line  26)
* and/or-null?:                          lists pred.          (line  34)
* and/or-null?/stx:                      lists pred.          (line  35)
* any:                                   srfi list spec search.
                                                              (line 166)
* any <1>:                               lists search.        (line  75)
* any*:                                  lists search.        (line  76)
* any?-ec:                               loops comprehensions search.
                                                              (line   6)
* any?-ec <1>:                           srfi eager-comp spec comprehensions.
                                                              (line  67)
* append:                                srfi list spec misc. (line  20)
* append <1>:                            srfi ralists spec random.
                                                              (line 239)
* append <2>:                            parser-tools unix-pathnames comp.
                                                              (line 388)
* append!:                               srfi list spec misc. (line  21)
* append! <1>:                           lists misc.          (line  11)
* append-ec:                             loops comprehensions list.
                                                              (line  26)
* append-ec <1>:                         srfi eager-comp spec comprehensions.
                                                              (line  17)
* append-map:                            srfi list spec fold. (line 348)
* append-map <1>:                        lists fold map.      (line  56)
* append-map!:                           srfi list spec fold. (line 349)
* append-map! <1>:                       lists fold map.      (line  57)
* append-reverse:                        srfi list spec misc. (line  79)
* append-reverse <1>:                    lists misc.          (line  53)
* append-reverse!:                       srfi list spec misc. (line  80)
* append-reverse! <1>:                   lists misc.          (line  54)
* append-reverse!/stx:                   lists misc.          (line  56)
* append-reverse/stx:                    lists misc.          (line  55)
* apply:                                 simple-match syntax. (line  21)
* args-fold:                             srfi args-fold spec. (line   6)
* args-fold <1>:                         srfi args-fold spec. (line  46)
* argument-condition?:                   getopts conditions.  (line  49)
* arguments-validation-forms:            args forms.          (line   9)
* arguments-validation-forms <1>:        args forms.          (line  10)
* array:                                 srfi marray spec.    (line  48)
* array-end:                             srfi marray spec.    (line  62)
* array-rank:                            srfi marray spec.    (line  53)
* array-ref:                             srfi marray spec.    (line  65)
* array-ref <1>:                         srfi marray spec.    (line  66)
* array-set!:                            srfi marray spec.    (line  84)
* array-set! <1>:                        srfi marray spec.    (line  85)
* array-start:                           srfi marray spec.    (line  59)
* array?:                                srfi marray spec.    (line  24)
* ascii-alpha-digit?:                    asciis generic.      (line  54)
* ascii-alphabetic?:                     asciis generic.      (line  39)
* ascii-cased?:                          asciis generic.      (line  34)
* ascii-dec->fixnum:                     asciis conversion.   (line  12)
* ascii-dec-digit?:                      asciis generic.      (line  44)
* ascii-downcase:                        asciis generic.      (line  60)
* ascii-hex->fixnum:                     asciis conversion.   (line  28)
* ascii-hex-digit?:                      asciis generic.      (line  49)
* ascii-lower-case?:                     asciis generic.      (line  26)
* ascii-title-case?:                     asciis generic.      (line  27)
* ascii-titlecase:                       asciis generic.      (line  61)
* ascii-upcase:                          asciis generic.      (line  59)
* ascii-upper-case?:                     asciis generic.      (line  25)
* asinh:                                 glibc math.          (line  61)
* assert-general-c-buffer-and-length:    cbuffers api.        (line  33)
* assert-general-c-string-and-length:    cbuffers api.        (line  34)
* assoc:                                 srfi list spec alist.
                                                              (line  13)
* assoc*:                                lists alist.         (line  13)
* assoc* <1>:                            lists alist.         (line  14)
* assq:                                  srfi list spec alist.
                                                              (line  14)
* assv:                                  srfi list spec alist.
                                                              (line  15)
* atanh:                                 glibc math.          (line  63)
* bag:                                   srfi sets-and-bags constr.
                                                              (line   7)
* bag->alist:                            srfi sets-and-bags bag.
                                                              (line 105)
* bag->alist <1>:                        srfi sets-and-bags bag.
                                                              (line 106)
* bag->list:                             srfi sets-and-bags copy.
                                                              (line  12)
* bag->list <1>:                         srfi sets-and-bags copy.
                                                              (line  14)
* bag->set:                              srfi sets-and-bags bag.
                                                              (line  93)
* bag-adjoin:                            srfi sets-and-bags update.
                                                              (line  33)
* bag-adjoin!:                           srfi sets-and-bags update.
                                                              (line  59)
* bag-any?:                              srfi sets-and-bags whole.
                                                              (line  27)
* bag-comparator:                        srfi sets-and-bags compar.
                                                              (line   7)
* bag-contains?:                         srfi sets-and-bags preds.
                                                              (line  11)
* bag-copy:                              srfi sets-and-bags copy.
                                                              (line   7)
* bag-count:                             srfi sets-and-bags whole.
                                                              (line  22)
* bag-decrement!:                        srfi sets-and-bags bag.
                                                              (line  88)
* bag-delete:                            srfi sets-and-bags update.
                                                              (line 126)
* bag-delete!:                           srfi sets-and-bags update.
                                                              (line 147)
* bag-delete-all:                        srfi sets-and-bags update.
                                                              (line 152)
* bag-delete-all!:                       srfi sets-and-bags update.
                                                              (line 154)
* bag-difference:                        srfi sets-and-bags theory.
                                                              (line  36)
* bag-difference!:                       srfi sets-and-bags theory.
                                                              (line  70)
* bag-disjoint?:                         srfi sets-and-bags preds.
                                                              (line  20)
* bag-element-comparator:                srfi sets-and-bags access.
                                                              (line  13)
* bag-element-count:                     srfi sets-and-bags bag.
                                                              (line  55)
* bag-empty?:                            srfi sets-and-bags preds.
                                                              (line  16)
* bag-every?:                            srfi sets-and-bags whole.
                                                              (line  36)
* bag-filter:                            srfi sets-and-bags map.
                                                              (line  78)
* bag-filter!:                           srfi sets-and-bags map.
                                                              (line  84)
* bag-find:                              srfi sets-and-bags whole.
                                                              (line  12)
* bag-find <1>:                          srfi sets-and-bags whole.
                                                              (line  13)
* bag-fold:                              srfi sets-and-bags map.
                                                              (line  54)
* bag-fold-unique:                       srfi sets-and-bags bag.
                                                              (line  64)
* bag-for-each:                          srfi sets-and-bags map.
                                                              (line  49)
* bag-for-each-unique:                   srfi sets-and-bags bag.
                                                              (line  59)
* bag-increment!:                        srfi sets-and-bags bag.
                                                              (line  87)
* bag-intersection:                      srfi sets-and-bags theory.
                                                              (line  35)
* bag-intersection!:                     srfi sets-and-bags theory.
                                                              (line  69)
* bag-map:                               srfi sets-and-bags map.
                                                              (line  30)
* bag-member:                            srfi sets-and-bags access.
                                                              (line   7)
* bag-partition:                         srfi sets-and-bags map.
                                                              (line 100)
* bag-partition!:                        srfi sets-and-bags map.
                                                              (line 132)
* bag-product:                           srfi sets-and-bags bag.
                                                              (line  26)
* bag-product!:                          srfi sets-and-bags bag.
                                                              (line  48)
* bag-remove:                            srfi sets-and-bags map.
                                                              (line  89)
* bag-remove!:                           srfi sets-and-bags map.
                                                              (line  95)
* bag-replace:                           srfi sets-and-bags update.
                                                              (line 100)
* bag-replace!:                          srfi sets-and-bags update.
                                                              (line 115)
* bag-search!:                           srfi sets-and-bags update.
                                                              (line 160)
* bag-sum:                               srfi sets-and-bags bag.
                                                              (line   6)
* bag-sum!:                              srfi sets-and-bags bag.
                                                              (line  22)
* bag-unfold:                            srfi sets-and-bags constr.
                                                              (line  31)
* bag-union:                             srfi sets-and-bags theory.
                                                              (line  34)
* bag-union!:                            srfi sets-and-bags theory.
                                                              (line  68)
* bag-unique-size:                       srfi sets-and-bags bag.
                                                              (line  52)
* bag-xor:                               srfi sets-and-bags theory.
                                                              (line  37)
* bag-xor!:                              srfi sets-and-bags theory.
                                                              (line  71)
* bag<=?:                                srfi sets-and-bags subsets.
                                                              (line  54)
* bag<?:                                 srfi sets-and-bags subsets.
                                                              (line  24)
* bag=?:                                 srfi sets-and-bags subsets.
                                                              (line  10)
* bag>=?:                                srfi sets-and-bags subsets.
                                                              (line  69)
* bag>?:                                 srfi sets-and-bags subsets.
                                                              (line  39)
* bag?:                                  srfi sets-and-bags preds.
                                                              (line   7)
* beg-size:                              srfi sets-and-bags whole.
                                                              (line   7)
* begin:                                 loops qualifiers.    (line  47)
* begin <1>:                             srfi eager-comp spec qualifiers.
                                                              (line  34)
* begin0-let:                            syntaxes sequencing. (line   9)
* big:                                   words syntaxes.      (line  17)
* bignum:                                args predefined bignums.
                                                              (line   9)
* binary-heap-blend!:                    binary heaps misc.   (line  42)
* binary-heap-copy:                      binary heaps misc.   (line  11)
* binary-heap-empty?:                    binary heaps inspection.
                                                              (line  11)
* binary-heap-fill!:                     binary heaps access. (line  25)
* binary-heap-fold!:                     binary heaps misc.   (line  17)
* binary-heap-getprop:                   binary heaps objects.
                                                              (line  38)
* binary-heap-hash:                      binary heaps objects.
                                                              (line  57)
* binary-heap-merge:                     binary heaps misc.   (line  35)
* binary-heap-not-empty?:                binary heaps inspection.
                                                              (line  15)
* binary-heap-pop!:                      binary heaps access. (line  20)
* binary-heap-property-list:             binary heaps objects.
                                                              (line  48)
* binary-heap-purge!:                    binary heaps access. (line  29)
* binary-heap-push!:                     binary heaps access. (line  16)
* binary-heap-putprop:                   binary heaps objects.
                                                              (line  32)
* binary-heap-remprop:                   binary heaps objects.
                                                              (line  43)
* binary-heap-size?:                     binary heaps inspection.
                                                              (line  19)
* binary-heap-sort-to-list!:             binary heaps sorting.
                                                              (line  11)
* binary-heap-top:                       binary heaps access. (line  11)
* binary-heap?:                          binary heaps objects.
                                                              (line  25)
* binary-node-leaf?:                     bst bnodes pred.     (line  31)
* binary-node-left:                      bst bnodes access.   (line  16)
* binary-node-left-set!:                 bst bnodes access.   (line  21)
* binary-node-parent:                    bst bnodes access.   (line  11)
* binary-node-parent-and-child?:         bst bnodes pred.     (line  21)
* binary-node-parent-and-left-child?:    bst bnodes pred.     (line  11)
* binary-node-parent-and-right-child?:   bst bnodes pred.     (line  16)
* binary-node-replace-in-parent!:        bst bnodes access.   (line  40)
* binary-node-right:                     bst bnodes access.   (line  28)
* binary-node-right-set!:                bst bnodes access.   (line  33)
* binary-node-root?:                     bst bnodes pred.     (line  26)
* binary-node?:                          bst bnodes objects.  (line  38)
* binary-port:                           args predefined ports.
                                                              (line  26)
* binary-port/false:                     args predefined ports.
                                                              (line  30)
* binary-tree-begin-breadth-first-backwards: bst bnodes iterating breadth-first.
                                                              (line  73)
* binary-tree-begin-breadth-first-forwards: bst bnodes iterating breadth-first.
                                                              (line  38)
* binary-tree-begin-in-order-backwards:  bst bnodes iterating in-order.
                                                              (line  90)
* binary-tree-begin-in-order-forwards:   bst bnodes iterating in-order.
                                                              (line  65)
* binary-tree-begin-level-order-backwards: bst bnodes iterating level-order.
                                                              (line  65)
* binary-tree-begin-level-order-forwards: bst bnodes iterating level-order.
                                                              (line  40)
* binary-tree-begin-post-order-backwards: bst bnodes iterating post-order.
                                                              (line  60)
* binary-tree-begin-post-order-forwards: bst bnodes iterating post-order.
                                                              (line  35)
* binary-tree-begin-pre-order-backwards: bst bnodes iterating pre-order.
                                                              (line  63)
* binary-tree-begin-pre-order-forwards:  bst bnodes iterating pre-order.
                                                              (line  38)
* binary-tree-deepest-left-leaf:         bst bnodes searching.
                                                              (line  78)
* binary-tree-deepest-right-leaf:        bst bnodes searching.
                                                              (line  95)
* binary-tree-depth:                     bst bnodes inspect.  (line  11)
* binary-tree-find:                      bst bnodes searching.
                                                              (line  49)
* binary-tree-find <1>:                  bst bnodes searching.
                                                              (line  50)
* binary-tree-fold-breadth-first-backwards: bst bnodes iterating breadth-first.
                                                              (line  66)
* binary-tree-fold-breadth-first-forwards: bst bnodes iterating breadth-first.
                                                              (line  31)
* binary-tree-fold-in-order-backwards:   bst bnodes iterating in-order.
                                                              (line  83)
* binary-tree-fold-in-order-forwards:    bst bnodes iterating in-order.
                                                              (line  58)
* binary-tree-fold-level-order-backwards: bst bnodes iterating level-order.
                                                              (line  58)
* binary-tree-fold-level-order-forwards: bst bnodes iterating level-order.
                                                              (line  33)
* binary-tree-fold-post-order-backwards: bst bnodes iterating post-order.
                                                              (line  53)
* binary-tree-fold-post-order-forwards:  bst bnodes iterating post-order.
                                                              (line  28)
* binary-tree-fold-pre-order-backwards:  bst bnodes iterating pre-order.
                                                              (line  56)
* binary-tree-fold-pre-order-forwards:   bst bnodes iterating pre-order.
                                                              (line  31)
* binary-tree-maximum:                   bst bnodes searching.
                                                              (line  35)
* binary-tree-maximum <1>:               bst bnodes searching.
                                                              (line  36)
* binary-tree-minimum:                   bst bnodes searching.
                                                              (line  21)
* binary-tree-minimum <1>:               bst bnodes searching.
                                                              (line  22)
* binary-tree-root:                      bst bnodes searching.
                                                              (line  11)
* binary-tree-step-breadth-first-backwards: bst bnodes iterating breadth-first.
                                                              (line  86)
* binary-tree-step-breadth-first-forwards: bst bnodes iterating breadth-first.
                                                              (line  51)
* binary-tree-step-in-order-backwards:   bst bnodes iterating in-order.
                                                              (line  98)
* binary-tree-step-in-order-forwards:    bst bnodes iterating in-order.
                                                              (line  73)
* binary-tree-step-level-order-backwards: bst bnodes iterating level-order.
                                                              (line  73)
* binary-tree-step-level-order-forwards: bst bnodes iterating level-order.
                                                              (line  48)
* binary-tree-step-post-order-backwards: bst bnodes iterating post-order.
                                                              (line  68)
* binary-tree-step-post-order-forwards:  bst bnodes iterating post-order.
                                                              (line  43)
* binary-tree-step-pre-order-backwards:  bst bnodes iterating pre-order.
                                                              (line  71)
* binary-tree-step-pre-order-forwards:   bst bnodes iterating pre-order.
                                                              (line  46)
* binary-tree-valid?:                    bst bnodes validating.
                                                              (line  11)
* bind:                                  posix socket socket. (line  70)
* bindresvport:                          glibc net.           (line  50)
* bindresvport6:                         glibc net.           (line  51)
* bit-count on <bitvector>:              bitvectors bits.     (line  49)
* bit-ref on <bitvector>:                bitvectors bits.     (line  14)
* bit-set! on <bitvector>:               bitvectors bits.     (line   9)
* boolean:                               args predefined booleans.
                                                              (line   9)
* boolean-compare:                       comparisons atoms.   (line  18)
* boolean-compare <1>:                   srfi compare-procedures spec atom.
                                                              (line  19)
* box:                                   srfi boxes spec.     (line  10)
* box?:                                  srfi boxes spec.     (line  13)
* brace:                                 tuples.              (line  18)
* brace <1>:                             multimethods methods.
                                                              (line  18)
* break:                                 srfi list spec search.
                                                              (line 136)
* break <1>:                             lists search.        (line  50)
* break!:                                srfi list spec search.
                                                              (line 137)
* break! <1>:                            lists search.        (line  51)
* brief:                                 getopts types.       (line  50)
* brief/long-condition?:                 getopts conditions.  (line  65)
* busy?:                                 posix sel.           (line  52)
* byte:                                  args predefined bits.
                                                              (line  14)
* byte/octet:                            args predefined bits.
                                                              (line  19)
* byte/octet/false:                      args predefined bits.
                                                              (line  20)
* bytevector:                            args predefined bytevectors.
                                                              (line   9)
* bytevector->s8-list*:                  bytevectors 8 list.  (line   8)
* bytevector->u8-list*:                  bytevectors 8 list.  (line   9)
* bytevector-compound:                   bytevector compounds types.
                                                              (line  25)
* bytevector-compound-data:              bytevector compounds inspect.
                                                              (line  25)
* bytevector-compound-dequeue!:          bytevector compounds queue.
                                                              (line  12)
* bytevector-compound-empty?:            bytevector compounds inspect.
                                                              (line   9)
* bytevector-compound-enqueue!:          bytevector compounds queue.
                                                              (line   9)
* bytevector-compound-filled?:           bytevector compounds inspect.
                                                              (line  12)
* bytevector-compound-length:            bytevector compounds inspect.
                                                              (line  16)
* bytevector-compound-s8-ref:            bytevector compounds access.
                                                              (line  15)
* bytevector-compound-s8-set!:           bytevector compounds access.
                                                              (line  14)
* bytevector-compound-total-length:      bytevector compounds inspect.
                                                              (line  20)
* bytevector-compound-u8-ref:            bytevector compounds access.
                                                              (line  10)
* bytevector-compound-u8-set!:           bytevector compounds access.
                                                              (line   9)
* bytevector-compound/filled:            bytevector compounds types.
                                                              (line  30)
* bytevector-compound?:                  bytevector compounds types.
                                                              (line  14)
* bytevector-ieee-double-bigend-ref:     bytevectors utils setget.
                                                              (line 152)
* bytevector-ieee-double-bigend-scaled-ref: bytevectors utils scaled.
                                                              (line 146)
* bytevector-ieee-double-bigend-scaled-set!: bytevectors utils scaled.
                                                              (line 141)
* bytevector-ieee-double-bigend-set!:    bytevectors utils setget.
                                                              (line 146)
* bytevector-ieee-double-litend-ref:     bytevectors utils setget.
                                                              (line 149)
* bytevector-ieee-double-litend-scaled-ref: bytevectors utils scaled.
                                                              (line 145)
* bytevector-ieee-double-litend-scaled-set!: bytevectors utils scaled.
                                                              (line 140)
* bytevector-ieee-double-litend-set!:    bytevectors utils setget.
                                                              (line 143)
* bytevector-ieee-double-native-scaled-ref: bytevectors utils scaled.
                                                              (line 147)
* bytevector-ieee-double-native-scaled-set!: bytevectors utils scaled.
                                                              (line 142)
* bytevector-ieee-single-bigend-ref:     bytevectors utils setget.
                                                              (line 137)
* bytevector-ieee-single-bigend-scaled-ref: bytevectors utils scaled.
                                                              (line 133)
* bytevector-ieee-single-bigend-scaled-set!: bytevectors utils scaled.
                                                              (line 128)
* bytevector-ieee-single-bigend-set!:    bytevectors utils setget.
                                                              (line 131)
* bytevector-ieee-single-litend-ref:     bytevectors utils setget.
                                                              (line 134)
* bytevector-ieee-single-litend-scaled-ref: bytevectors utils scaled.
                                                              (line 132)
* bytevector-ieee-single-litend-scaled-set!: bytevectors utils scaled.
                                                              (line 127)
* bytevector-ieee-single-litend-set!:    bytevectors utils setget.
                                                              (line 128)
* bytevector-ieee-single-native-scaled-ref: bytevectors utils scaled.
                                                              (line 134)
* bytevector-ieee-single-native-scaled-set!: bytevectors utils scaled.
                                                              (line 129)
* bytevector-length:                     args predefined bytevectors.
                                                              (line  29)
* bytevector-pathname?:                  parser-tools unix-pathnames preds.
                                                              (line  10)
* bytevector-s16-bigend-ref:             bytevectors utils setget.
                                                              (line  68)
* bytevector-s16-bigend-scaled-ref:      bytevectors utils scaled.
                                                              (line  68)
* bytevector-s16-bigend-scaled-set!:     bytevectors utils scaled.
                                                              (line  63)
* bytevector-s16-bigend-set!:            bytevectors utils setget.
                                                              (line  62)
* bytevector-s16-litend-ref:             bytevectors utils setget.
                                                              (line  65)
* bytevector-s16-litend-scaled-ref:      bytevectors utils scaled.
                                                              (line  67)
* bytevector-s16-litend-scaled-set!:     bytevectors utils scaled.
                                                              (line  62)
* bytevector-s16-litend-set!:            bytevectors utils setget.
                                                              (line  59)
* bytevector-s16-native-scaled-ref:      bytevectors utils scaled.
                                                              (line  69)
* bytevector-s16-native-scaled-set!:     bytevectors utils scaled.
                                                              (line  64)
* bytevector-s32-bigend-ref:             bytevectors utils setget.
                                                              (line  95)
* bytevector-s32-bigend-scaled-ref:      bytevectors utils scaled.
                                                              (line  94)
* bytevector-s32-bigend-scaled-set!:     bytevectors utils scaled.
                                                              (line  89)
* bytevector-s32-bigend-set!:            bytevectors utils setget.
                                                              (line  89)
* bytevector-s32-litend-ref:             bytevectors utils setget.
                                                              (line  92)
* bytevector-s32-litend-scaled-ref:      bytevectors utils scaled.
                                                              (line  93)
* bytevector-s32-litend-scaled-set!:     bytevectors utils scaled.
                                                              (line  88)
* bytevector-s32-litend-set!:            bytevectors utils setget.
                                                              (line  86)
* bytevector-s32-native-scaled-ref:      bytevectors utils scaled.
                                                              (line  95)
* bytevector-s32-native-scaled-set!:     bytevectors utils scaled.
                                                              (line  90)
* bytevector-s64-bigend-ref:             bytevectors utils setget.
                                                              (line 122)
* bytevector-s64-bigend-scaled-ref:      bytevectors utils scaled.
                                                              (line 120)
* bytevector-s64-bigend-scaled-set!:     bytevectors utils scaled.
                                                              (line 115)
* bytevector-s64-bigend-set!:            bytevectors utils setget.
                                                              (line 116)
* bytevector-s64-litend-ref:             bytevectors utils setget.
                                                              (line 119)
* bytevector-s64-litend-scaled-ref:      bytevectors utils scaled.
                                                              (line 119)
* bytevector-s64-litend-scaled-set!:     bytevectors utils scaled.
                                                              (line 114)
* bytevector-s64-litend-set!:            bytevectors utils setget.
                                                              (line 113)
* bytevector-s64-native-scaled-ref:      bytevectors utils scaled.
                                                              (line 121)
* bytevector-s64-native-scaled-set!:     bytevectors utils scaled.
                                                              (line 116)
* bytevector-s8-any:                     bytevectors 8 pred.  (line  15)
* bytevector-s8-append:                  bytevectors 8 cons.  (line   6)
* bytevector-s8-bigend-ref:              bytevectors utils setget.
                                                              (line  41)
* bytevector-s8-bigend-scaled-ref:       bytevectors utils scaled.
                                                              (line  42)
* bytevector-s8-bigend-scaled-set!:      bytevectors utils scaled.
                                                              (line  37)
* bytevector-s8-bigend-set!:             bytevectors utils setget.
                                                              (line  35)
* bytevector-s8-ci<:                     bytevectors 8 compar lexi.
                                                              (line  81)
* bytevector-s8-ci<=:                    bytevectors 8 compar lexi.
                                                              (line  94)
* bytevector-s8-ci<>:                    bytevectors 8 compar lexi.
                                                              (line  65)
* bytevector-s8-ci=:                     bytevectors 8 compar lexi.
                                                              (line  54)
* bytevector-s8-ci>:                     bytevectors 8 compar lexi.
                                                              (line 107)
* bytevector-s8-ci>=:                    bytevectors 8 compar lexi.
                                                              (line 120)
* bytevector-s8-compare:                 bytevectors 8 compar lexi.
                                                              (line  14)
* bytevector-s8-compare-ci:              bytevectors 8 compar lexi.
                                                              (line  16)
* bytevector-s8-concatenate:             bytevectors 8 cons.  (line  12)
* bytevector-s8-concatenate-reverse:     bytevectors 8 cons.  (line  20)
* bytevector-s8-concatenate-reverse <1>: bytevectors 8 cons.  (line  22)
* bytevector-s8-concatenate-reverse <2>: bytevectors 8 cons.  (line  24)
* bytevector-s8-contains:                bytevectors 8 search.
                                                              (line  81)
* bytevector-s8-contains-ci:             bytevectors 8 search.
                                                              (line  83)
* bytevector-s8-copy*:                   bytevectors 8 select.
                                                              (line  18)
* bytevector-s8-copy*!:                  bytevectors 8 select.
                                                              (line  41)
* bytevector-s8-count:                   bytevectors 8 search.
                                                              (line  59)
* bytevector-s8-delete:                  bytevectors 8 filter.
                                                              (line  28)
* bytevector-s8-dictionary-ci<=?:        bytevectors 8 compar dict.
                                                              (line  69)
* bytevector-s8-dictionary-ci<>?:        bytevectors 8 compar dict.
                                                              (line  63)
* bytevector-s8-dictionary-ci<?:         bytevectors 8 compar dict.
                                                              (line  65)
* bytevector-s8-dictionary-ci=?:         bytevectors 8 compar dict.
                                                              (line  61)
* bytevector-s8-dictionary-ci>=?:        bytevectors 8 compar dict.
                                                              (line  71)
* bytevector-s8-dictionary-ci>?:         bytevectors 8 compar dict.
                                                              (line  67)
* bytevector-s8-dictionary-compare:      bytevectors 8 compar dict.
                                                              (line  18)
* bytevector-s8-dictionary-compare-ci:   bytevectors 8 compar dict.
                                                              (line  53)
* bytevector-s8-dictionary<=?:           bytevectors 8 compar dict.
                                                              (line  32)
* bytevector-s8-dictionary<>?:           bytevectors 8 compar dict.
                                                              (line  28)
* bytevector-s8-dictionary<?:            bytevectors 8 compar dict.
                                                              (line  30)
* bytevector-s8-dictionary=?:            bytevectors 8 compar dict.
                                                              (line  26)
* bytevector-s8-dictionary>=?:           bytevectors 8 compar dict.
                                                              (line  36)
* bytevector-s8-dictionary>?:            bytevectors 8 compar dict.
                                                              (line  34)
* bytevector-s8-downcase*:               bytevectors 8 case.  (line  28)
* bytevector-s8-downcase*!:              bytevectors 8 case.  (line  30)
* bytevector-s8-drop:                    bytevectors 8 select.
                                                              (line  77)
* bytevector-s8-drop-right:              bytevectors 8 select.
                                                              (line  79)
* bytevector-s8-every:                   bytevectors 8 pred.  (line  13)
* bytevector-s8-fill*!:                  bytevectors 8 mutate.
                                                              (line  12)
* bytevector-s8-filter:                  bytevectors 8 filter.
                                                              (line   8)
* bytevector-s8-fold:                    bytevectors 8 fold.  (line  45)
* bytevector-s8-fold-left:               bytevectors 8 fold.  (line   6)
* bytevector-s8-fold-left*:              bytevectors 8 fold.  (line  33)
* bytevector-s8-fold-right:              bytevectors 8 fold.  (line   8)
* bytevector-s8-fold-right <1>:          bytevectors 8 fold.  (line  47)
* bytevector-s8-fold-right*:             bytevectors 8 fold.  (line  35)
* bytevector-s8-for-each*:               bytevectors 8 map.   (line  43)
* bytevector-s8-index:                   bytevectors 8 search.
                                                              (line  10)
* bytevector-s8-index-right:             bytevectors 8 search.
                                                              (line  12)
* bytevector-s8-join:                    bytevectors 8 list.  (line  38)
* bytevector-s8-join <1>:                bytevectors 8 list.  (line  40)
* bytevector-s8-join <2>:                bytevectors 8 list.  (line  42)
* bytevector-s8-litend-ref:              bytevectors utils setget.
                                                              (line  38)
* bytevector-s8-litend-scaled-ref:       bytevectors utils scaled.
                                                              (line  41)
* bytevector-s8-litend-scaled-set!:      bytevectors utils scaled.
                                                              (line  36)
* bytevector-s8-litend-set!:             bytevectors utils setget.
                                                              (line  32)
* bytevector-s8-map:                     bytevectors 8 map.   (line   6)
* bytevector-s8-map!:                    bytevectors 8 map.   (line  23)
* bytevector-s8-map*!:                   bytevectors 8 map.   (line  25)
* bytevector-s8-native-scaled-ref:       bytevectors utils scaled.
                                                              (line  43)
* bytevector-s8-native-scaled-set!:      bytevectors utils scaled.
                                                              (line  38)
* bytevector-s8-pad:                     bytevectors 8 pad.   (line  10)
* bytevector-s8-pad <1>:                 bytevectors 8 pad.   (line  12)
* bytevector-s8-pad-right:               bytevectors 8 pad.   (line  14)
* bytevector-s8-pad-right <1>:           bytevectors 8 pad.   (line  16)
* bytevector-s8-prefix-ci?:              bytevectors 8 prefix.
                                                              (line  45)
* bytevector-s8-prefix-length:           bytevectors 8 prefix.
                                                              (line  14)
* bytevector-s8-prefix-length-ci:        bytevectors 8 prefix.
                                                              (line  16)
* bytevector-s8-prefix?:                 bytevectors 8 prefix.
                                                              (line  43)
* bytevector-s8-replace:                 bytevectors 8 misc.  (line   8)
* bytevector-s8-reverse:                 bytevectors 8 misc.  (line  17)
* bytevector-s8-reverse!:                bytevectors 8 misc.  (line  19)
* bytevector-s8-reverse-copy*:           bytevectors 8 select.
                                                              (line  32)
* bytevector-s8-reverse-copy*!:          bytevectors 8 select.
                                                              (line  56)
* bytevector-s8-skip:                    bytevectors 8 search.
                                                              (line  35)
* bytevector-s8-skip-right:              bytevectors 8 search.
                                                              (line  37)
* bytevector-s8-suffix-ci?:              bytevectors 8 prefix.
                                                              (line  59)
* bytevector-s8-suffix-length:           bytevectors 8 prefix.
                                                              (line  30)
* bytevector-s8-suffix-length-ci:        bytevectors 8 prefix.
                                                              (line  32)
* bytevector-s8-suffix?:                 bytevectors 8 prefix.
                                                              (line  57)
* bytevector-s8-swap!:                   bytevectors 8 mutate.
                                                              (line   6)
* bytevector-s8-tabulate:                bytevectors 8 cons.  (line  38)
* bytevector-s8-take:                    bytevectors 8 select.
                                                              (line  66)
* bytevector-s8-take-right:              bytevectors 8 select.
                                                              (line  68)
* bytevector-s8-titlecase*:              bytevectors 8 case.  (line   8)
* bytevector-s8-titlecase*!:             bytevectors 8 case.  (line  10)
* bytevector-s8-tokenise:                bytevectors 8 list.  (line  31)
* bytevector-s8-tokenize:                bytevectors 8 list.  (line  29)
* bytevector-s8-trim:                    bytevectors 8 pad.   (line  37)
* bytevector-s8-trim-both:               bytevectors 8 pad.   (line  41)
* bytevector-s8-trim-right:              bytevectors 8 pad.   (line  39)
* bytevector-s8-unfold:                  bytevectors 8 fold.  (line  92)
* bytevector-s8-unfold <1>:              bytevectors 8 fold.  (line  94)
* bytevector-s8-unfold <2>:              bytevectors 8 fold.  (line  98)
* bytevector-s8-unfold-right:            bytevectors 8 fold.  (line 137)
* bytevector-s8-unfold-right <1>:        bytevectors 8 fold.  (line 141)
* bytevector-s8-unfold-right <2>:        bytevectors 8 fold.  (line 145)
* bytevector-s8-upcase*:                 bytevectors 8 case.  (line  24)
* bytevector-s8-upcase*!:                bytevectors 8 case.  (line  26)
* bytevector-s8-xcopy!:                  bytevectors 8 replicate.
                                                              (line  44)
* bytevector-s8/numbers-ci<=?:           bytevectors 8 compar number.
                                                              (line  81)
* bytevector-s8/numbers-ci<>?:           bytevectors 8 compar number.
                                                              (line  75)
* bytevector-s8/numbers-ci<?:            bytevectors 8 compar number.
                                                              (line  77)
* bytevector-s8/numbers-ci=?:            bytevectors 8 compar number.
                                                              (line  73)
* bytevector-s8/numbers-ci>=?:           bytevectors 8 compar number.
                                                              (line  83)
* bytevector-s8/numbers-ci>?:            bytevectors 8 compar number.
                                                              (line  79)
* bytevector-s8/numbers-compare:         bytevectors 8 compar number.
                                                              (line  28)
* bytevector-s8/numbers-compare-ci:      bytevectors 8 compar number.
                                                              (line  64)
* bytevector-s8/numbers-dictionary-ci<=?: bytevectors 8 compar dictnumber.
                                                              (line  66)
* bytevector-s8/numbers-dictionary-ci<>?: bytevectors 8 compar dictnumber.
                                                              (line  60)
* bytevector-s8/numbers-dictionary-ci<?: bytevectors 8 compar dictnumber.
                                                              (line  62)
* bytevector-s8/numbers-dictionary-ci=?: bytevectors 8 compar dictnumber.
                                                              (line  58)
* bytevector-s8/numbers-dictionary-ci>=?: bytevectors 8 compar dictnumber.
                                                              (line  68)
* bytevector-s8/numbers-dictionary-ci>?: bytevectors 8 compar dictnumber.
                                                              (line  64)
* bytevector-s8/numbers-dictionary-compare: bytevectors 8 compar dictnumber.
                                                              (line  13)
* bytevector-s8/numbers-dictionary-compare-ci: bytevectors 8 compar dictnumber.
                                                              (line  49)
* bytevector-s8/numbers-dictionary<=?:   bytevectors 8 compar dictnumber.
                                                              (line  28)
* bytevector-s8/numbers-dictionary<>?:   bytevectors 8 compar dictnumber.
                                                              (line  24)
* bytevector-s8/numbers-dictionary<?:    bytevectors 8 compar dictnumber.
                                                              (line  26)
* bytevector-s8/numbers-dictionary=?:    bytevectors 8 compar dictnumber.
                                                              (line  22)
* bytevector-s8/numbers-dictionary>=?:   bytevectors 8 compar dictnumber.
                                                              (line  32)
* bytevector-s8/numbers-dictionary>?:    bytevectors 8 compar dictnumber.
                                                              (line  30)
* bytevector-s8/numbers<=?:              bytevectors 8 compar number.
                                                              (line  43)
* bytevector-s8/numbers<>?:              bytevectors 8 compar number.
                                                              (line  39)
* bytevector-s8/numbers<?:               bytevectors 8 compar number.
                                                              (line  41)
* bytevector-s8/numbers=?:               bytevectors 8 compar number.
                                                              (line  37)
* bytevector-s8/numbers>=?:              bytevectors 8 compar number.
                                                              (line  47)
* bytevector-s8/numbers>?:               bytevectors 8 compar number.
                                                              (line  45)
* bytevector-s8<:                        bytevectors 8 compar lexi.
                                                              (line  79)
* bytevector-s8<=:                       bytevectors 8 compar lexi.
                                                              (line  92)
* bytevector-s8<>:                       bytevectors 8 compar lexi.
                                                              (line  63)
* bytevector-s8=:                        bytevectors 8 compar lexi.
                                                              (line  52)
* bytevector-s8>:                        bytevectors 8 compar lexi.
                                                              (line 105)
* bytevector-s8>=:                       bytevectors 8 compar lexi.
                                                              (line 118)
* bytevector-segment?:                   parser-tools unix-pathnames preds.
                                                              (line  24)
* bytevector-u16-bigend-ref:             bytevectors utils setget.
                                                              (line  56)
* bytevector-u16-bigend-scaled-ref:      bytevectors utils scaled.
                                                              (line  55)
* bytevector-u16-bigend-scaled-set!:     bytevectors utils scaled.
                                                              (line  50)
* bytevector-u16-bigend-set!:            bytevectors utils setget.
                                                              (line  50)
* bytevector-u16-litend-ref:             bytevectors utils setget.
                                                              (line  53)
* bytevector-u16-litend-scaled-ref:      bytevectors utils scaled.
                                                              (line  54)
* bytevector-u16-litend-scaled-set!:     bytevectors utils scaled.
                                                              (line  49)
* bytevector-u16-litend-set!:            bytevectors utils setget.
                                                              (line  47)
* bytevector-u16-native-scaled-ref:      bytevectors utils scaled.
                                                              (line  56)
* bytevector-u16-native-scaled-set!:     bytevectors utils scaled.
                                                              (line  51)
* bytevector-u32-bigend-ref:             bytevectors utils setget.
                                                              (line  83)
* bytevector-u32-bigend-scaled-ref:      bytevectors utils scaled.
                                                              (line  81)
* bytevector-u32-bigend-scaled-set!:     bytevectors utils scaled.
                                                              (line  76)
* bytevector-u32-bigend-set!:            bytevectors utils setget.
                                                              (line  77)
* bytevector-u32-litend-ref:             bytevectors utils setget.
                                                              (line  80)
* bytevector-u32-litend-scaled-ref:      bytevectors utils scaled.
                                                              (line  80)
* bytevector-u32-litend-scaled-set!:     bytevectors utils scaled.
                                                              (line  75)
* bytevector-u32-litend-set!:            bytevectors utils setget.
                                                              (line  74)
* bytevector-u32-native-scaled-ref:      bytevectors utils scaled.
                                                              (line  82)
* bytevector-u32-native-scaled-set!:     bytevectors utils scaled.
                                                              (line  77)
* bytevector-u64-bigend-ref:             bytevectors utils setget.
                                                              (line 110)
* bytevector-u64-bigend-scaled-ref:      bytevectors utils scaled.
                                                              (line 107)
* bytevector-u64-bigend-scaled-set!:     bytevectors utils scaled.
                                                              (line 102)
* bytevector-u64-bigend-set!:            bytevectors utils setget.
                                                              (line 104)
* bytevector-u64-litend-ref:             bytevectors utils setget.
                                                              (line 107)
* bytevector-u64-litend-scaled-ref:      bytevectors utils scaled.
                                                              (line 106)
* bytevector-u64-litend-scaled-set!:     bytevectors utils scaled.
                                                              (line 101)
* bytevector-u64-litend-set!:            bytevectors utils setget.
                                                              (line 101)
* bytevector-u64-native-scaled-ref:      bytevectors utils scaled.
                                                              (line 108)
* bytevector-u64-native-scaled-set!:     bytevectors utils scaled.
                                                              (line 103)
* bytevector-u8-any:                     bytevectors 8 pred.  (line  16)
* bytevector-u8-append:                  bytevectors 8 cons.  (line   7)
* bytevector-u8-bigend-ref:              bytevectors utils setget.
                                                              (line  29)
* bytevector-u8-bigend-scaled-ref:       bytevectors utils scaled.
                                                              (line  25)
* bytevector-u8-bigend-scaled-set!:      bytevectors utils scaled.
                                                              (line  20)
* bytevector-u8-bigend-set!:             bytevectors utils setget.
                                                              (line  22)
* bytevector-u8-ci<:                     bytevectors 8 compar lexi.
                                                              (line  82)
* bytevector-u8-ci<=:                    bytevectors 8 compar lexi.
                                                              (line  95)
* bytevector-u8-ci<>:                    bytevectors 8 compar lexi.
                                                              (line  66)
* bytevector-u8-ci=:                     bytevectors 8 compar lexi.
                                                              (line  55)
* bytevector-u8-ci>:                     bytevectors 8 compar lexi.
                                                              (line 108)
* bytevector-u8-ci>=:                    bytevectors 8 compar lexi.
                                                              (line 121)
* bytevector-u8-compare:                 bytevectors 8 compar lexi.
                                                              (line  15)
* bytevector-u8-compare-ci:              bytevectors 8 compar lexi.
                                                              (line  17)
* bytevector-u8-concatenate:             bytevectors 8 cons.  (line  11)
* bytevector-u8-concatenate-reverse:     bytevectors 8 cons.  (line  21)
* bytevector-u8-concatenate-reverse <1>: bytevectors 8 cons.  (line  23)
* bytevector-u8-concatenate-reverse <2>: bytevectors 8 cons.  (line  25)
* bytevector-u8-contains:                bytevectors 8 search.
                                                              (line  82)
* bytevector-u8-contains-ci:             bytevectors 8 search.
                                                              (line  84)
* bytevector-u8-copy*:                   bytevectors 8 select.
                                                              (line  19)
* bytevector-u8-copy*!:                  bytevectors 8 select.
                                                              (line  42)
* bytevector-u8-count:                   bytevectors 8 search.
                                                              (line  60)
* bytevector-u8-delete:                  bytevectors 8 filter.
                                                              (line  29)
* bytevector-u8-dictionary-ci<=?:        bytevectors 8 compar dict.
                                                              (line  70)
* bytevector-u8-dictionary-ci<>?:        bytevectors 8 compar dict.
                                                              (line  64)
* bytevector-u8-dictionary-ci<?:         bytevectors 8 compar dict.
                                                              (line  66)
* bytevector-u8-dictionary-ci=?:         bytevectors 8 compar dict.
                                                              (line  62)
* bytevector-u8-dictionary-ci>=?:        bytevectors 8 compar dict.
                                                              (line  72)
* bytevector-u8-dictionary-ci>?:         bytevectors 8 compar dict.
                                                              (line  68)
* bytevector-u8-dictionary-compare:      bytevectors 8 compar dict.
                                                              (line  19)
* bytevector-u8-dictionary-compare-ci:   bytevectors 8 compar dict.
                                                              (line  54)
* bytevector-u8-dictionary<=?:           bytevectors 8 compar dict.
                                                              (line  33)
* bytevector-u8-dictionary<>?:           bytevectors 8 compar dict.
                                                              (line  29)
* bytevector-u8-dictionary<?:            bytevectors 8 compar dict.
                                                              (line  31)
* bytevector-u8-dictionary=?:            bytevectors 8 compar dict.
                                                              (line  27)
* bytevector-u8-dictionary>=?:           bytevectors 8 compar dict.
                                                              (line  37)
* bytevector-u8-dictionary>?:            bytevectors 8 compar dict.
                                                              (line  35)
* bytevector-u8-downcase*:               bytevectors 8 case.  (line  29)
* bytevector-u8-downcase*!:              bytevectors 8 case.  (line  31)
* bytevector-u8-drop:                    bytevectors 8 select.
                                                              (line  78)
* bytevector-u8-drop-right:              bytevectors 8 select.
                                                              (line  80)
* bytevector-u8-every:                   bytevectors 8 pred.  (line  14)
* bytevector-u8-fill*!:                  bytevectors 8 mutate.
                                                              (line  13)
* bytevector-u8-filter:                  bytevectors 8 filter.
                                                              (line   9)
* bytevector-u8-fold:                    bytevectors 8 fold.  (line  46)
* bytevector-u8-fold-left:               bytevectors 8 fold.  (line   7)
* bytevector-u8-fold-left*:              bytevectors 8 fold.  (line  34)
* bytevector-u8-fold-right:              bytevectors 8 fold.  (line   9)
* bytevector-u8-fold-right <1>:          bytevectors 8 fold.  (line  48)
* bytevector-u8-fold-right*:             bytevectors 8 fold.  (line  36)
* bytevector-u8-for-each*:               bytevectors 8 map.   (line  44)
* bytevector-u8-index:                   bytevectors 8 search.
                                                              (line  11)
* bytevector-u8-index-right:             bytevectors 8 search.
                                                              (line  13)
* bytevector-u8-join:                    bytevectors 8 list.  (line  39)
* bytevector-u8-join <1>:                bytevectors 8 list.  (line  41)
* bytevector-u8-join <2>:                bytevectors 8 list.  (line  43)
* bytevector-u8-litend-ref:              bytevectors utils setget.
                                                              (line  26)
* bytevector-u8-litend-scaled-ref:       bytevectors utils scaled.
                                                              (line  24)
* bytevector-u8-litend-scaled-set!:      bytevectors utils scaled.
                                                              (line  19)
* bytevector-u8-litend-set!:             bytevectors utils setget.
                                                              (line  18)
* bytevector-u8-map:                     bytevectors 8 map.   (line   7)
* bytevector-u8-map!:                    bytevectors 8 map.   (line  24)
* bytevector-u8-map*!:                   bytevectors 8 map.   (line  26)
* bytevector-u8-native-scaled-ref:       bytevectors utils scaled.
                                                              (line  26)
* bytevector-u8-native-scaled-set!:      bytevectors utils scaled.
                                                              (line  21)
* bytevector-u8-null?:                   bytevectors 8 pred.  (line   6)
* bytevector-u8-pad:                     bytevectors 8 pad.   (line  11)
* bytevector-u8-pad <1>:                 bytevectors 8 pad.   (line  13)
* bytevector-u8-pad-right:               bytevectors 8 pad.   (line  15)
* bytevector-u8-pad-right <1>:           bytevectors 8 pad.   (line  17)
* bytevector-u8-prefix-ci?:              bytevectors 8 prefix.
                                                              (line  46)
* bytevector-u8-prefix-length:           bytevectors 8 prefix.
                                                              (line  15)
* bytevector-u8-prefix-length-ci:        bytevectors 8 prefix.
                                                              (line  17)
* bytevector-u8-prefix?:                 bytevectors 8 prefix.
                                                              (line  44)
* bytevector-u8-replace:                 bytevectors 8 misc.  (line   9)
* bytevector-u8-reverse:                 bytevectors 8 misc.  (line  18)
* bytevector-u8-reverse!:                bytevectors 8 misc.  (line  20)
* bytevector-u8-reverse-copy*:           bytevectors 8 select.
                                                              (line  33)
* bytevector-u8-reverse-copy*!:          bytevectors 8 select.
                                                              (line  57)
* bytevector-u8-skip:                    bytevectors 8 search.
                                                              (line  36)
* bytevector-u8-skip-right:              bytevectors 8 search.
                                                              (line  38)
* bytevector-u8-suffix-ci?:              bytevectors 8 prefix.
                                                              (line  60)
* bytevector-u8-suffix-length:           bytevectors 8 prefix.
                                                              (line  31)
* bytevector-u8-suffix-length-ci:        bytevectors 8 prefix.
                                                              (line  33)
* bytevector-u8-suffix?:                 bytevectors 8 prefix.
                                                              (line  58)
* bytevector-u8-swap!:                   bytevectors 8 mutate.
                                                              (line   7)
* bytevector-u8-tabulate:                bytevectors 8 cons.  (line  39)
* bytevector-u8-take:                    bytevectors 8 select.
                                                              (line  67)
* bytevector-u8-take-right:              bytevectors 8 select.
                                                              (line  69)
* bytevector-u8-titlecase*:              bytevectors 8 case.  (line   9)
* bytevector-u8-titlecase*!:             bytevectors 8 case.  (line  11)
* bytevector-u8-tokenise:                bytevectors 8 list.  (line  32)
* bytevector-u8-tokenize:                bytevectors 8 list.  (line  30)
* bytevector-u8-trim:                    bytevectors 8 pad.   (line  38)
* bytevector-u8-trim-both:               bytevectors 8 pad.   (line  42)
* bytevector-u8-trim-right:              bytevectors 8 pad.   (line  40)
* bytevector-u8-unfold:                  bytevectors 8 fold.  (line  93)
* bytevector-u8-unfold <1>:              bytevectors 8 fold.  (line  96)
* bytevector-u8-unfold <2>:              bytevectors 8 fold.  (line 100)
* bytevector-u8-unfold-right:            bytevectors 8 fold.  (line 139)
* bytevector-u8-unfold-right <1>:        bytevectors 8 fold.  (line 143)
* bytevector-u8-unfold-right <2>:        bytevectors 8 fold.  (line 147)
* bytevector-u8-upcase*:                 bytevectors 8 case.  (line  25)
* bytevector-u8-upcase*!:                bytevectors 8 case.  (line  27)
* bytevector-u8-xcopy!:                  bytevectors 8 replicate.
                                                              (line  45)
* bytevector-u8/numbers-ci<=?:           bytevectors 8 compar number.
                                                              (line  82)
* bytevector-u8/numbers-ci<>?:           bytevectors 8 compar number.
                                                              (line  76)
* bytevector-u8/numbers-ci<?:            bytevectors 8 compar number.
                                                              (line  78)
* bytevector-u8/numbers-ci=?:            bytevectors 8 compar number.
                                                              (line  74)
* bytevector-u8/numbers-ci>=?:           bytevectors 8 compar number.
                                                              (line  84)
* bytevector-u8/numbers-ci>?:            bytevectors 8 compar number.
                                                              (line  80)
* bytevector-u8/numbers-compare:         bytevectors 8 compar number.
                                                              (line  29)
* bytevector-u8/numbers-compare-ci:      bytevectors 8 compar number.
                                                              (line  65)
* bytevector-u8/numbers-dictionary-ci<=?: bytevectors 8 compar dictnumber.
                                                              (line  67)
* bytevector-u8/numbers-dictionary-ci<>?: bytevectors 8 compar dictnumber.
                                                              (line  61)
* bytevector-u8/numbers-dictionary-ci<?: bytevectors 8 compar dictnumber.
                                                              (line  63)
* bytevector-u8/numbers-dictionary-ci=?: bytevectors 8 compar dictnumber.
                                                              (line  59)
* bytevector-u8/numbers-dictionary-ci>=?: bytevectors 8 compar dictnumber.
                                                              (line  69)
* bytevector-u8/numbers-dictionary-ci>?: bytevectors 8 compar dictnumber.
                                                              (line  65)
* bytevector-u8/numbers-dictionary-compare: bytevectors 8 compar dictnumber.
                                                              (line  14)
* bytevector-u8/numbers-dictionary-compare-ci: bytevectors 8 compar dictnumber.
                                                              (line  50)
* bytevector-u8/numbers-dictionary<=?:   bytevectors 8 compar dictnumber.
                                                              (line  29)
* bytevector-u8/numbers-dictionary<>?:   bytevectors 8 compar dictnumber.
                                                              (line  25)
* bytevector-u8/numbers-dictionary<?:    bytevectors 8 compar dictnumber.
                                                              (line  27)
* bytevector-u8/numbers-dictionary=?:    bytevectors 8 compar dictnumber.
                                                              (line  23)
* bytevector-u8/numbers-dictionary>=?:   bytevectors 8 compar dictnumber.
                                                              (line  33)
* bytevector-u8/numbers-dictionary>?:    bytevectors 8 compar dictnumber.
                                                              (line  31)
* bytevector-u8/numbers<=?:              bytevectors 8 compar number.
                                                              (line  44)
* bytevector-u8/numbers<>?:              bytevectors 8 compar number.
                                                              (line  40)
* bytevector-u8/numbers<?:               bytevectors 8 compar number.
                                                              (line  42)
* bytevector-u8/numbers=?:               bytevectors 8 compar number.
                                                              (line  38)
* bytevector-u8/numbers>=?:              bytevectors 8 compar number.
                                                              (line  48)
* bytevector-u8/numbers>?:               bytevectors 8 compar number.
                                                              (line  46)
* bytevector-u8<:                        bytevectors 8 compar lexi.
                                                              (line  80)
* bytevector-u8<=:                       bytevectors 8 compar lexi.
                                                              (line  93)
* bytevector-u8<>:                       bytevectors 8 compar lexi.
                                                              (line  64)
* bytevector-u8=:                        bytevectors 8 compar lexi.
                                                              (line  53)
* bytevector-u8>:                        bytevectors 8 compar lexi.
                                                              (line 106)
* bytevector-u8>=:                       bytevectors 8 compar lexi.
                                                              (line 119)
* bytevector/false:                      args predefined bytevectors.
                                                              (line  12)
* c-callback:                            args predefined pointers.
                                                              (line  18)
* c-callback/false:                      args predefined pointers.
                                                              (line  21)
* c...r:                                 srfi list spec select.
                                                              (line  19)
* caar:                                  srfi list spec select.
                                                              (line  17)
* caar <1>:                              srfi ralists spec random.
                                                              (line 172)
* cacos:                                 glibc math.          (line  30)
* cacosh:                                glibc math.          (line  72)
* cadr:                                  srfi list spec select.
                                                              (line  18)
* cadr <1>:                              srfi ralists spec random.
                                                              (line 173)
* call-next-method:                      multimethods next.   (line  12)
* call-with-socket:                      srfi basic-socket spec control.
                                                              (line   9)
* callable:                              callables.           (line  22)
* callable-object:                       callables.           (line  30)
* callable?:                             callables.           (line  26)
* callet:                                syntaxes misc.       (line   9)
* callet*:                               syntaxes misc.       (line  26)
* car:                                   srfi list spec select.
                                                              (line   6)
* car <1>:                               srfi ralists spec random.
                                                              (line 155)
* car+cdr:                               srfi list spec select.
                                                              (line  51)
* car+cdr <1>:                           lists select.        (line  27)
* case-endianness:                       words syntaxes.      (line  13)
* case-endianness <1>:                   words syntaxes.      (line  15)
* case-errno:                            errno.               (line  18)
* case-errno <1>:                        errno.               (line  19)
* case-lambda:                           srfi case-lambda spec.
                                                              (line   6)
* case-word-size:                        words syntaxes.      (line   9)
* casin:                                 glibc math.          (line  29)
* casinh:                                glibc math.          (line  71)
* catan:                                 glibc math.          (line  31)
* catanh:                                glibc math.          (line  73)
* ccos:                                  glibc math.          (line  25)
* ccosh:                                 glibc math.          (line  67)
* cdddar:                                srfi list spec select.
                                                              (line  20)
* cdddar <1>:                            srfi ralists spec random.
                                                              (line 175)
* cddddr:                                srfi list spec select.
                                                              (line  21)
* cddddr <1>:                            srfi ralists spec random.
                                                              (line 176)
* cdr:                                   srfi list spec select.
                                                              (line   7)
* cdr <1>:                               srfi ralists spec random.
                                                              (line 164)
* cexp:                                  glibc math.          (line  37)
* CFLAGS:                                gcc.                 (line  76)
* cflonum:                               args predefined cflonums.
                                                              (line   9)
* chain:                                 chains objects.      (line  29)
* chain->list:                           chains conversion.   (line  11)
* chain->vector:                         chains conversion.   (line  17)
* chain-append-forwards:                 chains ops.          (line  23)
* chain-backwards-length?:               chains inspection.   (line  23)
* chain-copy-forwards:                   chains ops.          (line  11)
* chain-exists-forwards:                 chains searching.    (line  22)
* chain-filter-forwards:                 chains filtering.    (line  11)
* chain-filter-forwards <1>:             chains filtering.    (line  12)
* chain-find-forwards:                   chains searching.    (line  34)
* chain-find-forwards <1>:               chains searching.    (line  35)
* chain-fold-left-backwards:             chains folding.      (line  54)
* chain-fold-left-forwards:              chains folding.      (line  11)
* chain-fold-right-backwards:            chains folding.      (line  75)
* chain-fold-right-forwards:             chains folding.      (line  32)
* chain-for-all-forwards:                chains searching.    (line  11)
* chain-for-each-forwards:               chains mapping.      (line  19)
* chain-forwards-length?:                chains inspection.   (line  17)
* chain-front:                           chains access.       (line  35)
* chain-index-backwards!:                chains access.       (line 103)
* chain-index-forwards!:                 chains access.       (line  89)
* chain-length?:                         chains inspection.   (line  11)
* chain-link-getprop:                    chains objects.      (line  55)
* chain-link-hash:                       chains objects.      (line  74)
* chain-link-next:                       chains access.       (line  11)
* chain-link-next-set!:                  chains access.       (line  21)
* chain-link-prev:                       chains access.       (line  16)
* chain-link-prev-set!:                  chains access.       (line  28)
* chain-link-property-list:              chains objects.      (line  65)
* chain-link-putprop:                    chains objects.      (line  49)
* chain-link-ref:                        chains objects.      (line  38)
* chain-link-remove!:                    chains access.       (line  73)
* chain-link-remprop:                    chains objects.      (line  60)
* chain-link-set!:                       chains objects.      (line  42)
* chain-link?:                           chains objects.      (line  25)
* chain-map-forwards:                    chains mapping.      (line  11)
* chain-partition-forwards:              chains filtering.    (line  18)
* chain-partition-forwards <1>:          chains filtering.    (line  19)
* chain-pop-front!:                      chains access.       (line  59)
* chain-pop-rear!:                       chains access.       (line  66)
* chain-push-front!:                     chains access.       (line  47)
* chain-push-rear!:                      chains access.       (line  53)
* chain-rear:                            chains access.       (line  41)
* chain-reverse-forwards:                chains ops.          (line  17)
* chain-sort-forwards:                   chains sort.         (line  11)
* chain<=?:                              comparisons pred.    (line  86)
* chain<=? <1>:                          srfi compare-procedures spec using.
                                                              (line 193)
* chain<?:                               comparisons pred.    (line  84)
* chain<? <1>:                           srfi compare-procedures spec using.
                                                              (line 191)
* chain=?:                               comparisons pred.    (line  83)
* chain=? <1>:                           srfi compare-procedures spec using.
                                                              (line 190)
* chain>=?:                              comparisons pred.    (line  87)
* chain>=? <1>:                          srfi compare-procedures spec using.
                                                              (line 194)
* chain>?:                               comparisons pred.    (line  85)
* chain>? <1>:                           srfi compare-procedures spec using.
                                                              (line 192)
* chain?:                                chains objects.      (line  34)
* char:                                  args predefined chars.
                                                              (line   9)
* char-compare:                          comparisons atoms.   (line  23)
* char-compare <1>:                      srfi compare-procedures spec atom.
                                                              (line  25)
* char-compare-ci:                       comparisons atoms.   (line  24)
* char-compare-ci <1>:                   srfi compare-procedures spec atom.
                                                              (line  26)
* char-in-ascii-range:                   args predefined chars.
                                                              (line  14)
* char-in-ascii-range/false:             args predefined chars.
                                                              (line  15)
* char-set:                              srfi char-sets spec create.
                                                              (line  12)
* char-set <1>:                          char-sets make.      (line   6)
* char-set->list:                        srfi char-sets spec query.
                                                              (line  13)
* char-set->list <1>:                    char-sets ops.       (line  81)
* char-set->sre:                         srfi regexps procs.  (line  49)
* char-set->string:                      srfi char-sets spec query.
                                                              (line  18)
* char-set->string <1>:                  char-sets ops.       (line  95)
* char-set-add:                          char-sets make.      (line  13)
* char-set-add!:                         char-sets make.      (line  19)
* char-set-adjoin:                       srfi char-sets spec algebra.
                                                              (line   6)
* char-set-adjoin <1>:                   char-sets make.      (line  14)
* char-set-adjoin!:                      srfi char-sets spec algebra.
                                                              (line  10)
* char-set-adjoin! <1>:                  char-sets make.      (line  20)
* char-set-any:                          srfi char-sets spec query.
                                                              (line  27)
* char-set-any <1>:                      char-sets ops.       (line  70)
* char-set-complement:                   srfi char-sets spec algebra.
                                                              (line  15)
* char-set-complement <1>:               char-sets ops.       (line  42)
* char-set-complement <2>:               char-sets ops.       (line  43)
* char-set-complement!:                  srfi char-sets spec algebra.
                                                              (line  50)
* char-set-contains?:                    srfi char-sets spec query.
                                                              (line  23)
* char-set-contains? <1>:                char-sets pred.      (line  19)
* char-set-copy:                         srfi char-sets spec create.
                                                              (line   6)
* char-set-copy <1>:                     char-sets make.      (line  10)
* char-set-count:                        srfi char-sets spec query.
                                                              (line   9)
* char-set-count <1>:                    char-sets inspect.   (line  10)
* char-set-cursor:                       srfi char-sets spec iter.
                                                              (line   6)
* char-set-cursor <1>:                   char-sets ops.       (line  99)
* char-set-cursor-next:                  srfi char-sets spec iter.
                                                              (line   8)
* char-set-cursor-next <1>:              char-sets ops.       (line 101)
* char-set-delete:                       srfi char-sets spec algebra.
                                                              (line   7)
* char-set-delete <1>:                   char-sets make.      (line  25)
* char-set-delete!:                      srfi char-sets spec algebra.
                                                              (line  11)
* char-set-diff+intersection:            srfi char-sets spec algebra.
                                                              (line  20)
* char-set-diff+intersection!:           srfi char-sets spec algebra.
                                                              (line  55)
* char-set-difference:                   srfi char-sets spec algebra.
                                                              (line  18)
* char-set-difference <1>:               char-sets ops.       (line  21)
* char-set-difference!:                  srfi char-sets spec algebra.
                                                              (line  53)
* char-set-difference+intersection:      char-sets ops.       (line  28)
* char-set-empty?:                       char-sets pred.      (line  16)
* char-set-every:                        srfi char-sets spec query.
                                                              (line  26)
* char-set-every <1>:                    char-sets ops.       (line  65)
* char-set-filter:                       srfi char-sets spec create.
                                                              (line  36)
* char-set-filter <1>:                   srfi char-sets spec create.
                                                              (line  37)
* char-set-filter <2>:                   char-sets ops.       (line  60)
* char-set-filter!:                      srfi char-sets spec create.
                                                              (line  38)
* char-set-fold:                         srfi char-sets spec iter.
                                                              (line  58)
* char-set-fold <1>:                     char-sets ops.       (line  75)
* char-set-for-each:                     srfi char-sets spec iter.
                                                              (line 134)
* char-set-for-each <1>:                 char-sets ops.       (line  52)
* char-set-hash:                         srfi char-sets spec general.
                                                              (line  19)
* char-set-hash <1>:                     srfi char-sets spec general.
                                                              (line  20)
* char-set-hash <2>:                     char-sets inspect.   (line  20)
* char-set-hash <3>:                     char-sets inspect.   (line  21)
* char-set-intersection:                 srfi char-sets spec algebra.
                                                              (line  17)
* char-set-intersection <1>:             char-sets ops.       (line   6)
* char-set-intersection!:                srfi char-sets spec algebra.
                                                              (line  52)
* char-set-map:                          srfi char-sets spec iter.
                                                              (line 140)
* char-set-map <1>:                      char-sets ops.       (line  55)
* char-set-ref:                          srfi char-sets spec iter.
                                                              (line   7)
* char-set-ref <1>:                      char-sets ops.       (line 100)
* char-set-size:                         srfi char-sets spec query.
                                                              (line   6)
* char-set-size <1>:                     char-sets inspect.   (line   6)
* char-set-subset?:                      char-sets pred.      (line  41)
* char-set-subset?/strict:               char-sets pred.      (line  42)
* char-set-superset?:                    char-sets pred.      (line  47)
* char-set-superset?/strict:             char-sets pred.      (line  48)
* char-set-unfold:                       srfi char-sets spec iter.
                                                              (line  83)
* char-set-unfold <1>:                   srfi char-sets spec iter.
                                                              (line  84)
* char-set-unfold!:                      srfi char-sets spec iter.
                                                              (line  85)
* char-set-union:                        srfi char-sets spec algebra.
                                                              (line  16)
* char-set-union <1>:                    char-sets ops.       (line  14)
* char-set-union!:                       srfi char-sets spec algebra.
                                                              (line  51)
* char-set-write:                        char-sets inspect.   (line  14)
* char-set-write <1>:                    char-sets inspect.   (line  15)
* char-set-xor:                          srfi char-sets spec algebra.
                                                              (line  19)
* char-set-xor <1>:                      char-sets ops.       (line  35)
* char-set-xor!:                         srfi char-sets spec algebra.
                                                              (line  54)
* char-set<=:                            srfi char-sets spec general.
                                                              (line  14)
* char-set<=?:                           char-sets pred.      (line  34)
* char-set<?:                            char-sets pred.      (line  27)
* char-set=:                             srfi char-sets spec general.
                                                              (line   9)
* char-set=?:                            char-sets pred.      (line  22)
* char-set?:                             srfi char-sets spec general.
                                                              (line   6)
* char-set? <1>:                         char-sets pred.      (line   6)
* char-set?/internals:                   char-sets pred.      (line  10)
* char/false:                            args predefined chars.
                                                              (line  10)
* chdir:                                 posix dir.           (line  32)
* check:                                 srfi lightweight-testing spec.
                                                              (line   6)
* check <1>:                             srfi lightweight-testing spec.
                                                              (line   7)
* check <2>:                             checks eval.         (line   6)
* check <3>:                             checks eval.         (line   7)
* check <4>:                             checks eval.         (line   8)
* check <5>:                             checks eval.         (line   9)
* check-display:                         checks output.       (line  12)
* check-ec:                              srfi lightweight-testing spec.
                                                              (line  18)
* check-ec <1>:                          srfi lightweight-testing spec.
                                                              (line  19)
* check-ec <2>:                          srfi lightweight-testing spec.
                                                              (line  20)
* check-ec <3>:                          srfi lightweight-testing spec.
                                                              (line  21)
* check-for-assertion-violation:         checks eval.         (line  82)
* check-for-expression-return-value-violation: checks eval.   (line 151)
* check-for-false:                       checks eval.         (line  74)
* check-for-false <1>:                   checks eval.         (line  75)
* check-for-procedure-argument-violation: checks eval.        (line  95)
* check-for-procedure-arguments-consistency-violation: checks eval.
                                                              (line 138)
* check-for-procedure-signature-argument-violation: checks eval.
                                                              (line 108)
* check-for-procedure-signature-return-value-violation: checks eval.
                                                              (line 123)
* check-for-true:                        checks eval.         (line  72)
* check-for-true <1>:                    checks eval.         (line  73)
* check-newline:                         checks output.       (line  20)
* check-passed?:                         srfi lightweight-testing spec.
                                                              (line  92)
* check-passed? <1>:                     checks eval.         (line  59)
* check-pretty-print:                    checks output.       (line  24)
* check-report:                          srfi lightweight-testing spec.
                                                              (line  63)
* check-report <1>:                      checks eval.         (line  23)
* check-reset!:                          srfi lightweight-testing spec.
                                                              (line  87)
* check-reset! <1>:                      checks eval.         (line  54)
* check-set-mode!:                       srfi lightweight-testing spec.
                                                              (line  67)
* check-set-mode! <1>:                   checks eval.         (line  34)
* check-test-name:                       checks select.       (line  49)
* check-write:                           checks output.       (line  16)
* chmod:                                 posix file.          (line  34)
* chown:                                 posix file.          (line  21)
* circular-list:                         srfi list spec cons. (line  60)
* circular-list <1>:                     lists circ.          (line   9)
* circular-list->list!:                  lists circ.          (line  21)
* circular-list->list!/stx:              lists circ.          (line  22)
* circular-list-copy:                    lists circ.          (line  27)
* circular-list-copy/stx:                lists circ.          (line  28)
* circular-list-length:                  lists circ.          (line  34)
* circular-list-length/stx:              lists circ.          (line  35)
* circular-list/stx:                     lists circ.          (line  10)
* circular-list=:                        lists circ.          (line  43)
* circular-list=/stx:                    lists circ.          (line  44)
* circular-list?:                        srfi list spec pred. (line  27)
* circular-list? <1>:                    lists pred.          (line  15)
* circular-list?/or-null:                lists pred.          (line  16)
* clear-all! on <bitvector>:             bitvectors bits.     (line  20)
* clearenv:                              glibc env.           (line   8)
* clearenv <1>:                          linux env.           (line   8)
* clock:                                 posix time functions.
                                                              (line   6)
* clock-getcpuclockid:                   posix time functions.
                                                              (line 139)
* clock-getres:                          posix time functions.
                                                              (line 118)
* clock-gettime:                         posix time functions.
                                                              (line 125)
* clock-settime:                         posix time functions.
                                                              (line 132)
* clog:                                  glibc math.          (line  41)
* clog10:                                glibc math.          (line  44)
* clone on <bitvector>:                  bitvectors type.     (line  23)
* close:                                 posix fd open.       (line  24)
* close-logging:                         posix log-files api. (line  27)
* close-master-sock:                     posix tcp-server-sockets.
                                                              (line  37)
* close-ports-in-close-on-exec-mode:     posix fd device cloexec.
                                                              (line 132)
* close-ports-in-close-on-exec-mode <1>: posix fd device cloexec.
                                                              (line 133)
* close-server-port:                     posix tcp-server-sockets.
                                                              (line  57)
* closedir:                              posix dir.           (line 102)
* command-line-option-action:            getopts types.       (line  71)
* command-line-option-brief:             getopts types.       (line  67)
* command-line-option-description:       getopts types.       (line  70)
* command-line-option-long:              getopts types.       (line  68)
* command-line-option-requires-argument?: getopts types.      (line  69)
* command-line-option?:                  getopts types.       (line  45)
* comparator-check-type:                 srfi comparators applicators.
                                                              (line  10)
* comparator-check-type <1>:             srfi comparators applicators.
                                                              (line  11)
* comparator-check-type-procedure:       srfi comparators accessors.
                                                              (line  10)
* comparator-compare:                    srfi comparators applicators.
                                                              (line  23)
* comparator-comparison-procedure:       srfi comparators accessors.
                                                              (line  31)
* comparator-comparison-procedure?:      srfi comparators predicates.
                                                              (line   9)
* comparator-debug-error.comparator:     srfi comparators conditions.
                                                              (line 181)
* comparator-debug-error.debug-comparator: srfi comparators conditions.
                                                              (line 180)
* comparator-debug-error?:               srfi comparators conditions.
                                                              (line 176)
* comparator-equal?:                     srfi comparators applicators.
                                                              (line  19)
* comparator-equality-predicate:         srfi comparators accessors.
                                                              (line  28)
* comparator-error?:                     srfi comparators conditions.
                                                              (line  19)
* comparator-hash:                       srfi comparators applicators.
                                                              (line  27)
* comparator-hash-function:              srfi comparators accessors.
                                                              (line  34)
* comparator-hash-function?:             srfi comparators predicates.
                                                              (line  13)
* comparator-max:                        srfi comparators minmax.
                                                              (line   7)
* comparator-min:                        srfi comparators minmax.
                                                              (line   6)
* comparator-nan-comparison-error.comparator: srfi comparators conditions.
                                                              (line 112)
* comparator-register-default!:          srfi comparators default.
                                                              (line  69)
* comparator-test-type:                  srfi comparators applicators.
                                                              (line   6)
* comparator-test-type-procedure:        srfi comparators accessors.
                                                              (line   7)
* comparator-type-check-procedure:       srfi comparators accessors.
                                                              (line  11)
* comparator-type-error.comparator:      srfi comparators conditions.
                                                              (line  76)
* comparator-type-error.objects:         srfi comparators conditions.
                                                              (line  77)
* comparator-type-error?:                srfi comparators conditions.
                                                              (line  72)
* comparator-type-test-procedure:        srfi comparators accessors.
                                                              (line   6)
* comparator?:                           srfi comparators predicates.
                                                              (line   6)
* compare-by<:                           comparisons pred.    (line 135)
* compare-by< <1>:                       srfi compare-procedures spec using.
                                                              (line 274)
* compare-by< <2>:                       srfi compare-procedures spec using.
                                                              (line 275)
* compare-by<=:                          comparisons pred.    (line 137)
* compare-by<= <1>:                      srfi compare-procedures spec using.
                                                              (line 278)
* compare-by<= <2>:                      srfi compare-procedures spec using.
                                                              (line 279)
* compare-by=/<:                         comparisons pred.    (line 139)
* compare-by=/< <1>:                     srfi compare-procedures spec using.
                                                              (line 282)
* compare-by=/< <2>:                     srfi compare-procedures spec using.
                                                              (line 283)
* compare-by=/>:                         comparisons pred.    (line 140)
* compare-by=/> <1>:                     srfi compare-procedures spec using.
                                                              (line 284)
* compare-by=/> <2>:                     srfi compare-procedures spec using.
                                                              (line 285)
* compare-by>:                           comparisons pred.    (line 136)
* compare-by> <1>:                       srfi compare-procedures spec using.
                                                              (line 276)
* compare-by> <2>:                       srfi compare-procedures spec using.
                                                              (line 277)
* compare-by>=:                          comparisons pred.    (line 138)
* compare-by>= <1>:                      srfi compare-procedures spec using.
                                                              (line 280)
* compare-by>= <2>:                      srfi compare-procedures spec using.
                                                              (line 281)
* COMPILE-FLAGS:                         gcc.                 (line  68)
* complex:                               args predefined complexes.
                                                              (line   9)
* complex-compare:                       comparisons atoms.   (line  40)
* complex-compare <1>:                   srfi compare-procedures spec atom.
                                                              (line  49)
* compnum:                               args predefined compnums.
                                                              (line   9)
* compute-restarts:                      restarts invoke.     (line  32)
* concatenate:                           srfi list spec misc. (line  44)
* concatenate <1>:                       lists misc.          (line  29)
* concatenate!:                          srfi list spec misc. (line  45)
* concatenate! <1>:                      lists misc.          (line  30)
* concatenate!/stx:                      lists misc.          (line  32)
* concatenate/stx:                       lists misc.          (line  31)
* cond:                                  srfi general-cond spec.
                                                              (line   6)
* cond-compare:                          comparisons cons.    (line  66)
* cond-compare <1>:                      srfi compare-procedures spec const.
                                                              (line  79)
* cond-expand:                           srfi cond-expand spec.
                                                              (line   6)
* cond-expand <1>:                       posix cond-expand.   (line   6)
* cond-expand <2>:                       glibc cond-expand.   (line   6)
* cond-expand <3>:                       linux cond-expand.   (line   6)
* condition-argument:                    getopts conditions.  (line  52)
* condition-brief/long:                  getopts conditions.  (line  68)
* condition-comparator-nan-comparison-error?: srfi comparators conditions.
                                                              (line 108)
* condition-errno:                       posix conditions.    (line  17)
* condition-h_errno:                     posix conditions.    (line  32)
* condition-inexact-real-comparator-with-ignored-epsilon?: srfi comparators conditions.
                                                              (line 146)
* condition-message:                     posix log-files api. (line  76)
* condition-option:                      getopts conditions.  (line  37)
* confstr:                               posix config.        (line  55)
* confstr/string:                        posix config.        (line  56)
* connect:                               posix socket socket. (line  39)
* connect-in-port on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  13)
* connect-in-port on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  13)
* connect-ou-port on <binary-output-only-channel>: net channels channels bochannel.
                                                              (line  13)
* connect-ou-port on <binary-output-only-channel> <1>: net channels channels tochannel.
                                                              (line  13)
* cons:                                  srfi list spec cons. (line   6)
* cons <1>:                              srfi ralists spec random.
                                                              (line 143)
* cons*:                                 srfi list spec cons. (line  31)
* continue-restart:                      restarts func.       (line  28)
* continue-restart <1>:                  restarts func.       (line  29)
* coordinate:                            arrays coordinates.  (line  20)
* coordinate/false:                      arrays coordinates.  (line  21)
* coordinate?:                           arrays coordinates.  (line  10)
* copy-time:                             srfi time spec time. (line  42)
* cosh:                                  glibc math.          (line  57)
* count:                                 srfi list spec misc. (line 144)
* count <1>:                             lists misc.          (line 136)
* count/stx:                             lists misc.          (line 137)
* counters::                             silex tables.        (line 152)
* counters: <1>:                         silex input.         (line  58)
* cpow:                                  glibc math.          (line  50)
* cpu-architecture:                      srfi env-inquiry spec.
                                                              (line  41)
* create-pid-file:                       posix pid-files api. (line   9)
* csin:                                  glibc math.          (line  24)
* csinh:                                 glibc math.          (line  66)
* csqrt:                                 glibc math.          (line  47)
* ctan:                                  glibc math.          (line  26)
* ctanh:                                 glibc math.          (line  68)
* ctermid:                               posix job.           (line   6)
* ctermid/string:                        posix job.           (line   7)
* curl:                                  posix curl.          (line  23)
* current-date:                          srfi time spec current.
                                                              (line   8)
* current-date <1>:                      srfi time spec current.
                                                              (line   9)
* current-julian-day:                    srfi time spec current.
                                                              (line  16)
* current-message-size on <<channel>>:   net channels ifaces channel.
                                                              (line  32)
* current-message-size on <channel>:     net channels channels channel.
                                                              (line  31)
* current-modified-julian-day:           srfi time spec current.
                                                              (line  19)
* current-time:                          srfi time spec current.
                                                              (line  22)
* current-time <1>:                      srfi time spec current.
                                                              (line  23)
* cut:                                   srfi specialize-procedures spec.
                                                              (line   6)
* cute:                                  srfi specialize-procedures spec.
                                                              (line   6)
* daemon:                                linux daemonisation. (line   8)
* daemonise:                             posix daemonisations.
                                                              (line  19)
* date->julian-day:                      srfi time spec conversion.
                                                              (line   9)
* date->modified-julian-day:             srfi time spec conversion.
                                                              (line  12)
* date->string:                          srfi time spec string.
                                                              (line  10)
* date->string <1>:                      srfi time spec string.
                                                              (line  11)
* date->time-monotonic:                  srfi time spec conversion.
                                                              (line  18)
* date->time-tai:                        srfi time spec conversion.
                                                              (line  21)
* date->time-utc:                        srfi time spec conversion.
                                                              (line  24)
* date-day:                              srfi time spec date. (line  28)
* date-hour:                             srfi time spec date. (line  25)
* date-minute:                           srfi time spec date. (line  22)
* date-month:                            srfi time spec date. (line  31)
* date-nanosecond:                       srfi time spec date. (line  16)
* date-second:                           srfi time spec date. (line  19)
* date-week-day:                         srfi time spec date. (line  44)
* date-week-number:                      srfi time spec date. (line  48)
* date-year:                             srfi time spec date. (line  34)
* date-year-day:                         srfi time spec date. (line  40)
* date-zone-offset:                      srfi time spec date. (line  37)
* date?:                                 srfi time spec date. (line  13)
* debug-compare:                         comparisons debug.   (line   6)
* debug-compare <1>:                     srfi compare-procedures spec using.
                                                              (line 310)
* default-comparator:                    srfi comparators default.
                                                              (line   6)
* default-compare:                       comparisons default. (line   9)
* default-compare <1>:                   srfi compare-procedures spec def.
                                                              (line   9)
* define-argument-validation:            args definitions.    (line   9)
* define-c-flags:                        c-enums.             (line   9)
* define-c-function:                     gcc.                 (line  55)
* define-c-ior-flags:                    c-enums.             (line  66)
* define-command-line-option:            getopts types.       (line  49)
* define-cond-expand:                    cond-expand.         (line   9)
* define-cond-expand-identifiers-helper: cond-expand.         (line  59)
* define-exact-integer->symbol-function: syntaxes defines.    (line   9)
* define-generic:                        multimethods defining.
                                                              (line  34)
* define-generic*:                       multimethods defining.
                                                              (line  49)
* define-generic*-definer:               multimethods definers.
                                                              (line  26)
* define-generic-definer:                multimethods definers.
                                                              (line  10)
* define-instantiable-body:              ibodies.             (line  11)
* define-list-tuple-type:                tuples.              (line  15)
* define-maker:                          makers api.          (line   9)
* define-method:                         multimethods methods.
                                                              (line   6)
* define-method <1>:                     multimethods methods.
                                                              (line   7)
* define-method <2>:                     multimethods methods.
                                                              (line   9)
* define-method <3>:                     multimethods methods.
                                                              (line  10)
* define-method <4>:                     multimethods methods.
                                                              (line  12)
* define-parser-logic:                   parser logic api.    (line   9)
* define-record-type:                    srfi records spec.   (line   6)
* define-stream:                         streams cons.        (line  33)
* define-stream <1>:                     srfi streams derived.
                                                              (line   9)
* define-variable:                       variables.           (line  29)
* define-variable <1>:                   variables.           (line  30)
* define-variable <2>:                   variables.           (line  31)
* define-variable-alias:                 variables.           (line  47)
* define-vector-tuple-type:              tuples.              (line  16)
* delay:                                 srfi lazy spec.      (line  10)
* delete:                                srfi list spec delete.
                                                              (line   6)
* delete <1>:                            lists delete.        (line   6)
* delete <2>:                            lists delete.        (line   7)
* delete!:                               srfi list spec delete.
                                                              (line   7)
* delete! <1>:                           lists delete.        (line   8)
* delete! <2>:                           lists delete.        (line   9)
* delete-duplicates:                     srfi list spec delete.
                                                              (line  35)
* delete-duplicates <1>:                 lists delete.        (line  32)
* delete-duplicates <2>:                 lists delete.        (line  33)
* delete-duplicates!:                    srfi list spec delete.
                                                              (line  36)
* delete-duplicates! <1>:                lists delete.        (line  34)
* delete-duplicates! <2>:                lists delete.        (line  35)
* delivery-timeout-expired? on <<channel>>: net channels ifaces channel.
                                                              (line  51)
* delivery-timeout-expired? on <channel>: net channels channels channel.
                                                              (line  49)
* deque:                                 deques objects.      (line  29)
* deque->list:                           deques conversion.   (line  11)
* deque->vector:                         deques conversion.   (line  25)
* deque-copy!:                           deques misc.         (line  11)
* deque-empty?:                          deques inspection.   (line  11)
* deque-exists:                          deques searching.    (line  33)
* deque-exists-left:                     deques searching.    (line  19)
* deque-exists-right:                    deques searching.    (line  26)
* deque-filter:                          deques filtering.    (line  11)
* deque-find:                            deques searching.    (line  80)
* deque-find <1>:                        deques searching.    (line  81)
* deque-find-left:                       deques searching.    (line  37)
* deque-find-left <1>:                   deques searching.    (line  38)
* deque-find-right:                      deques searching.    (line  67)
* deque-find-right <1>:                  deques searching.    (line  68)
* deque-fold-left:                       deques folding.      (line  11)
* deque-fold-right:                      deques folding.      (line  24)
* deque-for-all:                         deques searching.    (line  11)
* deque-for-each:                        deques mapping.      (line  51)
* deque-for-each-left:                   deques mapping.      (line  41)
* deque-for-each-right:                  deques mapping.      (line  46)
* deque-front:                           deques access.       (line  11)
* deque-getprop:                         deques objects.      (line  49)
* deque-hash:                            deques objects.      (line  68)
* deque-map:                             deques mapping.      (line  37)
* deque-map-left:                        deques mapping.      (line  11)
* deque-map-right:                       deques mapping.      (line  24)
* deque-not-empty?:                      deques inspection.   (line  15)
* deque-partition:                       deques filtering.    (line  20)
* deque-pop-front!:                      deques access.       (line  29)
* deque-pop-rear!:                       deques access.       (line  34)
* deque-property-list:                   deques objects.      (line  59)
* deque-purge!:                          deques access.       (line  39)
* deque-push-front!:                     deques access.       (line  21)
* deque-push-rear!:                      deques access.       (line  25)
* deque-putprop:                         deques objects.      (line  43)
* deque-rear:                            deques access.       (line  16)
* deque-remprop:                         deques objects.      (line  54)
* deque-reverse!:                        deques misc.         (line  22)
* deque-size?:                           deques inspection.   (line  19)
* deque?:                                deques objects.      (line  25)
* description:                           getopts types.       (line  53)
* directory-stream-closed?:              posix dir.           (line  73)
* directory-stream-fd:                   posix dir.           (line  72)
* directory-stream-pathname:             posix dir.           (line  70)
* directory-stream-pointer:              posix dir.           (line  71)
* directory-stream?:                     posix dir.           (line  67)
* dirfd:                                 glibc dir.           (line   8)
* dirname:                               parser-tools unix-pathnames comp.
                                                              (line  70)
* do-ec:                                 loops comprehensions do.
                                                              (line   6)
* do-ec <1>:                             srfi eager-comp spec comprehensions.
                                                              (line   6)
* do-one-event:                          posix sel.           (line  40)
* do-one-fd-event:                       posix sel.           (line 100)
* do-one-task-event:                     posix sel.           (line 117)
* dotted-ilist?:                         srfi ilists procs predicates.
                                                              (line  19)
* dotted-list?:                          srfi list spec pred. (line  35)
* dotted-list? <1>:                      lists pred.          (line  20)
* dotted-list?/or-null:                  lists pred.          (line  21)
* drop:                                  srfi list spec select.
                                                              (line  59)
* drop-left:                             lists select.        (line  34)
* drop-left/stx:                         lists select.        (line  36)
* drop-right:                            srfi list spec select.
                                                              (line  86)
* drop-right <1>:                        lists select.        (line  74)
* drop-right!:                           srfi list spec select.
                                                              (line 115)
* drop-right! <1>:                       lists select.        (line 115)
* drop-right!/stx:                       lists select.        (line 117)
* drop-right/stx:                        lists select.        (line  76)
* drop-while:                            srfi list spec search.
                                                              (line 124)
* drop-while <1>:                        lists search.        (line  39)
* dup:                                   posix fd dup.        (line  10)
* dup2:                                  posix fd dup.        (line  16)
* dynamic-array:                         dynamic arrays objects.
                                                              (line  43)
* dynamic-array->list:                   dynamic arrays conversion.
                                                              (line  11)
* dynamic-array->vector:                 dynamic arrays conversion.
                                                              (line  26)
* dynamic-array-copy!:                   dynamic arrays misc. (line  11)
* dynamic-array-empty?:                  dynamic arrays inspection.
                                                              (line  11)
* dynamic-array-exists:                  dynamic arrays searching.
                                                              (line  34)
* dynamic-array-exists-left:             dynamic arrays searching.
                                                              (line  20)
* dynamic-array-exists-right:            dynamic arrays searching.
                                                              (line  27)
* dynamic-array-filter:                  dynamic arrays filtering.
                                                              (line  11)
* dynamic-array-find:                    dynamic arrays searching.
                                                              (line  82)
* dynamic-array-find <1>:                dynamic arrays searching.
                                                              (line  83)
* dynamic-array-find-left:               dynamic arrays searching.
                                                              (line  39)
* dynamic-array-find-left <1>:           dynamic arrays searching.
                                                              (line  40)
* dynamic-array-find-right:              dynamic arrays searching.
                                                              (line  69)
* dynamic-array-find-right <1>:          dynamic arrays searching.
                                                              (line  70)
* dynamic-array-fold-left:               dynamic arrays folding.
                                                              (line  11)
* dynamic-array-fold-right:              dynamic arrays folding.
                                                              (line  25)
* dynamic-array-for-all:                 dynamic arrays searching.
                                                              (line  11)
* dynamic-array-for-each:                dynamic arrays mapping.
                                                              (line  57)
* dynamic-array-for-each-left:           dynamic arrays mapping.
                                                              (line  47)
* dynamic-array-for-each-right:          dynamic arrays mapping.
                                                              (line  52)
* dynamic-array-front:                   dynamic arrays access.
                                                              (line  57)
* dynamic-array-getprop:                 dynamic arrays objects.
                                                              (line  64)
* dynamic-array-hash:                    dynamic arrays objects.
                                                              (line  83)
* dynamic-array-insert!:                 dynamic arrays access.
                                                              (line  21)
* dynamic-array-length:                  dynamic arrays inspection.
                                                              (line  19)
* dynamic-array-map:                     dynamic arrays mapping.
                                                              (line  43)
* dynamic-array-map-left:                dynamic arrays mapping.
                                                              (line  11)
* dynamic-array-map-right:               dynamic arrays mapping.
                                                              (line  27)
* dynamic-array-not-empty?:              dynamic arrays inspection.
                                                              (line  15)
* dynamic-array-partition:               dynamic arrays filtering.
                                                              (line  20)
* dynamic-array-pop-front!:              dynamic arrays access.
                                                              (line  75)
* dynamic-array-pop-rear!:               dynamic arrays access.
                                                              (line  80)
* dynamic-array-property-list:           dynamic arrays objects.
                                                              (line  74)
* dynamic-array-purge!:                  dynamic arrays access.
                                                              (line  85)
* dynamic-array-push-front!:             dynamic arrays access.
                                                              (line  67)
* dynamic-array-push-rear!:              dynamic arrays access.
                                                              (line  71)
* dynamic-array-putprop:                 dynamic arrays objects.
                                                              (line  58)
* dynamic-array-rear:                    dynamic arrays access.
                                                              (line  62)
* dynamic-array-ref:                     dynamic arrays access.
                                                              (line  11)
* dynamic-array-remove!:                 dynamic arrays access.
                                                              (line  48)
* dynamic-array-remprop:                 dynamic arrays objects.
                                                              (line  69)
* dynamic-array-reverse!:                dynamic arrays misc. (line  22)
* dynamic-array-set!:                    dynamic arrays access.
                                                              (line  16)
* dynamic-array-size:                    dynamic arrays inspection.
                                                              (line  24)
* dynamic-array-sort:                    dynamic arrays sort. (line  11)
* dynamic-array-sort!:                   dynamic arrays sort. (line  26)
* dynamic-array?:                        dynamic arrays objects.
                                                              (line  39)
* eager:                                 srfi lazy spec.      (line  32)
* eighth:                                srfi list spec select.
                                                              (line  44)
* eighth <1>:                            lists select.        (line  13)
* eighth/stx:                            lists select.        (line  19)
* else:                                  simple-match syntax. (line  13)
* else <1>:                              errno.               (line  21)
* end-of-char-set?:                      srfi char-sets spec iter.
                                                              (line   9)
* end-of-char-set? <1>:                  char-sets ops.       (line 102)
* enqueue!:                              lists low.           (line 157)
* enter:                                 posix sel.           (line  46)
* enum-set:                              args predefined enum-sets.
                                                              (line   9)
* enum-set/false:                        args predefined enum-sets.
                                                              (line  12)
* environ:                               posix env.           (line  43)
* environ->table:                        posix env.           (line  54)
* environ-table:                         posix env.           (line  50)
* epoll-create:                          linux epoll.         (line  10)
* epoll-create <1>:                      linux epoll.         (line  11)
* epoll-create1:                         linux epoll.         (line  12)
* epoll-ctl:                             linux epoll.         (line  18)
* epoll-ctl <1>:                         linux epoll.         (line  19)
* epoll-event-alloc:                     linux epoll.         (line  49)
* epoll-event-ref-data-fd:               linux epoll.         (line  69)
* epoll-event-ref-data-ptr:              linux epoll.         (line  64)
* epoll-event-ref-data-u32:              linux epoll.         (line  74)
* epoll-event-ref-data-u64:              linux epoll.         (line  79)
* epoll-event-ref-events:                linux epoll.         (line  59)
* epoll-event-set-data-fd!:              linux epoll.         (line  68)
* epoll-event-set-data-ptr!:             linux epoll.         (line  63)
* epoll-event-set-data-u32!:             linux epoll.         (line  73)
* epoll-event-set-data-u64!:             linux epoll.         (line  78)
* epoll-event-set-events!:               linux epoll.         (line  58)
* epoll-event-size:                      linux epoll.         (line  54)
* epoll-wait:                            linux epoll.         (line  31)
* eq-comparator:                         srfi comparators wrapped.
                                                              (line   6)
* equal-comparator:                      srfi comparators wrapped.
                                                              (line   8)
* equal?:                                srfi ralists spec random.
                                                              (line  97)
* eqv-comparator:                        srfi comparators wrapped.
                                                              (line   7)
* erf:                                   glibc math.          (line  79)
* erfc:                                  glibc math.          (line  80)
* errno-code:                            errno.               (line  13)
* errno-code->symbol:                    platform utilities.  (line  22)
* errno-condition?:                      posix conditions.    (line  14)
* error:                                 srfi error-reporting spec.
                                                              (line   6)
* ether-aton:                            linux ether.         (line  36)
* ether-aton-r:                          linux ether.         (line  37)
* ether-hostton:                         linux ether.         (line  70)
* ether-line:                            linux ether.         (line  92)
* ether-line/string:                     linux ether.         (line 104)
* ether-ntoa:                            linux ether.         (line  16)
* ether-ntoa-r:                          linux ether.         (line  17)
* ether-ntoa-r/string:                   linux ether.         (line  25)
* ether-ntoa/string:                     linux ether.         (line  24)
* ether-ntohost:                         linux ether.         (line  48)
* ether-ntohost/string:                  linux ether.         (line  55)
* eval:                                  simple-match syntax. (line  22)
* even-exact-integer:                    args predefined exact integers.
                                                              (line  31)
* even-fixnum:                           args predefined fixnums.
                                                              (line  44)
* even-signed-int:                       args predefined signed int.
                                                              (line  35)
* every:                                 srfi list spec search.
                                                              (line 197)
* every <1>:                             lists search.        (line 112)
* every*:                                lists search.        (line 113)
* every?-ec:                             loops comprehensions search.
                                                              (line  13)
* every?-ec <1>:                         srfi eager-comp spec comprehensions.
                                                              (line  75)
* exact-integer:                         args predefined exact integers.
                                                              (line   9)
* exact-integer-in-exclusive-range:      args predefined exact integers.
                                                              (line  27)
* exact-integer-in-inclusive-range:      args predefined exact integers.
                                                              (line  26)
* exact-integer/false:                   args predefined exact integers.
                                                              (line  12)
* exception:                             posix sel.           (line  81)
* exception <1>:                         posix sel.           (line  82)
* execl:                                 posix process exec.  (line  58)
* execle:                                posix process exec.  (line  67)
* execlp:                                posix process exec.  (line  76)
* execv:                                 posix process exec.  (line  14)
* execve:                                posix process exec.  (line  28)
* execvp:                                posix process exec.  (line  43)
* expiration-time on <<channel>>:        net channels ifaces channel.
                                                              (line  13)
* expiration-time on <<channel>> <1>:    net channels ifaces channel.
                                                              (line  14)
* expiration-time on <channel>:          net channels channels channel.
                                                              (line  13)
* expiration-time on <channel> <1>:      net channels channels channel.
                                                              (line  14)
* extension:                             parser-tools unix-pathnames comp.
                                                              (line  16)
* false-if-exception:                    checks eval.         (line  68)
* false-or-byte:                         args predefined bits.
                                                              (line  15)
* false-or-bytevector-compound:          bytevector compounds types.
                                                              (line  26)
* false-or-octet:                        args predefined bits.
                                                              (line  10)
* false-or-promise:                      args predefined promises.
                                                              (line  13)
* fchdir:                                posix dir.           (line  38)
* fchmod:                                posix file.          (line  40)
* fchown:                                posix file.          (line  27)
* fcntl:                                 posix fd device.     (line   6)
* fcntl <1>:                             posix fd device.     (line   7)
* fd-in-close-on-exec-mode?:             posix fd device cloexec.
                                                              (line 100)
* fd-in-non-blocking-mode?:              posix fd device blocking.
                                                              (line  13)
* fd-set-close-on-exec-mode!:            posix fd device cloexec.
                                                              (line  93)
* fd-set-inspection:                     posix fd select fdset.
                                                              (line 103)
* fd-set-inspection <1>:                 posix fd select fdset.
                                                              (line 104)
* fd-set-non-blocking-mode!:             posix fd device blocking.
                                                              (line   6)
* fd-unset-close-on-exec-mode!:          posix fd device cloexec.
                                                              (line  94)
* fd-unset-non-blocking-mode!:           posix fd device blocking.
                                                              (line   7)
* fdatasync:                             glibc sync.          (line  20)
* fdopendir:                             posix dir.           (line  82)
* FD_CLR:                                posix fd select fdset.
                                                              (line  76)
* FD_CLR <1>:                            posix fd select fdset.
                                                              (line  77)
* FD_ISSET:                              posix fd select fdset.
                                                              (line  89)
* FD_ISSET <1>:                          posix fd select fdset.
                                                              (line  90)
* FD_SET:                                posix fd select fdset.
                                                              (line  63)
* FD_SET <1>:                            posix fd select fdset.
                                                              (line  64)
* FD_ZERO:                               posix fd select fdset.
                                                              (line  51)
* FD_ZERO <1>:                           posix fd select fdset.
                                                              (line  52)
* fields:                                tuples.              (line  17)
* fifth:                                 srfi list spec select.
                                                              (line  41)
* fifth <1>:                             lists select.        (line  10)
* fifth/stx:                             lists select.        (line  16)
* file-absolute-pathname?:               posix file.          (line   8)
* file-atime:                            posix stat.          (line 107)
* file-bytevector-colon-search-path:     args predefined pathnames.
                                                              (line  30)
* file-bytevector-colon-search-path?:    posix file.          (line   8)
* file-bytevector-pathname:              args predefined pathnames.
                                                              (line  17)
* file-bytevector-pathname?:             posix file.          (line   8)
* file-colon-search-path:                args predefined pathnames.
                                                              (line  21)
* file-colon-search-path?:               posix file.          (line   8)
* file-ctime:                            posix stat.          (line 109)
* file-descriptor:                       posix args.          (line  10)
* file-descriptor/false:                 posix args.          (line  11)
* file-descriptor?:                      posix misc.          (line  14)
* file-executable?:                      posix stat.          (line  93)
* file-existence-procedure:              posix pid-files config.
                                                              (line  15)
* file-is-block-device?:                 posix stat.          (line  49)
* file-is-block-device? <1>:             posix stat.          (line  59)
* file-is-char-device?:                  posix stat.          (line  48)
* file-is-char-device? <1>:              posix stat.          (line  58)
* file-is-directory?:                    posix stat.          (line  47)
* file-is-directory? <1>:                posix stat.          (line  57)
* file-is-fifo?:                         posix stat.          (line  53)
* file-is-fifo? <1>:                     posix stat.          (line  63)
* file-is-message-queue?:                posix stat.          (line  54)
* file-is-message-queue? <1>:            posix stat.          (line  64)
* file-is-regular-file?:                 posix stat.          (line  50)
* file-is-regular-file? <1>:             posix stat.          (line  60)
* file-is-semaphore?:                    posix stat.          (line  55)
* file-is-semaphore? <1>:                posix stat.          (line  65)
* file-is-shared-memory?:                posix stat.          (line  56)
* file-is-shared-memory? <1>:            posix stat.          (line  66)
* file-is-socket?:                       posix stat.          (line  52)
* file-is-socket? <1>:                   posix stat.          (line  62)
* file-is-symbolic-link?:                posix stat.          (line  51)
* file-is-symbolic-link? <1>:            posix stat.          (line  61)
* file-mtime:                            posix stat.          (line 108)
* file-pathname:                         args predefined pathnames.
                                                              (line   9)
* file-pathname?:                        posix file.          (line   8)
* file-readable?:                        posix stat.          (line  91)
* file-relative-pathname?:               posix file.          (line   8)
* file-removal-procedure:                posix pid-files config.
                                                              (line  38)
* file-size:                             posix stat.          (line 102)
* file-string-colon-search-path:         args predefined pathnames.
                                                              (line  25)
* file-string-colon-search-path?:        posix file.          (line   8)
* file-string-pathname:                  args predefined pathnames.
                                                              (line  13)
* file-string-pathname?:                 posix file.          (line   8)
* file-writable?:                        posix stat.          (line  92)
* filter:                                srfi list spec filter.
                                                              (line   6)
* filter!:                               srfi list spec filter.
                                                              (line   7)
* filter! <1>:                           lists filter.        (line   6)
* filter-map:                            srfi list spec fold. (line 406)
* filter-map <1>:                        lists fold map.      (line 110)
* filter-map*:                           lists fold map.      (line 125)
* filter-map*/stx:                       lists fold map.      (line 126)
* filter-map/stx:                        lists fold map.      (line 111)
* finalise:                              posix sel.           (line  33)
* find:                                  srfi list spec search.
                                                              (line  72)
* find <1>:                              posix find.          (line  19)
* find-executable-as-bytevector:         posix process exec.  (line  88)
* find-executable-as-string:             posix process exec.  (line  89)
* find-restart:                          restarts invoke.     (line   6)
* find-restart <1>:                      restarts invoke.     (line   7)
* find-tail:                             srfi list spec search.
                                                              (line  90)
* find-tail <1>:                         lists search.        (line 203)
* first:                                 srfi list spec select.
                                                              (line  37)
* first <1>:                             lists select.        (line   6)
* first-bit-set on <bitvector>:          bitvectors bits.     (line  52)
* first-ec:                              loops comprehensions search.
                                                              (line  18)
* first-ec <1>:                          srfi eager-comp spec comprehensions.
                                                              (line  80)
* fixnum:                                args predefined fixnums.
                                                              (line   9)
* fixnum->ascii-dec:                     asciis conversion.   (line  20)
* fixnum->ascii-hex:                     asciis conversion.   (line  39)
* fixnum-aligned-to-2?:                  words predicates.    (line  98)
* fixnum-aligned-to-4?:                  words predicates.    (line 102)
* fixnum-aligned-to-8?:                  words predicates.    (line 106)
* fixnum-aligned-to?:                    words predicates.    (line 110)
* fixnum-in-ascii-range?:                asciis generic.      (line  12)
* fixnum-in-base10-range?:               asciis generic.      (line  17)
* fixnum-in-base16-range?:               asciis generic.      (line  21)
* fixnum-in-exclusive-range:             args predefined fixnums.
                                                              (line  40)
* fixnum-in-inclusive-range:             args predefined fixnums.
                                                              (line  39)
* fixnum-index:                          args predefined fixnums.
                                                              (line  30)
* fixnum/false:                          args predefined fixnums.
                                                              (line  12)
* flonum:                                args predefined flonums.
                                                              (line   9)
* flush on <<binary-output-channel>>:    net channels ifaces bochannel.
                                                              (line  27)
* flush on <<textual-output-channel>>:   net channels ifaces tochannel.
                                                              (line  27)
* flush on <binary-output-only-channel>: net channels channels bochannel.
                                                              (line  32)
* flush on <textual-output-only-channel>: net channels channels tochannel.
                                                              (line  32)
* flush-ports-in-close-on-exec-mode:     posix fd device cloexec.
                                                              (line 145)
* flush-ports-in-close-on-exec-mode <1>: posix fd device cloexec.
                                                              (line 146)
* fnmatch:                               glibc match.         (line   8)
* fold:                                  srfi list spec fold. (line   6)
* fold <1>:                              lists fold traditional.
                                                              (line  10)
* fold*:                                 lists fold traditional.
                                                              (line  18)
* fold*/stx:                             lists fold traditional.
                                                              (line  19)
* fold-ec:                               loops comprehensions fold.
                                                              (line   6)
* fold-ec <1>:                           srfi eager-comp spec comprehensions.
                                                              (line  88)
* fold-left*:                            lists fold rnrs.     (line  22)
* fold-left*/stx:                        lists fold rnrs.     (line  24)
* fold-left/pred:                        lists fold derived.  (line  14)
* fold-left/stx:                         lists fold rnrs.     (line  17)
* fold-right:                            srfi list spec fold. (line  45)
* fold-right*:                           lists fold rnrs.     (line  23)
* fold-right*/stx:                       lists fold rnrs.     (line  25)
* fold-right/stx:                        lists fold rnrs.     (line  18)
* fold/stx:                              lists fold traditional.
                                                              (line  11)
* fold3-ec:                              loops comprehensions fold.
                                                              (line   7)
* fold3-ec <1>:                          srfi eager-comp spec comprehensions.
                                                              (line  89)
* for-each:                              srfi list spec fold. (line 329)
* for-each <1>:                          srfi ralists spec random.
                                                              (line 344)
* for-each*:                             lists fold foreach.  (line   6)
* for-each*/stx:                         lists fold foreach.  (line   7)
* force:                                 srfi lazy spec.      (line  24)
* forget-fd:                             posix sel.           (line  96)
* fork:                                  posix process fork fork.
                                                              (line   6)
* fork <1>:                              posix process fork fork.
                                                              (line   7)
* fork-with-binary-ports:                posix process fork binary.
                                                              (line   6)
* fork-with-fds:                         posix process fork fds.
                                                              (line   6)
* fork-with-textual-ports:               posix process fork textual.
                                                              (line   6)
* format:                                srfi basic-format spec.
                                                              (line   6)
* format <1>:                            srfi intermediate-format spec.
                                                              (line   6)
* format <2>:                            srfi intermediate-format spec.
                                                              (line   7)
* format <3>:                            srfi intermediate-format spec.
                                                              (line   8)
* format <4>:                            srfi intermediate-format spec.
                                                              (line   9)
* format <5>:                            formations output.   (line  19)
* format <6>:                            formations output.   (line  20)
* format <7>:                            formations output.   (line  21)
* format <8>:                            formations output.   (line  22)
* format-flonum:                         flonum format.       (line   9)
* format-output-column:                  formations output.   (line  73)
* fourth:                                srfi list spec select.
                                                              (line  40)
* fourth <1>:                            lists select.        (line   9)
* fpathconf:                             posix config.        (line  41)
* fstat:                                 posix stat.          (line  41)
* fsync:                                 glibc sync.          (line  14)
* ftruncate:                             posix fd trunc.      (line  15)
* futimes:                               posix file.          (line  72)
* gai-strerror:                          posix socket misc.   (line  14)
* general-c-buffer:                      args predefined genbuffers.
                                                              (line  12)
* general-c-buffer*:                     args predefined genbuffers.
                                                              (line  29)
* general-c-buffer*/false:               args predefined genbuffers.
                                                              (line  37)
* general-c-buffer-len:                  cbuffers api.        (line  43)
* general-c-buffer.len:                  args predefined genbuffers.
                                                              (line  24)
* general-c-buffer/false:                args predefined genbuffers.
                                                              (line  15)
* general-c-buffer?:                     cbuffers api.        (line  25)
* general-c-sticky-buffer:               args predefined genbuffers.
                                                              (line  18)
* general-c-sticky-buffer*:              args predefined genbuffers.
                                                              (line  33)
* general-c-sticky-buffer*/false:        args predefined genbuffers.
                                                              (line  41)
* general-c-sticky-buffer/false:         args predefined genbuffers.
                                                              (line  21)
* general-c-sticky-buffer?:              cbuffers api.        (line  29)
* general-c-string:                      args predefined genstrings.
                                                              (line  12)
* general-c-string*:                     args predefined genstrings.
                                                              (line  23)
* general-c-string*/false:               args predefined genstrings.
                                                              (line  27)
* general-c-string.len:                  args predefined genstrings.
                                                              (line  18)
* general-c-string/false:                args predefined genstrings.
                                                              (line  15)
* general-c-string?:                     cbuffers api.        (line  21)
* GENERATOR:                             srfi eager-comp spec qualifiers.
                                                              (line  16)
* get-environment-variable:              srfi environment-variables spec.
                                                              (line  10)
* get-environment-variables:             srfi environment-variables spec.
                                                              (line  22)
* get-output-string:                     srfi string-ports spec.
                                                              (line  36)
* get-result:                            checks result.       (line  18)
* getaddrinfo:                           posix socket addresses info.
                                                              (line  52)
* getaddrinfo <1>:                       posix socket addresses info.
                                                              (line  53)
* getcwd:                                posix dir.           (line  24)
* getcwd/string:                         posix dir.           (line  25)
* getegid:                               posix users.         (line  21)
* getenv:                                posix env.           (line  10)
* geteuid:                               posix users.         (line  16)
* getgid:                                posix users.         (line  11)
* getgrgid:                              posix users.         (line 159)
* getgrnam:                              posix users.         (line 166)
* getgroups:                             posix users.         (line  26)
* gethostbyaddr:                         posix socket hosts.  (line  78)
* gethostbyname:                         posix socket hosts.  (line  45)
* gethostbyname2:                        glibc socket.        (line  49)
* getitimer:                             posix time functions.
                                                              (line  93)
* getlogin:                              posix users.         (line  70)
* getlogin/string:                       posix users.         (line  71)
* getnetbyaddr:                          posix socket networks.
                                                              (line  49)
* getnetbyname:                          posix socket networks.
                                                              (line  34)
* getopts:                               getopts parser.      (line   6)
* getopts <1>:                           getopts parser.      (line   7)
* getopts-condition?:                    getopts conditions.  (line  22)
* getopts-options:                       getopts config.      (line  29)
* getpeername:                           posix socket socket. (line  76)
* getpgrp:                               posix job.           (line  27)
* getpid:                                posix pid.           (line   6)
* getppid:                               posix pid.           (line   9)
* getprotobyname:                        posix socket protocols.
                                                              (line  28)
* getprotobynumber:                      posix socket protocols.
                                                              (line  42)
* getpwnam:                              posix users.         (line 125)
* getpwuid:                              posix users.         (line 118)
* getrlimit:                             posix resources funcs.
                                                              (line  11)
* getrlimit <1>:                         posix resources funcs.
                                                              (line  12)
* getrusage:                             posix resources funcs.
                                                              (line  43)
* getrusage <1>:                         posix resources funcs.
                                                              (line  44)
* getservbyname:                         posix socket services.
                                                              (line  32)
* getservbynumber:                       posix socket services.
                                                              (line  54)
* getsid:                                posix job.           (line  21)
* getsockname:                           posix socket socket. (line  83)
* getsockopt:                            posix socket socket. (line 166)
* getsockopt/int:                        posix socket socket. (line 180)
* getsockopt/linger:                     posix socket socket. (line 201)
* getsockopt/size_t:                     posix socket socket. (line 187)
* gettimeofday:                          posix time functions.
                                                              (line  22)
* getuid:                                posix users.         (line   6)
* getumask:                              posix file.          (line  52)
* glob:                                  glibc match.         (line  34)
* glob/string:                           glibc match.         (line  35)
* gmtime:                                posix time functions.
                                                              (line  35)
* greatest-c-off_t:                      words limits.        (line 112)
* greatest-c-off_t*:                     words limits.        (line 225)
* greatest-c-pointer:                    words limits.        (line  97)
* greatest-c-pointer*:                   words limits.        (line 210)
* greatest-c-ptrdiff_t:                  words limits.        (line 117)
* greatest-c-ptrdiff_t*:                 words limits.        (line 230)
* greatest-c-signed-char:                words limits.        (line  63)
* greatest-c-signed-char*:               words limits.        (line 176)
* greatest-c-signed-int:                 words limits.        (line  77)
* greatest-c-signed-int*:                words limits.        (line 190)
* greatest-c-signed-long:                words limits.        (line  84)
* greatest-c-signed-long*:               words limits.        (line 197)
* greatest-c-signed-long-long:           words limits.        (line  91)
* greatest-c-signed-long-long*:          words limits.        (line 204)
* greatest-c-signed-short:               words limits.        (line  70)
* greatest-c-signed-short*:              words limits.        (line 183)
* greatest-c-size_t:                     words limits.        (line 102)
* greatest-c-size_t*:                    words limits.        (line 215)
* greatest-c-ssize_t:                    words limits.        (line 107)
* greatest-c-ssize_t*:                   words limits.        (line 220)
* greatest-c-unsigned-char:              words limits.        (line  62)
* greatest-c-unsigned-char*:             words limits.        (line 175)
* greatest-c-unsigned-int:               words limits.        (line  76)
* greatest-c-unsigned-int*:              words limits.        (line 189)
* greatest-c-unsigned-long:              words limits.        (line  83)
* greatest-c-unsigned-long*:             words limits.        (line 196)
* greatest-c-unsigned-long-long:         words limits.        (line  90)
* greatest-c-unsigned-long-long*:        words limits.        (line 203)
* greatest-c-unsigned-short:             words limits.        (line  69)
* greatest-c-unsigned-short*:            words limits.        (line 182)
* greatest-machine-word:                 words limits.        (line  54)
* greatest-machine-word*:                words limits.        (line 167)
* greatest-s128:                         words limits.        (line  40)
* greatest-s128*:                        words limits.        (line 153)
* greatest-s16:                          words limits.        (line  20)
* greatest-s16*:                         words limits.        (line 133)
* greatest-s256:                         words limits.        (line  47)
* greatest-s256*:                        words limits.        (line 160)
* greatest-s32:                          words limits.        (line  27)
* greatest-s32*:                         words limits.        (line 140)
* greatest-s64:                          words limits.        (line  34)
* greatest-s64*:                         words limits.        (line 147)
* greatest-s8:                           words limits.        (line  13)
* greatest-s8*:                          words limits.        (line 126)
* greatest-u128:                         words limits.        (line  41)
* greatest-u128*:                        words limits.        (line 154)
* greatest-u16:                          words limits.        (line  19)
* greatest-u16*:                         words limits.        (line 132)
* greatest-u256:                         words limits.        (line  48)
* greatest-u256*:                        words limits.        (line 161)
* greatest-u32:                          words limits.        (line  26)
* greatest-u32*:                         words limits.        (line 139)
* greatest-u64:                          words limits.        (line  33)
* greatest-u64*:                         words limits.        (line 146)
* greatest-u8:                           words limits.        (line  12)
* greatest-u8*:                          words limits.        (line 125)
* group-entries:                         posix users.         (line 173)
* gtree->itree:                          srfi ilists procs conversion.
                                                              (line  46)
* gtree->tree:                           srfi ilists procs conversion.
                                                              (line  47)
* handler-bind:                          restarts handler-bind.
                                                              (line   6)
* handler-case:                          restarts handler-case.
                                                              (line   6)
* hash:                                  srfi hash-tables spec hashing.
                                                              (line  27)
* hash <1>:                              srfi hash-tables spec hashing.
                                                              (line  28)
* hash on <bitvector>:                   bitvectors type.     (line  19)
* hash-by-identity:                      srfi hash-tables spec hashing.
                                                              (line  47)
* hash-by-identity <1>:                  srfi hash-tables spec hashing.
                                                              (line  48)
* hash-table->alist:                     srfi hash-tables spec whole.
                                                              (line  52)
* hash-table-copy:                       srfi hash-tables spec whole.
                                                              (line  65)
* hash-table-delete!:                    srfi hash-tables spec single.
                                                              (line  43)
* hash-table-equivalence-function:       srfi hash-tables spec queries.
                                                              (line   6)
* hash-table-exists?:                    srfi hash-tables spec single.
                                                              (line  54)
* hash-table-fold:                       srfi hash-tables spec whole.
                                                              (line  36)
* hash-table-hash-function:              srfi hash-tables spec queries.
                                                              (line   9)
* hash-table-keys:                       srfi hash-tables spec whole.
                                                              (line  11)
* hash-table-merge!:                     srfi hash-tables spec whole.
                                                              (line  69)
* hash-table-ref:                        srfi hash-tables spec single.
                                                              (line   6)
* hash-table-ref <1>:                    srfi hash-tables spec single.
                                                              (line   7)
* hash-table-ref/default:                srfi hash-tables spec single.
                                                              (line  20)
* hash-table-set!:                       srfi hash-tables spec single.
                                                              (line  32)
* hash-table-size:                       srfi hash-tables spec whole.
                                                              (line   6)
* hash-table-update!:                    srfi hash-tables spec single.
                                                              (line  65)
* hash-table-update! <1>:                srfi hash-tables spec single.
                                                              (line  66)
* hash-table-update!/default:            srfi hash-tables spec single.
                                                              (line  73)
* hash-table-values:                     srfi hash-tables spec whole.
                                                              (line  15)
* hash-table-walk:                       srfi hash-tables spec whole.
                                                              (line  20)
* hash-table?:                           srfi hash-tables spec type.
                                                              (line  27)
* hook->list:                            hooks.               (line  35)
* hook-empty?:                           hooks.               (line  18)
* hook?:                                 hooks.               (line  15)
* host-entries:                          posix socket hosts.  (line  86)
* htonl:                                 posix socket misc.   (line  19)
* htons:                                 posix socket misc.   (line  36)
* h_errno->string:                       posix socket misc.   (line   6)
* h_errno-condition?:                    posix conditions.    (line  29)
* h_strerror:                            posix socket misc.   (line  10)
* ialist-cons:                           srfi ilists procs alists.
                                                              (line  49)
* ialist-copy:                           srfi ilists procs alists.
                                                              (line  56)
* ialist-delete:                         srfi ilists procs alists.
                                                              (line  65)
* ialist-delete <1>:                     srfi ilists procs alists.
                                                              (line  66)
* iany:                                  srfi ilists procs searching.
                                                              (line 129)
* iappend:                               srfi ilists procs misc.
                                                              (line  13)
* iappend-map:                           srfi ilists procs fold.
                                                              (line 348)
* iappend-reverse:                       srfi ilists procs misc.
                                                              (line  56)
* iapply:                                srfi ilists procs apply.
                                                              (line   8)
* iassoc:                                srfi ilists procs alists.
                                                              (line  13)
* iassoc <1>:                            srfi ilists procs alists.
                                                              (line  14)
* iassq:                                 srfi ilists procs alists.
                                                              (line  15)
* iassv:                                 srfi ilists procs alists.
                                                              (line  16)
* ibreak:                                srfi ilists procs searching.
                                                              (line 108)
* icaaaar:                               srfi ilists procs selectors.
                                                              (line  40)
* icaaadr:                               srfi ilists procs selectors.
                                                              (line  41)
* icaaar:                                srfi ilists procs selectors.
                                                              (line  30)
* icaadar:                               srfi ilists procs selectors.
                                                              (line  42)
* icaaddr:                               srfi ilists procs selectors.
                                                              (line  43)
* icaadr:                                srfi ilists procs selectors.
                                                              (line  31)
* icaar:                                 srfi ilists procs selectors.
                                                              (line  24)
* icadaar:                               srfi ilists procs selectors.
                                                              (line  44)
* icadadr:                               srfi ilists procs selectors.
                                                              (line  45)
* icadar:                                srfi ilists procs selectors.
                                                              (line  32)
* icaddar:                               srfi ilists procs selectors.
                                                              (line  46)
* icadddr:                               srfi ilists procs selectors.
                                                              (line  47)
* icaddr:                                srfi ilists procs selectors.
                                                              (line  33)
* icadr:                                 srfi ilists procs selectors.
                                                              (line  25)
* icar:                                  srfi ilists procs selectors.
                                                              (line   6)
* icar+icdr:                             srfi ilists procs selectors.
                                                              (line  79)
* icdaaar:                               srfi ilists procs selectors.
                                                              (line  48)
* icdaadr:                               srfi ilists procs selectors.
                                                              (line  49)
* icdaar:                                srfi ilists procs selectors.
                                                              (line  34)
* icdadar:                               srfi ilists procs selectors.
                                                              (line  50)
* icdaddr:                               srfi ilists procs selectors.
                                                              (line  51)
* icdadr:                                srfi ilists procs selectors.
                                                              (line  35)
* icdar:                                 srfi ilists procs selectors.
                                                              (line  26)
* icddaar:                               srfi ilists procs selectors.
                                                              (line  52)
* icddadr:                               srfi ilists procs selectors.
                                                              (line  53)
* icddar:                                srfi ilists procs selectors.
                                                              (line  36)
* icdddar:                               srfi ilists procs selectors.
                                                              (line  54)
* icddddr:                               srfi ilists procs selectors.
                                                              (line  55)
* icdddr:                                srfi ilists procs selectors.
                                                              (line  37)
* icddr:                                 srfi ilists procs selectors.
                                                              (line  27)
* icdr:                                  srfi ilists procs selectors.
                                                              (line   7)
* iconcatenate:                          srfi ilists procs misc.
                                                              (line  31)
* iconv!:                                iconv conv.          (line  49)
* iconv-close:                           iconv conv.          (line  43)
* iconv-closed?:                         iconv conv.          (line  39)
* iconv-encoding:                        iconv set.           (line  17)
* iconv-encoding-aliases?:               iconv set.           (line  33)
* iconv-encoding=?:                      iconv set.           (line  38)
* iconv-open:                            iconv conv.          (line  25)
* iconv?:                                iconv conv.          (line  35)
* icount:                                srfi ilists procs misc.
                                                              (line 111)
* idelete:                               srfi ilists procs deletion.
                                                              (line   6)
* idelete <1>:                           srfi ilists procs deletion.
                                                              (line   7)
* idelete-duplicates:                    srfi ilists procs deletion.
                                                              (line  31)
* idelete-duplicates <1>:                srfi ilists procs deletion.
                                                              (line  32)
* identifier:                            args predefined identifier.
                                                              (line   9)
* identifier/false:                      args predefined identifier.
                                                              (line  13)
* ideque-chain-first-link:               ideques chains.      (line  44)
* ideque-chain-last-link:                ideques chains.      (line  48)
* ideque-chain?:                         ideques chains.      (line  40)
* ideque-deque?:                         ideques deques.      (line  39)
* ideque-dynamic-array?:                 ideques dynamic arrays.
                                                              (line  38)
* ideque-empty?:                         ideques common.      (line  74)
* ideque-front:                          ideques common.      (line  77)
* ideque-pop-front!:                     ideques common.      (line  89)
* ideque-pop-rear!:                      ideques common.      (line  92)
* ideque-push-front!:                    ideques common.      (line  83)
* ideque-push-rear!:                     ideques common.      (line  86)
* ideque-rear:                           ideques common.      (line  80)
* ideque?:                               ideques common.      (line  70)
* idrop:                                 srfi ilists procs selectors.
                                                              (line  87)
* idrop-left:                            srfi ilists procs selectors.
                                                              (line 113)
* idrop-right:                           srfi ilists procs selectors.
                                                              (line 119)
* idrop-while:                           srfi ilists procs searching.
                                                              (line 101)
* ieighth:                               srfi ilists procs selectors.
                                                              (line  72)
* ievery:                                srfi ilists procs searching.
                                                              (line 159)
* if:                                    loops qualifiers.    (line  22)
* if <1>:                                srfi eager-comp spec qualifiers.
                                                              (line  22)
* if-nameindex:                          glibc socket.        (line  34)
* if-nametoindex:                        glibc socket.        (line   8)
* if-not=?:                              comparisons branch.  (line  37)
* if-not=? <1>:                          comparisons branch.  (line  38)
* if-not=? <2>:                          srfi compare-procedures spec using.
                                                              (line  50)
* if-not=? <3>:                          srfi compare-procedures spec using.
                                                              (line  51)
* if-not=? <4>:                          srfi comparators syntax.
                                                              (line  43)
* if-not=? <5>:                          srfi comparators syntax.
                                                              (line  44)
* if3:                                   comparisons branch.  (line  10)
* if3 <1>:                               srfi compare-procedures spec using.
                                                              (line  10)
* if3 <2>:                               srfi comparators syntax.
                                                              (line   9)
* if<=?:                                 comparisons branch.  (line  33)
* if<=? <1>:                             comparisons branch.  (line  34)
* if<=? <2>:                             srfi compare-procedures spec using.
                                                              (line  46)
* if<=? <3>:                             srfi compare-procedures spec using.
                                                              (line  47)
* if<=? <4>:                             srfi comparators syntax.
                                                              (line  39)
* if<=? <5>:                             srfi comparators syntax.
                                                              (line  40)
* if<?:                                  comparisons branch.  (line  29)
* if<? <1>:                              comparisons branch.  (line  30)
* if<? <2>:                              srfi compare-procedures spec using.
                                                              (line  42)
* if<? <3>:                              srfi compare-procedures spec using.
                                                              (line  43)
* if<? <4>:                              srfi comparators syntax.
                                                              (line  35)
* if<? <5>:                              srfi comparators syntax.
                                                              (line  36)
* if=?:                                  comparisons branch.  (line  27)
* if=? <1>:                              comparisons branch.  (line  28)
* if=? <2>:                              srfi compare-procedures spec using.
                                                              (line  40)
* if=? <3>:                              srfi compare-procedures spec using.
                                                              (line  41)
* if=? <4>:                              srfi comparators syntax.
                                                              (line  33)
* if=? <5>:                              srfi comparators syntax.
                                                              (line  34)
* if>=?:                                 comparisons branch.  (line  35)
* if>=? <1>:                             comparisons branch.  (line  36)
* if>=? <2>:                             srfi compare-procedures spec using.
                                                              (line  48)
* if>=? <3>:                             srfi compare-procedures spec using.
                                                              (line  49)
* if>=? <4>:                             srfi comparators syntax.
                                                              (line  41)
* if>=? <5>:                             srfi comparators syntax.
                                                              (line  42)
* if>?:                                  comparisons branch.  (line  31)
* if>? <1>:                              comparisons branch.  (line  32)
* if>? <2>:                              srfi compare-procedures spec using.
                                                              (line  44)
* if>? <3>:                              srfi compare-procedures spec using.
                                                              (line  45)
* if>? <4>:                              srfi comparators syntax.
                                                              (line  37)
* if>? <5>:                              srfi comparators syntax.
                                                              (line  38)
* ififth:                                srfi ilists procs selectors.
                                                              (line  69)
* ifilter:                               srfi ilists procs filter.
                                                              (line   6)
* ifilter-map:                           srfi ilists procs fold.
                                                              (line 389)
* ifind:                                 srfi ilists procs searching.
                                                              (line  55)
* ifind-tail:                            srfi ilists procs searching.
                                                              (line  75)
* ifirst:                                srfi ilists procs selectors.
                                                              (line  65)
* ifold:                                 srfi ilists procs fold.
                                                              (line   6)
* ifold-right:                           srfi ilists procs fold.
                                                              (line  52)
* ifor-each:                             srfi ilists procs fold.
                                                              (line 334)
* ifourth:                               srfi ilists procs selectors.
                                                              (line  68)
* ignore-errors:                         restarts ignore-errors.
                                                              (line   6)
* iiota:                                 srfi ilists procs constructors.
                                                              (line  62)
* iiota <1>:                             srfi ilists procs constructors.
                                                              (line  63)
* ikptr:                                 glibc socket.        (line  22)
* ilast:                                 srfi ilists procs selectors.
                                                              (line 149)
* ilength:                               srfi ilists procs misc.
                                                              (line   6)
* ilist:                                 srfi ilists procs constructors.
                                                              (line  17)
* ilist->list:                           srfi ilists procs conversion.
                                                              (line  15)
* ilist->list <1>:                       srfi ilists procs conversion.
                                                              (line  25)
* ilist-copy:                            srfi ilists procs constructors.
                                                              (line  59)
* ilist-index:                           srfi ilists procs searching.
                                                              (line 182)
* ilist-ref:                             srfi ilists procs selectors.
                                                              (line  58)
* ilist-tabulate:                        srfi ilists procs constructors.
                                                              (line  52)
* ilist-tail:                            srfi ilists procs selectors.
                                                              (line  88)
* ilist=:                                srfi ilists procs predicates.
                                                              (line  54)
* ilist?:                                srfi ilists procs predicates.
                                                              (line   7)
* imap:                                  srfi ilists procs fold.
                                                              (line 311)
* imap-in-order:                         srfi ilists procs fold.
                                                              (line 369)
* imember:                               srfi ilists procs searching.
                                                              (line 203)
* imember <1>:                           srfi ilists procs searching.
                                                              (line 204)
* imemq:                                 srfi ilists procs searching.
                                                              (line 205)
* imemv:                                 srfi ilists procs searching.
                                                              (line 206)
* implementation-name:                   srfi env-inquiry spec.
                                                              (line  31)
* implementation-version:                srfi env-inquiry spec.
                                                              (line  36)
* in-closed-interval?:                   srfi comparators ternary.
                                                              (line  46)
* in-closed-interval? <1>:               srfi comparators ternary.
                                                              (line  47)
* in-closed-open-interval?:              srfi comparators ternary.
                                                              (line 116)
* in-closed-open-interval? <1>:          srfi comparators ternary.
                                                              (line 117)
* in-open-closed-interval?:              srfi comparators ternary.
                                                              (line  81)
* in-open-closed-interval? <1>:          srfi comparators ternary.
                                                              (line  82)
* in-open-interval?:                     srfi comparators ternary.
                                                              (line  11)
* in-open-interval? <1>:                 srfi comparators ternary.
                                                              (line  12)
* in6addr_any:                           posix socket addresses in6.
                                                              (line  40)
* in6addr_loopback:                      posix socket addresses in6.
                                                              (line  39)
* IN6_ARE_ADDR_EQUAL:                    glibc net.           (line  45)
* IN6_IS_ADDR_LINKLOCAL:                 glibc net.           (line  32)
* IN6_IS_ADDR_LOOPBACK:                  glibc net.           (line  31)
* IN6_IS_ADDR_MC_GLOBAL:                 glibc net.           (line  41)
* IN6_IS_ADDR_MC_LINKLOCAL:              glibc net.           (line  38)
* IN6_IS_ADDR_MC_NODELOCAL:              glibc net.           (line  37)
* IN6_IS_ADDR_MC_ORGLOCAL:               glibc net.           (line  40)
* IN6_IS_ADDR_MC_SITELOCAL:              glibc net.           (line  39)
* IN6_IS_ADDR_MULTICAST:                 glibc net.           (line  36)
* IN6_IS_ADDR_SITELOCAL:                 glibc net.           (line  33)
* IN6_IS_ADDR_UNSPECIFIED:               glibc net.           (line  30)
* IN6_IS_ADDR_V4COMPAT:                  glibc net.           (line  35)
* IN6_IS_ADDR_V4MAPPED:                  glibc net.           (line  34)
* inactive? on <<channel>>:              net channels ifaces channel.
                                                              (line  47)
* inactive? on <channel>:                net channels channels channel.
                                                              (line  45)
* include:                               include.             (line   9)
* include/lexical-context:               include.             (line  15)
* index-and-count-for-bytevector:        args predefined bytevectors.
                                                              (line  33)
* index-and-count-for-string:            args predefined strings.
                                                              (line  44)
* index-and-count-for-vector:            args predefined vectors.
                                                              (line  26)
* index-for-bytevector:                  args predefined bytevectors.
                                                              (line  25)
* index-for-string:                      args predefined strings.
                                                              (line  30)
* index-for-vector:                      args predefined vectors.
                                                              (line  22)
* inet-aton:                             posix socket addresses rep.
                                                              (line  19)
* inet-ntoa:                             posix socket addresses rep.
                                                              (line  25)
* inet-ntoa/string:                      posix socket addresses rep.
                                                              (line  26)
* inet-ntop:                             posix socket addresses rep.
                                                              (line  61)
* inet-ntop/string:                      posix socket addresses rep.
                                                              (line  62)
* inet-pton:                             posix socket addresses rep.
                                                              (line  54)
* inexact-real-comparator-with-ignored-epsilon.epsilon: srfi comparators conditions.
                                                              (line 152)
* inexact-real-comparator-with-ignored-epsilon.rounding: srfi comparators conditions.
                                                              (line 153)
* ininth:                                srfi ilists procs selectors.
                                                              (line  73)
* initialise:                            posix sel.           (line  32)
* initialise <1>:                        gcc.                 (line  45)
* inotify-add-watch:                     linux inotify.       (line  71)
* inotify-init:                          linux inotify.       (line  56)
* inotify-init1:                         linux inotify.       (line  62)
* inotify-rm-watch:                      linux inotify.       (line  83)
* input-file::                           silex tables.        (line  39)
* input-port:                            args predefined ports.
                                                              (line  15)
* input-port/false:                      args predefined ports.
                                                              (line  20)
* input-port::                           silex tables.        (line  34)
* input-string::                         silex tables.        (line  29)
* input/output-port:                     args predefined ports.
                                                              (line  17)
* input/output-port/false:               args predefined ports.
                                                              (line  22)
* integer-compare:                       comparisons atoms.   (line  37)
* integer-compare <1>:                   srfi compare-procedures spec atom.
                                                              (line  46)
* invalid-option-condition?:             getopts conditions.  (line 130)
* invoke-restart:                        restarts invoke.     (line  18)
* IN_BADCLASS:                           glibc net.           (line  14)
* IN_CLASSA:                             glibc net.           (line   8)
* IN_CLASSB:                             glibc net.           (line   9)
* IN_CLASSC:                             glibc net.           (line  10)
* IN_CLASSD:                             glibc net.           (line  11)
* IN_EXPERIMENTAL:                       glibc net.           (line  13)
* IN_MULTICAST:                          glibc net.           (line  12)
* ioctl:                                 posix fd device.     (line  16)
* ioctl <1>:                             posix fd device.     (line  17)
* ior on <bitvector>:                    bitvectors bits.     (line  36)
* ior! on <bitvector>:                   bitvectors bits.     (line  43)
* iota:                                  srfi list spec cons. (line  65)
* iota <1>:                              lists cons.          (line  52)
* iota <2>:                              lists cons.          (line  53)
* iota <3>:                              lists cons.          (line  54)
* iota/stx:                              lists cons.          (line  55)
* iota/stx <1>:                          lists cons.          (line  56)
* iota/stx <2>:                          lists cons.          (line  57)
* ip-protocol:                           srfi basic-socket spec flag.
                                                              (line  66)
* ipair:                                 srfi ilists procs constructors.
                                                              (line   6)
* ipair*:                                srfi ilists procs constructors.
                                                              (line  35)
* ipair->pair:                           srfi ilists procs conversion.
                                                              (line   9)
* ipair-fold:                            srfi ilists procs fold.
                                                              (line  88)
* ipair-fold-right:                      srfi ilists procs fold.
                                                              (line 104)
* ipair-for-each:                        srfi ilists procs fold.
                                                              (line 375)
* ipair?:                                srfi ilists procs predicates.
                                                              (line  27)
* ipartition:                            srfi ilists procs filter.
                                                              (line  16)
* iq:                                    srfi ilists quotation.
                                                              (line  24)
* iquasiquote:                           srfi ilists quotation.
                                                              (line 121)
* iqueue-chain-first-link:               iqueues chains.      (line  44)
* iqueue-chain-last-link:                iqueues chains.      (line  48)
* iqueue-chain?:                         iqueues chains.      (line  40)
* iqueue-deque?:                         iqueues deques.      (line  38)
* iqueue-dynamic-array?:                 iqueues dynamic arrays.
                                                              (line  38)
* iqueue-empty?:                         iqueues common.      (line  58)
* iqueue-pop!:                           iqueues common.      (line  67)
* iqueue-push!:                          iqueues common.      (line  64)
* iqueue-queue?:                         iqueues queues.      (line  38)
* iqueue-top:                            iqueues common.      (line  61)
* iqueue?:                               iqueues common.      (line  54)
* iquote:                                srfi ilists quotation.
                                                              (line  83)
* ireduce:                               srfi ilists procs fold.
                                                              (line 117)
* ireduce-right:                         srfi ilists procs fold.
                                                              (line 150)
* iremove:                               srfi ilists procs filter.
                                                              (line  28)
* ireverse:                              srfi ilists procs misc.
                                                              (line  49)
* irregex:                               irregex compile.     (line   6)
* irregex-extract:                       irregex misc.        (line   8)
* irregex-extract <1>:                   irregex misc.        (line   9)
* irregex-fold:                          irregex misc.        (line  15)
* irregex-fold/chunked:                  irregex chunk.       (line 112)
* irregex-fold/chunked <1>:              irregex chunk.       (line 113)
* irregex-fold/chunked <2>:              irregex chunk.       (line 114)
* irregex-match:                         irregex match.       (line  35)
* irregex-match-data?:                   irregex pred.        (line  11)
* irregex-match-end-index:               irregex match.       (line  50)
* irregex-match-start-index:             irregex match.       (line  49)
* irregex-match-subchunk:                irregex chunk.       (line  67)
* irregex-match-subchunk <1>:            irregex chunk.       (line  68)
* irregex-match-substring:               irregex match.       (line  47)
* irregex-match-substring <1>:           irregex match.       (line  48)
* irregex-match/chunked:                 irregex chunk.       (line  76)
* irregex-match/chunked <1>:             irregex chunk.       (line  77)
* irregex-opt:                           irregex misc.        (line  56)
* irregex-quote:                         irregex misc.        (line  51)
* irregex-replace:                       irregex replace.     (line   6)
* irregex-replace/all:                   irregex replace.     (line   7)
* irregex-search:                        irregex match.       (line   6)
* irregex-search <1>:                    irregex match.       (line   7)
* irregex-search <2>:                    irregex match.       (line   8)
* irregex-search/chunked:                irregex chunk.       (line  74)
* irregex-search/chunked <1>:            irregex chunk.       (line  75)
* irregex-split:                         irregex misc.        (line   6)
* irregex-split <1>:                     irregex misc.        (line   7)
* irregex?:                              irregex pred.        (line   6)
* isecond:                               srfi ilists procs selectors.
                                                              (line  66)
* iseventh:                              srfi ilists procs selectors.
                                                              (line  71)
* isixth:                                srfi ilists procs selectors.
                                                              (line  70)
* ispan:                                 srfi ilists procs searching.
                                                              (line 107)
* isplit-at:                             srfi ilists procs selectors.
                                                              (line 143)
* istack-chain-first-pair:               istacks chains.      (line  42)
* istack-chain?:                         istacks chains.      (line  38)
* istack-deque?:                         istacks deques.      (line  38)
* istack-dynamic-array?:                 istacks dynamic arrays.
                                                              (line  38)
* istack-empty?:                         istacks common.      (line  58)
* istack-ilist-first-pair:               istacks ilists.      (line  43)
* istack-ilist?:                         istacks ilists.      (line  39)
* istack-list-first-pair:                istacks lists.       (line  42)
* istack-list?:                          istacks lists.       (line  38)
* istack-pop!:                           istacks common.      (line  67)
* istack-push!:                          istacks common.      (line  64)
* istack-ralist-first-pair:              istacks ralists.     (line  44)
* istack-ralist?:                        istacks ralists.     (line  40)
* istack-stack?:                         istacks stacks.      (line  38)
* istack-top:                            istacks common.      (line  61)
* istack?:                               istacks common.      (line  54)
* itake:                                 srfi ilists procs selectors.
                                                              (line  86)
* itake-left:                            srfi ilists procs selectors.
                                                              (line 112)
* itake-right:                           srfi ilists procs selectors.
                                                              (line 118)
* itake-while:                           srfi ilists procs searching.
                                                              (line  95)
* itenth:                                srfi ilists procs selectors.
                                                              (line  74)
* iteration-thunk-exists:                iteration thunks searching.
                                                              (line  37)
* iteration-thunk-filter:                iteration thunks filtering.
                                                              (line  10)
* iteration-thunk-find:                  iteration thunks searching.
                                                              (line  64)
* iteration-thunk-find <1>:              iteration thunks searching.
                                                              (line  65)
* iteration-thunk-fold:                  iteration thunks folding.
                                                              (line  10)
* iteration-thunk-for-all:               iteration thunks searching.
                                                              (line  10)
* iteration-thunk-for-each:              iteration thunks mapping.
                                                              (line  37)
* iteration-thunk-map:                   iteration thunks mapping.
                                                              (line  10)
* iteration-thunk-partition:             iteration thunks filtering.
                                                              (line  34)
* ithird:                                srfi ilists procs selectors.
                                                              (line  67)
* itree->tree:                           srfi ilists procs conversion.
                                                              (line  34)
* iunfold:                               srfi ilists procs fold.
                                                              (line 168)
* iunfold <1>:                           srfi ilists procs fold.
                                                              (line 169)
* iunfold-right:                         srfi ilists procs fold.
                                                              (line 241)
* iunfold-right <1>:                     srfi ilists procs fold.
                                                              (line 242)
* iunquote:                              srfi ilists quotation.
                                                              (line 122)
* iunquote-splicing:                     srfi ilists quotation.
                                                              (line 123)
* iunzip1:                               srfi ilists procs misc.
                                                              (line  90)
* iunzip2:                               srfi ilists procs misc.
                                                              (line  91)
* iunzip3:                               srfi ilists procs misc.
                                                              (line  92)
* iunzip4:                               srfi ilists procs misc.
                                                              (line  93)
* iunzip5:                               srfi ilists procs misc.
                                                              (line  94)
* izip:                                  srfi ilists procs misc.
                                                              (line  72)
* j0:                                    glibc math.          (line  95)
* j1:                                    glibc math.          (line  96)
* jn:                                    glibc math.          (line  97)
* julian-day->date:                      srfi time spec conversion.
                                                              (line  30)
* julian-day->date <1>:                  srfi time spec conversion.
                                                              (line  31)
* julian-day->time-monotonic:            srfi time spec conversion.
                                                              (line  35)
* julian-day->time-tai:                  srfi time spec conversion.
                                                              (line  38)
* julian-day->time-utc:                  srfi time spec conversion.
                                                              (line  41)
* keyword:                               args predefined keywords.
                                                              (line   9)
* kill:                                  posix signal.        (line  11)
* kth-largest:                           comparisons minmax.  (line  16)
* kth-largest <1>:                       srfi compare-procedures spec using.
                                                              (line 252)
* last:                                  srfi list spec select.
                                                              (line 139)
* last <1>:                              lists select.        (line 138)
* last-ec:                               loops comprehensions search.
                                                              (line  19)
* last-ec <1>:                           srfi eager-comp spec comprehensions.
                                                              (line  81)
* last-ipair:                            srfi ilists procs selectors.
                                                              (line 150)
* last-pair:                             srfi list spec select.
                                                              (line 140)
* last-pair <1>:                         lists select.        (line 139)
* last-pair/stx:                         lists select.        (line 141)
* last/stx:                              lists select.        (line 140)
* lazy:                                  srfi lazy spec.      (line  16)
* LDFLAGS:                               gcc.                 (line  80)
* least-c-off_t:                         words limits.        (line 113)
* least-c-off_t*:                        words limits.        (line 226)
* least-c-pointer:                       words limits.        (line  98)
* least-c-pointer*:                      words limits.        (line 211)
* least-c-ptrdiff_t:                     words limits.        (line 118)
* least-c-ptrdiff_t*:                    words limits.        (line 231)
* least-c-signed-char:                   words limits.        (line  65)
* least-c-signed-char*:                  words limits.        (line 178)
* least-c-signed-int:                    words limits.        (line  79)
* least-c-signed-int*:                   words limits.        (line 192)
* least-c-signed-long:                   words limits.        (line  86)
* least-c-signed-long*:                  words limits.        (line 199)
* least-c-signed-long-long:              words limits.        (line  93)
* least-c-signed-long-long*:             words limits.        (line 206)
* least-c-signed-short:                  words limits.        (line  72)
* least-c-signed-short*:                 words limits.        (line 185)
* least-c-size_t:                        words limits.        (line 103)
* least-c-size_t*:                       words limits.        (line 216)
* least-c-ssize_t:                       words limits.        (line 108)
* least-c-ssize_t*:                      words limits.        (line 221)
* least-c-unsigned-char:                 words limits.        (line  64)
* least-c-unsigned-char*:                words limits.        (line 177)
* least-c-unsigned-int:                  words limits.        (line  78)
* least-c-unsigned-int*:                 words limits.        (line 191)
* least-c-unsigned-long:                 words limits.        (line  85)
* least-c-unsigned-long*:                words limits.        (line 198)
* least-c-unsigned-long-long:            words limits.        (line  92)
* least-c-unsigned-long-long*:           words limits.        (line 205)
* least-c-unsigned-short:                words limits.        (line  71)
* least-c-unsigned-short*:               words limits.        (line 184)
* least-machine-word:                    words limits.        (line  55)
* least-machine-word*:                   words limits.        (line 168)
* least-s128:                            words limits.        (line  43)
* least-s128*:                           words limits.        (line 156)
* least-s16:                             words limits.        (line  22)
* least-s16*:                            words limits.        (line 135)
* least-s256:                            words limits.        (line  50)
* least-s256*:                           words limits.        (line 163)
* least-s32:                             words limits.        (line  29)
* least-s32*:                            words limits.        (line 142)
* least-s64:                             words limits.        (line  36)
* least-s64*:                            words limits.        (line 149)
* least-s8:                              words limits.        (line  15)
* least-s8*:                             words limits.        (line 128)
* least-u128:                            words limits.        (line  42)
* least-u128*:                           words limits.        (line 155)
* least-u16:                             words limits.        (line  21)
* least-u16*:                            words limits.        (line 134)
* least-u256:                            words limits.        (line  49)
* least-u256*:                           words limits.        (line 162)
* least-u32:                             words limits.        (line  28)
* least-u32*:                            words limits.        (line 141)
* least-u64:                             words limits.        (line  35)
* least-u64*:                            words limits.        (line 148)
* least-u8:                              words limits.        (line  14)
* least-u8*:                             words limits.        (line 127)
* leave-asap:                            posix sel.           (line  47)
* length:                                srfi list spec misc. (line   6)
* length <1>:                            srfi ralists spec random.
                                                              (line 221)
* length on <bitvector>:                 bitvectors inspection.
                                                              (line   9)
* length+:                               srfi list spec misc. (line   7)
* length+ <1>:                           lists misc.          (line   6)
* length<=?:                             srfi ralists spec random.
                                                              (line 229)
* let:                                   simple-match syntax. (line  14)
* let*-inline:                           syntaxes bindings.   (line  16)
* let*-inline <1>:                       syntaxes bindings.   (line  17)
* let*-keywords:                         keywords.            (line  21)
* let*-values:                           srfi let-values spec.
                                                              (line  37)
* let-inline:                            syntaxes bindings.   (line   9)
* let-keywords:                          keywords.            (line  19)
* let-values:                            srfi let-values spec.
                                                              (line   6)
* letrec*-keywords:                      keywords.            (line  25)
* letrec-keywords:                       keywords.            (line  23)
* levenshtein:                           levenshtein coerce.  (line  20)
* levenshtein/predicate:                 levenshtein coerce.  (line  10)
* lex:                                   silex tables.        (line   9)
* lexer-format::                         silex tables.        (line 137)
* lexer-get-func-column:                 silex input.         (line 117)
* lexer-get-func-getc:                   silex input.         (line 125)
* lexer-get-func-line:                   silex input.         (line 113)
* lexer-get-func-offset:                 silex input.         (line 121)
* lexer-get-func-ungetc:                 silex input.         (line 139)
* lexer-input-system?:                   silex input.         (line 109)
* lgamma:                                glibc math.          (line  84)
* library-imports::                      silex tables.        (line  79)
* library-language::                     silex tables.        (line  74)
* library-spec::                         silex tables.        (line  45)
* linear-access-list->random-access-list: srfi ralists spec repre.
                                                              (line   7)
* link:                                  posix link.          (line   6)
* LINK-FLAGS:                            gcc.                 (line  72)
* list:                                  srfi list spec cons. (line  17)
* list <1>:                              srfi ralists spec random.
                                                              (line 204)
* list <2>:                              args predefined pairs.
                                                              (line  12)
* list on <bitvector>:                   bitvectors conv.     (line   9)
* list->bag:                             srfi sets-and-bags copy.
                                                              (line  61)
* list->bag!:                            srfi sets-and-bags copy.
                                                              (line  68)
* list->bitvector:                       bitvectors conv.     (line  19)
* list->chain:                           chains conversion.   (line  13)
* list->char-set:                        srfi char-sets spec create.
                                                              (line  15)
* list->char-set <1>:                    srfi char-sets spec create.
                                                              (line  16)
* list->char-set <2>:                    char-sets ops.       (line  85)
* list->char-set <3>:                    char-sets ops.       (line  86)
* list->char-set!:                       srfi char-sets spec create.
                                                              (line  17)
* list->circular-list!:                  lists circ.          (line  16)
* list->circular-list!/stx:              lists circ.          (line  17)
* list->deque:                           deques conversion.   (line  13)
* list->dynamic-array:                   dynamic arrays conversion.
                                                              (line  13)
* list->ilist:                           srfi ilists procs conversion.
                                                              (line  14)
* list->position:                        arrays positions.    (line  32)
* list->queue:                           queues conversion.   (line  13)
* list->set:                             srfi sets-and-bags copy.
                                                              (line  60)
* list->set!:                            srfi sets-and-bags copy.
                                                              (line  67)
* list->stack:                           stacks conversion.   (line  13)
* list->stream:                          streams from.        (line   6)
* list->stream <1>:                      srfi streams derived.
                                                              (line  29)
* list->string:                          srfi strings spec list.
                                                              (line   9)
* list->vector:                          srfi vector spec conv.
                                                              (line  14)
* list-compare:                          comparisons sequence.
                                                              (line  46)
* list-compare <1>:                      comparisons sequence.
                                                              (line  47)
* list-compare <2>:                      comparisons sequence.
                                                              (line  48)
* list-compare <3>:                      srfi compare-procedures spec seq.
                                                              (line  48)
* list-compare <4>:                      srfi compare-procedures spec seq.
                                                              (line  49)
* list-compare <5>:                      srfi compare-procedures spec seq.
                                                              (line  50)
* list-compare-as-vector:                comparisons sequence.
                                                              (line  49)
* list-compare-as-vector <1>:            comparisons sequence.
                                                              (line  50)
* list-compare-as-vector <2>:            comparisons sequence.
                                                              (line  51)
* list-compare-as-vector <3>:            srfi compare-procedures spec seq.
                                                              (line  51)
* list-compare-as-vector <4>:            srfi compare-procedures spec seq.
                                                              (line  52)
* list-compare-as-vector <5>:            srfi compare-procedures spec seq.
                                                              (line  53)
* list-copy:                             srfi list spec cons. (line  57)
* list-copy <1>:                         lists cons.          (line  28)
* list-copy/stx:                         lists cons.          (line  29)
* list-ec:                               loops comprehensions list.
                                                              (line   6)
* list-ec <1>:                           srfi eager-comp spec comprehensions.
                                                              (line  12)
* list-index:                            srfi list spec search.
                                                              (line 220)
* list-index <1>:                        lists search.        (line 139)
* list-index*:                           lists search.        (line 140)
* list-levenshtein:                      levenshtein basic.   (line  38)
* list-levenshtein/eq:                   levenshtein basic.   (line  35)
* list-levenshtein/equal:                levenshtein basic.   (line  37)
* list-levenshtein/eqv:                  levenshtein basic.   (line  36)
* list-levenshtein/predicate:            levenshtein basic.   (line  34)
* list-of-bytevectors:                   args predefined bytevectors.
                                                              (line  22)
* list-of-coordinates:                   arrays coordinates.  (line  25)
* list-of-positions:                     arrays positions.    (line  97)
* list-of-segments?:                     parser-tools unix-pathnames preds.
                                                              (line  37)
* list-of-strings:                       args predefined strings.
                                                              (line  22)
* list-of-symbols:                       args predefined symbols.
                                                              (line  15)
* list-ref:                              srfi list spec select.
                                                              (line  30)
* list-ref <1>:                          srfi ralists spec random.
                                                              (line 273)
* list-ref/update:                       srfi ralists spec random.
                                                              (line 298)
* list-set:                              srfi ralists spec random.
                                                              (line 285)
* list-tabulate:                         srfi list spec cons. (line  50)
* list-tabulate <1>:                     lists cons.          (line  37)
* list-tabulate/reverse:                 lists cons.          (line  38)
* list-tabulate/reverse/stx:             lists cons.          (line  40)
* list-tabulate/stx:                     lists cons.          (line  39)
* list-tail:                             srfi ralists spec random.
                                                              (line 260)
* list=:                                 srfi list spec pred. (line  70)
* list=?:                                lists compar.        (line   6)
* list?:                                 srfi ralists spec random.
                                                              (line 193)
* listen:                                posix socket socket. (line  46)
* little:                                words syntaxes.      (line  18)
* localtime:                             posix time functions.
                                                              (line  28)
* lock-pid-file-condition?:              posix lock-pid-files cond.
                                                              (line  19)
* lock-pid-file-condition? <1>:          posix lock-pid-files cond.
                                                              (line  34)
* lock-pid-file-condition? <2>:          posix lock-pid-files cond.
                                                              (line  49)
* lock-pid-file-condition? <3>:          posix lock-pid-files cond.
                                                              (line  64)
* lockf:                                 posix fd lock.       (line   6)
* log:                                   posix log-files api. (line  47)
* log-condition-message:                 posix log-files api. (line  68)
* log-pathname:                          posix log-files config.
                                                              (line  27)
* log-port:                              posix log-files config.
                                                              (line  13)
* log-prefix:                            posix log-files config.
                                                              (line  21)
* log-procedure:                         posix sel.           (line  25)
* log-procedure <1>:                     posix pid-files config.
                                                              (line  42)
* logging-enabled?:                      posix log-files config.
                                                              (line   9)
* long:                                  getopts types.       (line  51)
* lseek:                                 posix fd seek.       (line   6)
* lset-adjoin:                           srfi list spec set.  (line  50)
* lset-adjoin <1>:                       lists set.           (line  55)
* lset-diff+intersection:                srfi list spec set.  (line 222)
* lset-diff+intersection <1>:            lists set.           (line 197)
* lset-diff+intersection!:               srfi list spec set.  (line 223)
* lset-diff+intersection! <1>:           lists set.           (line 198)
* lset-difference:                       srfi list spec set.  (line 148)
* lset-difference <1>:                   lists set.           (line 140)
* lset-difference!:                      srfi list spec set.  (line 149)
* lset-difference! <1>:                  lists set.           (line 141)
* lset-intersection:                     srfi list spec set.  (line 108)
* lset-intersection <1>:                 lists set.           (line 110)
* lset-intersection!:                    srfi list spec set.  (line 109)
* lset-intersection! <1>:                lists set.           (line 111)
* lset-union:                            srfi list spec set.  (line  67)
* lset-union <1>:                        lists set.           (line  71)
* lset-union!:                           srfi list spec set.  (line  68)
* lset-union! <1>:                       lists set.           (line  72)
* lset-xor:                              srfi list spec set.  (line 181)
* lset-xor <1>:                          lists set.           (line 165)
* lset-xor!:                             srfi list spec set.  (line 182)
* lset-xor! <1>:                         lists set.           (line 166)
* lset<=:                                srfi list spec set.  (line  22)
* lset<=?:                               lists set.           (line  22)
* lset=:                                 srfi list spec set.  (line  36)
* lset=?:                                lists set.           (line  40)
* lstat:                                 posix stat.          (line  35)
* lutimes:                               posix file.          (line  65)
* machine-name:                          srfi env-inquiry spec.
                                                              (line  48)
* machine-word:                          args predefined bits.
                                                              (line  84)
* machine-word/false:                    args predefined bits.
                                                              (line  85)
* machine-word?:                         words predicates.    (line  13)
* madvise:                               posix mmap.          (line  50)
* mailx:                                 posix mailx.         (line  23)
* make-amb-exhaustion:                   amb api condition.   (line  13)
* make-amb-not-initialised:              amb api condition.   (line  28)
* make-argument-condition:               getopts conditions.  (line  48)
* make-array:                            srfi marray spec.    (line  27)
* make-array <1>:                        srfi marray spec.    (line  28)
* make-binary-heap:                      binary heaps objects.
                                                              (line  17)
* make-binary-heap <1>:                  binary heaps objects.
                                                              (line  18)
* make-binary-heap-iteration-thunk:      binary heaps iterthunks.
                                                              (line  13)
* make-binary-node:                      bst bnodes objects.  (line  31)
* make-binary-node <1>:                  bst bnodes objects.  (line  32)
* make-binary-tree-backwards-breadth-first-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  64)
* make-binary-tree-backwards-in-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  14)
* make-binary-tree-backwards-level-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  55)
* make-binary-tree-backwards-post-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  48)
* make-binary-tree-backwards-pre-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  41)
* make-binary-tree-forwards-breadth-first-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  62)
* make-binary-tree-forwards-in-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  13)
* make-binary-tree-forwards-level-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  54)
* make-binary-tree-forwards-post-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  47)
* make-binary-tree-forwards-pre-order-iteration-thunk: bst bnodes iterating thunks.
                                                              (line  40)
* make-brief/long-condition:             getopts conditions.  (line  64)
* make-bytevector-comparator:            srfi comparators constructors bytevec.
                                                              (line   6)
* make-bytevector-s8-iteration-thunk:    iteration thunks common.
                                                              (line  64)
* make-bytevector-u8-iteration-thunk:    iteration thunks common.
                                                              (line  53)
* make-car-comparator:                   srfi comparators constructors pair.
                                                              (line  45)
* make-cdr-comparator:                   srfi comparators constructors pair.
                                                              (line  82)
* make-chain-backwards-iteration-thunk:  chains iteration thunks.
                                                              (line  36)
* make-chain-forwards-iteration-thunk:   chains iteration thunks.
                                                              (line  13)
* make-chain-link:                       chains objects.      (line  21)
* make-char-lexer:                       silex lexer.         (line  47)
* make-client-socket:                    srfi basic-socket spec cons.
                                                              (line   9)
* make-client-socket <1>:                srfi basic-socket spec cons.
                                                              (line  10)
* make-client-socket <2>:                srfi basic-socket spec cons.
                                                              (line  11)
* make-client-socket <3>:                srfi basic-socket spec cons.
                                                              (line  12)
* make-client-socket <4>:                srfi basic-socket spec cons.
                                                              (line  14)
* make-code-lexer:                       silex lexer.         (line  60)
* make-command-line-option:              getopts types.       (line  41)
* make-comparator:                       srfi comparators constructors general.
                                                              (line   6)
* make-comparator-debug-error:           srfi comparators conditions.
                                                              (line 172)
* make-comparator-error:                 srfi comparators conditions.
                                                              (line  15)
* make-comparator-hashtable:             srfi comparators misc.
                                                              (line   6)
* make-comparator-nan-comparison-error-condition: srfi comparators conditions.
                                                              (line 104)
* make-comparator-type-error:            srfi comparators conditions.
                                                              (line  68)
* make-comparison<:                      srfi comparators compar proc.
                                                              (line   6)
* make-comparison<=:                     srfi comparators compar proc.
                                                              (line   8)
* make-comparison=/<:                    srfi comparators compar proc.
                                                              (line  10)
* make-comparison=/>:                    srfi comparators compar proc.
                                                              (line  11)
* make-comparison>:                      srfi comparators compar proc.
                                                              (line   7)
* make-comparison>=:                     srfi comparators compar proc.
                                                              (line   9)
* make-date:                             srfi time spec date. (line   9)
* make-debug-comparator:                 srfi comparators constructors debug.
                                                              (line   6)
* make-deque:                            deques objects.      (line  18)
* make-deque <1>:                        deques objects.      (line  19)
* make-deque-front-iteration-thunk:      deques iteration thunks.
                                                              (line  13)
* make-deque-rear-iteration-thunk:       deques iteration thunks.
                                                              (line  36)
* make-directory-stream:                 posix dir.           (line  64)
* make-dynamic-array:                    dynamic arrays objects.
                                                              (line  28)
* make-dynamic-array <1>:                dynamic arrays objects.
                                                              (line  29)
* make-dynamic-array-front-iteration-thunk: dynamic arrays iterthunks.
                                                              (line  13)
* make-dynamic-array-rear-iteration-thunk: dynamic arrays iterthunks.
                                                              (line  38)
* make-errno-condition:                  posix conditions.    (line  10)
* make-fd-set-bytevector:                posix fd select fdset.
                                                              (line  19)
* make-fd-set-bytevector <1>:            posix fd select fdset.
                                                              (line  20)
* make-fd-set-memory-block:              posix fd select fdset.
                                                              (line  39)
* make-fd-set-memory-block <1>:          posix fd select fdset.
                                                              (line  40)
* make-fd-set-pointer:                   posix fd select fdset.
                                                              (line  27)
* make-fd-set-pointer <1>:               posix fd select fdset.
                                                              (line  28)
* make-getopts-condition:                getopts conditions.  (line  21)
* make-hash-table:                       srfi hash-tables spec type.
                                                              (line   6)
* make-hash-table <1>:                   srfi hash-tables spec type.
                                                              (line   7)
* make-hash-table <2>:                   srfi hash-tables spec type.
                                                              (line   8)
* make-hash-table <3>:                   srfi hash-tables spec type.
                                                              (line   9)
* make-hook:                             hooks.               (line  12)
* make-h_errno-condition:                posix conditions.    (line  25)
* make-icar-comparator:                  srfi ilists procs comparators.
                                                              (line  52)
* make-icdr-comparator:                  srfi ilists procs comparators.
                                                              (line  56)
* make-ideque on <ideque>:               ideques common.      (line  19)
* make-ideque-chain:                     ideques chains.      (line  33)
* make-ideque-deque:                     ideques deques.      (line  34)
* make-ideque-dynamic-array:             ideques dynamic arrays.
                                                              (line  33)
* make-ilist:                            srfi ilists procs constructors.
                                                              (line  44)
* make-ilist <1>:                        srfi ilists procs constructors.
                                                              (line  45)
* make-ilist-comparator:                 srfi ilists procs comparators.
                                                              (line  39)
* make-ilist-iteration-thunk:            srfi ilists procs iterthunks.
                                                              (line  12)
* make-improper-ilist-comparator:        srfi ilists procs comparators.
                                                              (line  43)
* make-improper-list-comparator:         srfi comparators constructors list.
                                                              (line  57)
* make-inexact-real-comparator:          srfi comparators constructors real.
                                                              (line   6)
* make-inexact-real-comparator-with-ignored-epsilon-condition: srfi comparators conditions.
                                                              (line 139)
* make-invalid-option-condition:         getopts conditions.  (line 129)
* make-iqueue on <iqueue>:               iqueues common.      (line  19)
* make-iqueue-chain:                     iqueues chains.      (line  33)
* make-iqueue-deque:                     iqueues deques.      (line  33)
* make-iqueue-dynamic-array:             iqueues dynamic arrays.
                                                              (line  33)
* make-iqueue-queue:                     iqueues queues.      (line  34)
* make-irregex-chunker:                  irregex chunk.       (line  20)
* make-irregex-chunker <1>:              irregex chunk.       (line  21)
* make-irregex-chunker <2>:              irregex chunk.       (line  22)
* make-irregex-chunker <3>:              irregex chunk.       (line  23)
* make-irregex-chunker <4>:              irregex chunk.       (line  24)
* make-irregex-chunker <5>:              irregex chunk.       (line  26)
* make-IS:                               silex input.         (line  11)
* make-istack on <istack>:               istacks common.      (line  19)
* make-istack-chain:                     istacks chains.      (line  33)
* make-istack-deque:                     istacks deques.      (line  33)
* make-istack-dynamic-array:             istacks dynamic arrays.
                                                              (line  33)
* make-istack-ilist:                     istacks ilists.      (line  32)
* make-istack-ilist <1>:                 istacks ilists.      (line  33)
* make-istack-list:                      istacks lists.       (line  31)
* make-istack-list <1>:                  istacks lists.       (line  32)
* make-istack-ralist:                    istacks ralists.     (line  33)
* make-istack-ralist <1>:                istacks ralists.     (line  34)
* make-istack-stack:                     istacks stacks.      (line  34)
* make-lexer:                            silex lexer.         (line  22)
* make-list:                             srfi list spec cons. (line  43)
* make-list <1>:                         srfi ralists spec random.
                                                              (line 212)
* make-list <2>:                         srfi ralists spec random.
                                                              (line 213)
* make-list <3>:                         lists cons.          (line  14)
* make-list <4>:                         lists cons.          (line  15)
* make-list-comparator:                  srfi comparators constructors list.
                                                              (line   6)
* make-list-iteration-thunk:             iteration thunks common.
                                                              (line   9)
* make-list/stx:                         lists cons.          (line  16)
* make-list/stx <1>:                     lists cons.          (line  17)
* make-listwise-comparator:              srfi comparators constructors list.
                                                              (line  50)
* make-lock-pid-file-condition:          posix lock-pid-files cond.
                                                              (line  16)
* make-lock-pid-file-condition <1>:      posix lock-pid-files cond.
                                                              (line  31)
* make-lock-pid-file-condition <2>:      posix lock-pid-files cond.
                                                              (line  46)
* make-lock-pid-file-condition <3>:      posix lock-pid-files cond.
                                                              (line  61)
* make-master-sock:                      posix tcp-server-sockets.
                                                              (line  13)
* make-max-count-lexer:                  silex utilities.     (line   9)
* make-object-property:                  object-properties.   (line  24)
* make-option-condition:                 getopts conditions.  (line  33)
* make-option-requires-no-value-condition: getopts conditions.
                                                              (line 111)
* make-option-requires-value-condition:  getopts conditions.  (line  94)
* make-pair-comparator:                  srfi comparators constructors pair.
                                                              (line   6)
* make-pair-comparator <1>:              srfi ilists procs comparators.
                                                              (line  32)
* make-parameter:                        srfi parameters spec.
                                                              (line  48)
* make-pid-file-already-exists-condition: posix pid-files conditions.
                                                              (line  31)
* make-pid-file-creation-condition:      posix pid-files conditions.
                                                              (line  63)
* make-pid-file-error-condition:         posix pid-files conditions.
                                                              (line  16)
* make-pid-file-invalid-contents-condition: posix pid-files conditions.
                                                              (line  95)
* make-pid-file-missing-condition:       posix pid-files conditions.
                                                              (line  47)
* make-pid-file-removal-condition:       posix pid-files conditions.
                                                              (line  79)
* make-position:                         arrays positions.    (line  22)
* make-queue:                            queues objects.      (line  18)
* make-queue <1>:                        queues objects.      (line  19)
* make-queue-iteration-thunk:            queues iteration thunks.
                                                              (line  13)
* make-rabin-karp:                       strings rabin-karp.  (line  14)
* make-rabin-karp <1>:                   strings rabin-karp.  (line  15)
* make-rabin-karp <2>:                   strings rabin-karp.  (line  16)
* make-random-source:                    srfi random spec.    (line  29)
* make-random-source/blum-blum-shub:     random generators bbs.
                                                              (line  23)
* make-random-source/borosh:             random generators borosh.
                                                              (line  14)
* make-random-source/cmrg:               random generators cmrg.
                                                              (line  15)
* make-random-source/device:             random device.       (line  12)
* make-random-source/device <1>:         random device.       (line  13)
* make-random-source/marsaglia/cong:     random generators marsaglia.
                                                              (line  15)
* make-random-source/marsaglia/fib:      random generators marsaglia.
                                                              (line  23)
* make-random-source/marsaglia/kiss:     random generators marsaglia.
                                                              (line  39)
* make-random-source/marsaglia/lfib4:    random generators marsaglia.
                                                              (line  31)
* make-random-source/marsaglia/mwc:      random generators marsaglia.
                                                              (line  47)
* make-random-source/marsaglia/shr3:     random generators marsaglia.
                                                              (line  55)
* make-random-source/marsaglia/swb:      random generators marsaglia.
                                                              (line  63)
* make-random-source/mersenne:           random generators mersenne.
                                                              (line  22)
* make-random-source/mrg32k3a:           random mrg32k3a.     (line  17)
* make-refining-comparator:              srfi comparators constructors refine.
                                                              (line   6)
* make-restarts-control-error:           restarts errors.     (line  27)
* make-restarts-error:                   restarts errors.     (line  13)
* make-reverse-comparator:               srfi comparators constructors reverse.
                                                              (line   6)
* make-rtd:                              srfi err5rs records spec proc.
                                                              (line   9)
* make-rtd <1>:                          srfi err5rs records spec proc.
                                                              (line  10)
* make-selecting-comparator:             srfi comparators constructors select.
                                                              (line   6)
* make-server-sock-and-port:             posix tcp-server-sockets.
                                                              (line  41)
* make-server-socket:                    srfi basic-socket spec cons.
                                                              (line  46)
* make-server-socket <1>:                srfi basic-socket spec cons.
                                                              (line  47)
* make-server-socket <2>:                srfi basic-socket spec cons.
                                                              (line  48)
* make-server-socket <3>:                srfi basic-socket spec cons.
                                                              (line  49)
* make-sockaddr_in:                      posix socket addresses in.
                                                              (line  34)
* make-sockaddr_in6:                     posix socket addresses in6.
                                                              (line  21)
* make-sockaddr_un:                      posix socket addresses local.
                                                              (line  20)
* make-spine-iteration-thunk:            iteration thunks common.
                                                              (line  20)
* make-stack:                            stacks objects.      (line  18)
* make-stack <1>:                        stacks objects.      (line  19)
* make-stack-iteration-thunk:            stacks iteration thunks.
                                                              (line  13)
* make-string:                           srfi strings spec cons.
                                                              (line   6)
* make-string <1>:                       srfi strings spec cons.
                                                              (line   7)
* make-string-iteration-thunk:           iteration thunks common.
                                                              (line  42)
* make-struct-addrinfo:                  posix socket addresses info.
                                                              (line  36)
* make-struct-group:                     posix users.         (line 151)
* make-struct-hostent:                   posix socket hosts.  (line  29)
* make-struct-inotify-event:             linux inotify.       (line  33)
* make-struct-inotify-event <1>:         linux inotify.       (line  34)
* make-struct-itimerspec:                posix time itimerspec.
                                                              (line  25)
* make-struct-itimerspec <1>:            posix time itimerspec.
                                                              (line  26)
* make-struct-itimerval:                 posix time itimerval.
                                                              (line  20)
* make-struct-itimerval <1>:             posix time itimerval.
                                                              (line  21)
* make-struct-mq-attr:                   posix mq attr.       (line  25)
* make-struct-netent:                    posix socket networks.
                                                              (line  22)
* make-struct-passwd:                    posix users.         (line 103)
* make-struct-protoent:                  posix socket protocols.
                                                              (line  20)
* make-struct-rlimit:                    posix resources rlimit.
                                                              (line  17)
* make-struct-rlimit <1>:                posix resources rlimit.
                                                              (line  18)
* make-struct-rusage:                    posix resources rusage.
                                                              (line  76)
* make-struct-rusage <1>:                posix resources rusage.
                                                              (line  77)
* make-struct-servent:                   posix socket services.
                                                              (line  23)
* make-struct-siginfo_t:                 posix signal.        (line 139)
* make-struct-siginfo_t <1>:             posix signal.        (line 140)
* make-struct-siginfo_t <2>:             linux status.        (line  23)
* make-struct-stat:                      posix stat.          (line  10)
* make-struct-timespec:                  posix time timespec. (line  16)
* make-struct-timeval:                   posix time timeval.  (line  16)
* make-struct-tm:                        posix time tm.       (line  43)
* make-struct-tms:                       posix time tms.      (line  22)
* make-time:                             srfi time spec time. (line  11)
* make-traced-procedure:                 tracing.             (line   6)
* make-tree-lexer:                       silex lexer.         (line  34)
* make-unbalanced-binary-node:           bst unodes objects.  (line  16)
* make-unbalanced-binary-node <1>:       bst unodes objects.  (line  17)
* make-undefined-restart-error:          restarts errors.     (line  47)
* make-unix-pathname-normalisation-error: parser-tools unix-pathnames errors.
                                                              (line  31)
* make-unix-pathname-parser-error:       parser-tools unix-pathnames errors.
                                                              (line  16)
* make-unknown-option-condition:         getopts conditions.  (line  78)
* make-unsupported-comparator-operation-error: srfi comparators conditions.
                                                              (line  35)
* make-variable:                         variables.           (line  15)
* make-variable <1>:                     variables.           (line  16)
* make-vector:                           srfi vector spec cons.
                                                              (line   6)
* make-vector-comparator:                srfi comparators constructors vector.
                                                              (line   6)
* make-vector-iteration-thunk:           iteration thunks common.
                                                              (line  31)
* make-vectorwise-comparator:            srfi comparators constructors vector.
                                                              (line  49)
* make-weak-hashtable:                   wtables.             (line  56)
* make-weak-hashtable <1>:               wtables.             (line  57)
* make<:                                 srfi comparators compar pred.
                                                              (line  95)
* make<=:                                srfi comparators compar pred.
                                                              (line  97)
* make=:                                 srfi comparators compar pred.
                                                              (line  94)
* make>:                                 srfi comparators compar pred.
                                                              (line  96)
* make>=:                                srfi comparators compar pred.
                                                              (line  98)
* mandatory:                             makers api.          (line  10)
* map:                                   srfi list spec fold. (line 299)
* map <1>:                               srfi ralists spec random.
                                                              (line 309)
* map!:                                  srfi list spec fold. (line 373)
* map! <1>:                              lists fold map.      (line  92)
* map!/stx:                              lists fold map.      (line  93)
* map*:                                  lists fold map.      (line   6)
* map*!:                                 lists fold map.      (line 101)
* map*!/stx:                             lists fold map.      (line 102)
* map*/stx:                              lists fold map.      (line   7)
* map-in-order:                          srfi list spec fold. (line 382)
* map-in-order*:                         lists fold map.      (line  47)
* map-in-order*/stx:                     lists fold map.      (line  48)
* match:                                 simple-match syntax. (line  11)
* max-compare:                           comparisons minmax.  (line   7)
* max-ec:                                loops comprehensions arith.
                                                              (line  69)
* max-ec <1>:                            srfi eager-comp spec comprehensions.
                                                              (line  55)
* maximum-message-portion-size on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  18)
* maximum-message-portion-size on <binary-input-only-channel> <1>: net channels channels bichannel.
                                                              (line  20)
* maximum-message-portion-size on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  18)
* maximum-message-portion-size on <textual-input-only-channel> <1>: net channels channels tichannel.
                                                              (line  20)
* maximum-message-size on <<channel>>:   net channels ifaces channel.
                                                              (line  24)
* maximum-message-size on <<channel>> <1>: net channels ifaces channel.
                                                              (line  25)
* maximum-message-size on <channel>:     net channels channels channel.
                                                              (line  23)
* maximum-message-size on <channel> <1>: net channels channels channel.
                                                              (line  24)
* member:                                srfi list spec search.
                                                              (line 243)
* member*:                               lists search.        (line 173)
* member* <1>:                           lists search.        (line 174)
* memory-block:                          args predefined memory-blocks.
                                                              (line   9)
* memory-block/false:                    args predefined memory-blocks.
                                                              (line  12)
* memq:                                  srfi list spec search.
                                                              (line 244)
* memv:                                  srfi list spec search.
                                                              (line 245)
* merge-with-multimethods:               multimethods defining.
                                                              (line  35)
* merge-with-multimethods <1>:           multimethods defining.
                                                              (line  50)
* message-terminators on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  13)
* message-terminators on <<binary-input-channel>> <1>: net channels ifaces bichannel.
                                                              (line  15)
* message-terminators on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  13)
* message-terminators on <<textual-input-channel>> <1>: net channels ifaces tichannel.
                                                              (line  15)
* message-terminators on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  25)
* message-terminators on <binary-input-only-channel> <1>: net channels channels bichannel.
                                                              (line  27)
* message-terminators on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  25)
* message-terminators on <textual-input-only-channel> <1>: net channels channels tichannel.
                                                              (line  27)
* message-type:                          srfi basic-socket spec flag.
                                                              (line  82)
* min-compare:                           comparisons minmax.  (line   6)
* min-ec:                                loops comprehensions arith.
                                                              (line  68)
* min-ec <1>:                            srfi eager-comp spec comprehensions.
                                                              (line  54)
* mkdir:                                 posix dir.           (line   6)
* mkdir/parents:                         posix dir.           (line  12)
* mkdtemp:                               glibc temp.          (line  16)
* mkfifo:                                posix fd fifo.       (line   6)
* mkstemp:                               glibc temp.          (line   8)
* mlock:                                 posix mmap.          (line  59)
* mlockall:                              posix mmap.          (line  67)
* mmap:                                  posix mmap.          (line   9)
* modified-julian-day->date:             srfi time spec conversion.
                                                              (line  47)
* modified-julian-day->date <1>:         srfi time spec conversion.
                                                              (line  48)
* modified-julian-day->time-monotonic:   srfi time spec conversion.
                                                              (line  55)
* modified-julian-day->time-tai:         srfi time spec conversion.
                                                              (line  58)
* modified-julian-day->time-utc:         srfi time spec conversion.
                                                              (line  61)
* mq-close:                              posix mq api.        (line  45)
* mq-getattr:                            posix mq api.        (line 144)
* mq-getattr <1>:                        posix mq api.        (line 145)
* mq-open:                               posix mq api.        (line  16)
* mq-open <1>:                           posix mq api.        (line  17)
* mq-receive:                            posix mq api.        (line  91)
* mq-send:                               posix mq api.        (line  62)
* mq-setattr:                            posix mq api.        (line 125)
* mq-setattr <1>:                        posix mq api.        (line 126)
* mq-timedreceive:                       posix mq api.        (line 105)
* mq-timedsend:                          posix mq api.        (line  73)
* mq-unlink:                             posix mq api.        (line  53)
* mremap:                                posix mmap.          (line  41)
* msync:                                 posix mmap.          (line  32)
* munlock:                               posix mmap.          (line  60)
* munlockall:                            posix mmap.          (line  68)
* munmap:                                posix mmap.          (line  24)
* nanosleep:                             posix time functions.
                                                              (line  66)
* negative-exact-integer:                args predefined exact integers.
                                                              (line  17)
* negative-fixnum:                       args predefined fixnums.
                                                              (line  16)
* negative-off_t?:                       words sign.          (line  87)
* negative-ptrdiff_t?:                   words sign.          (line  94)
* negative-signed-char?:                 words sign.          (line  52)
* negative-signed-int:                   args predefined signed int.
                                                              (line  21)
* negative-signed-int?:                  words sign.          (line  59)
* negative-signed-long-long?:            words sign.          (line  73)
* negative-signed-long?:                 words sign.          (line  66)
* negative-ssize_t?:                     words sign.          (line  80)
* negative-word-s128?:                   words sign.          (line  38)
* negative-word-s16?:                    words sign.          (line  17)
* negative-word-s256?:                   words sign.          (line  45)
* negative-word-s32?:                    words sign.          (line  24)
* negative-word-s64?:                    words sign.          (line  31)
* negative-word-s8?:                     words sign.          (line  10)
* nested:                                loops qualifiers.    (line  62)
* nested <1>:                            srfi eager-comp spec qualifiers.
                                                              (line  40)
* network-entries:                       posix socket networks.
                                                              (line  64)
* network-port-number:                   posix args.          (line  15)
* network-port-number/false:             posix args.          (line  16)
* network-port-number?:                  posix misc.          (line  18)
* next-method?:                          multimethods next.   (line  15)
* ninth:                                 srfi list spec select.
                                                              (line  45)
* ninth <1>:                             lists select.        (line  14)
* ninth/stx:                             lists select.        (line  20)
* non-empty-bytevector:                  args predefined bytevectors.
                                                              (line  15)
* non-empty-bytevector/false:            args predefined bytevectors.
                                                              (line  18)
* non-empty-string:                      args predefined strings.
                                                              (line  15)
* non-empty-string/false:                args predefined strings.
                                                              (line  18)
* non-empty-vector:                      args predefined vectors.
                                                              (line  15)
* non-empty-vector/false:                args predefined vectors.
                                                              (line  18)
* non-negative-exact-integer:            args predefined exact integers.
                                                              (line  22)
* non-negative-exact-integer on <bitvector>: bitvectors conv. (line  15)
* non-negative-exact-integer->bitvector: bitvectors conv.     (line  24)
* non-negative-fixnum:                   args predefined fixnums.
                                                              (line  25)
* non-negative-fixnum/false:             args predefined fixnums.
                                                              (line  26)
* non-negative-off_t?:                   words sign.          (line  89)
* non-negative-ptrdiff_t?:               words sign.          (line  96)
* non-negative-signed-char?:             words sign.          (line  54)
* non-negative-signed-int:               args predefined signed int.
                                                              (line  26)
* non-negative-signed-int?:              words sign.          (line  61)
* non-negative-signed-long-long?:        words sign.          (line  75)
* non-negative-signed-long?:             words sign.          (line  68)
* non-negative-ssize_t?:                 words sign.          (line  82)
* non-negative-word-s128?:               words sign.          (line  40)
* non-negative-word-s16?:                words sign.          (line  19)
* non-negative-word-s256?:               words sign.          (line  47)
* non-negative-word-s32?:                words sign.          (line  26)
* non-negative-word-s64?:                words sign.          (line  33)
* non-negative-word-s8?:                 words sign.          (line  12)
* non-null-pointer:                      args predefined pointers.
                                                              (line  15)
* non-positive-exact-integer:            args predefined exact integers.
                                                              (line  21)
* non-positive-fixnum:                   args predefined fixnums.
                                                              (line  20)
* non-positive-fixnum/false:             args predefined fixnums.
                                                              (line  21)
* non-positive-off_t?:                   words sign.          (line  88)
* non-positive-ptrdiff_t?:               words sign.          (line  95)
* non-positive-signed-char?:             words sign.          (line  53)
* non-positive-signed-int:               args predefined signed int.
                                                              (line  25)
* non-positive-signed-int?:              words sign.          (line  60)
* non-positive-signed-long-long?:        words sign.          (line  74)
* non-positive-signed-long?:             words sign.          (line  67)
* non-positive-ssize_t?:                 words sign.          (line  81)
* non-positive-word-s128?:               words sign.          (line  39)
* non-positive-word-s16?:                words sign.          (line  18)
* non-positive-word-s256?:               words sign.          (line  46)
* non-positive-word-s32?:                words sign.          (line  25)
* non-positive-word-s64?:                words sign.          (line  32)
* non-positive-word-s8?:                 words sign.          (line  11)
* non-zero-fixnum:                       args predefined fixnums.
                                                              (line  34)
* non-zero-fixnum/false:                 args predefined fixnums.
                                                              (line  35)
* normalise:                             parser-tools unix-pathnames comp.
                                                              (line 284)
* normalise-segments:                    parser-tools unix-pathnames manip.
                                                              (line   9)
* not:                                   simple-match syntax. (line  20)
* not <1>:                               loops qualifiers.    (line  38)
* not <2>:                               srfi eager-comp spec qualifiers.
                                                              (line  27)
* not on <bitvector>:                    bitvectors bits.     (line  26)
* not! on <bitvector>:                   bitvectors bits.     (line  30)
* not-ipair?:                            srfi ilists procs predicates.
                                                              (line  45)
* not-pair?:                             srfi list spec pred. (line  64)
* not-pair? <1>:                         lists pred.          (line   6)
* not=?:                                 comparisons pred.    (line  11)
* not=? <1>:                             srfi compare-procedures spec using.
                                                              (line 102)
* not=? <2>:                             srfi compare-procedures spec using.
                                                              (line 103)
* not=? <3>:                             srfi compare-procedures spec using.
                                                              (line 104)
* not=? <4>:                             srfi compare-procedures spec using.
                                                              (line 105)
* ntohl:                                 posix socket misc.   (line  20)
* ntohs:                                 posix socket misc.   (line  37)
* null-ilist?:                           srfi ilists procs predicates.
                                                              (line  38)
* null-list?:                            srfi list spec pred. (line  56)
* null?:                                 srfi list spec pred. (line  53)
* null? <1>:                             srfi ralists spec random.
                                                              (line 188)
* number:                                args predefined numbers.
                                                              (line   9)
* number-compare:                        comparisons atoms.   (line  41)
* number-compare <1>:                    srfi compare-procedures spec atom.
                                                              (line  50)
* number-of-dimensions:                  arrays misc.         (line  12)
* object->string:                        multimethods predefined.
                                                              (line   6)
* object-property-default-value:         object-properties.   (line  34)
* object-property-initial-capacity:      object-properties.   (line  30)
* octet:                                 args predefined bits.
                                                              (line   9)
* odd-exact-integer:                     args predefined exact integers.
                                                              (line  32)
* odd-fixnum:                            args predefined fixnums.
                                                              (line  45)
* odd-signed-int:                        args predefined signed int.
                                                              (line  36)
* off_t:                                 args predefined clang.
                                                              (line  73)
* off_t/false:                           args predefined clang.
                                                              (line  74)
* off_t?:                                words predicates.    (line  86)
* on-bad-count-function:                 srfi testing spec writing.
                                                              (line  63)
* on-bad-end-name-function:              srfi testing spec writing.
                                                              (line  72)
* on-final-function:                     srfi testing spec writing.
                                                              (line  79)
* on-group-begin-function:               srfi testing spec writing.
                                                              (line  50)
* on-group-end-function:                 srfi testing spec writing.
                                                              (line  57)
* on-test-begin-function:                srfi testing spec writing.
                                                              (line  37)
* on-test-end-function:                  srfi testing spec writing.
                                                              (line  44)
* one-off-index-for-string:              args predefined strings.
                                                              (line  37)
* open:                                  posix fd open.       (line   6)
* open-binary-input-port-pair:           custom-ports pairs.  (line  19)
* open-binary-input/output-port-pair:    custom-ports pairs.  (line  29)
* open-binary-output-port-pair:          custom-ports pairs.  (line  24)
* open-input-string:                     srfi string-ports spec.
                                                              (line   8)
* open-logging:                          posix log-files api. (line   9)
* open-output-string:                    srfi string-ports spec.
                                                              (line  23)
* open-port:                             args predefined ports.
                                                              (line  33)
* open-textual-input-port-pair:          custom-ports pairs.  (line  34)
* open-textual-input/output-port-pair:   custom-ports pairs.  (line  44)
* open-textual-output-port-pair:         custom-ports pairs.  (line  39)
* opendir:                               posix dir.           (line  76)
* operand-processor:                     srfi args-fold spec. (line  28)
* operand-type-inspector:                multimethods definers.
                                                              (line  11)
* operand-type-inspector <1>:            multimethods definers.
                                                              (line  27)
* operand-type-inspector <2>:            multimethods definers.
                                                              (line  51)
* option:                                srfi args-fold spec. (line  32)
* option-condition?:                     getopts conditions.  (line  34)
* option-names:                          srfi args-fold spec. (line  40)
* option-optional-arg?:                  srfi args-fold spec. (line  42)
* option-processor:                      srfi args-fold spec. (line  22)
* option-processor <1>:                  srfi args-fold spec. (line  43)
* option-required-arg?:                  srfi args-fold spec. (line  41)
* option-requires-no-value-condition?:   getopts conditions.  (line 112)
* option-requires-value-condition?:      getopts conditions.  (line  95)
* optional:                              makers api.          (line  11)
* or:                                    simple-match syntax. (line  19)
* or <1>:                                loops qualifiers.    (line  40)
* or <2>:                                srfi eager-comp spec qualifiers.
                                                              (line  29)
* or-null?:                              lists pred.          (line  29)
* or-null?/stx:                          lists pred.          (line  30)
* os-name:                               srfi env-inquiry spec.
                                                              (line  58)
* os-version:                            srfi env-inquiry spec.
                                                              (line  65)
* output-file::                          silex tables.        (line 128)
* output-port:                           args predefined ports.
                                                              (line  16)
* output-port/false:                     args predefined ports.
                                                              (line  21)
* output-port::                          silex tables.        (line 121)
* output-value::                         silex tables.        (line 106)
* output-value: <1>:                     silex tables.        (line 107)
* pair:                                  args predefined pairs.
                                                              (line   9)
* pair->ipair:                           srfi ilists procs conversion.
                                                              (line   8)
* pair-compare:                          comparisons pair.    (line  23)
* pair-compare <1>:                      comparisons pair.    (line  24)
* pair-compare <2>:                      comparisons pair.    (line  25)
* pair-compare <3>:                      srfi compare-procedures spec pair.
                                                              (line  25)
* pair-compare <4>:                      srfi compare-procedures spec pair.
                                                              (line  26)
* pair-compare <5>:                      srfi compare-procedures spec pair.
                                                              (line  27)
* pair-compare-car:                      comparisons pair.    (line   9)
* pair-compare-car <1>:                  srfi compare-procedures spec pair.
                                                              (line   9)
* pair-compare-cdr:                      comparisons pair.    (line  10)
* pair-compare-cdr <1>:                  srfi compare-procedures spec pair.
                                                              (line  10)
* pair-fold:                             srfi list spec fold. (line  73)
* pair-fold <1>:                         lists fold pair.     (line   6)
* pair-fold*:                            lists fold pair.     (line  40)
* pair-fold-right:                       srfi list spec fold. (line  94)
* pair-for-each:                         srfi list spec fold. (line 390)
* pair-for-each <1>:                     lists fold foreach.  (line  28)
* pair-for-each*:                        lists fold foreach.  (line  49)
* pair-for-each*/stx:                    lists fold foreach.  (line  50)
* pair-for-each/stx:                     lists fold foreach.  (line  29)
* pair?:                                 srfi list spec pred. (line  43)
* pair? <1>:                             srfi ralists spec random.
                                                              (line 134)
* pairwise-not=?:                        comparisons pred.    (line 117)
* pairwise-not=? <1>:                    srfi compare-procedures spec using.
                                                              (line 223)
* parameterize:                          srfi parameters spec.
                                                              (line  89)
* parse-flonum:                          flonum parser.       (line   9)
* parse-pathname:                        parser-tools unix-pathnames parser.
                                                              (line  58)
* parse-segment:                         parser-tools unix-pathnames parser.
                                                              (line   9)
* parse-segment-nz:                      parser-tools unix-pathnames parser.
                                                              (line  22)
* parse-slash-and-segment:               parser-tools unix-pathnames parser.
                                                              (line  39)
* partition:                             srfi list spec filter.
                                                              (line  20)
* partition!:                            srfi list spec filter.
                                                              (line  21)
* partition! <1>:                        lists filter.        (line  20)
* pathconf:                              posix config.        (line  23)
* pathname-bytevector->string:           parser-tools unix-pathnames conv.
                                                              (line  29)
* pathname-bytevector->string <1>:       parser-tools unix-pathnames conv.
                                                              (line  30)
* pathname?:                             parser-tools unix-pathnames preds.
                                                              (line   9)
* pause:                                 posix signal.        (line  16)
* pclose:                                posix not.           (line  13)
* pid-file-already-exists-condition?:    posix pid-files conditions.
                                                              (line  35)
* pid-file-creation-condition?:          posix pid-files conditions.
                                                              (line  67)
* pid-file-error-condition?:             posix pid-files conditions.
                                                              (line  19)
* pid-file-invalid-contents-condition?:  posix pid-files conditions.
                                                              (line  99)
* pid-file-missing-condition?:           posix pid-files conditions.
                                                              (line  51)
* pid-file-removal-condition?:           posix pid-files conditions.
                                                              (line  83)
* pid-pathname:                          posix pid-files config.
                                                              (line   9)
* pipe:                                  posix fd pipe.       (line   6)
* pipeline:                              pipelines.           (line   9)
* pointer:                               args predefined pointers.
                                                              (line   9)
* pointer-integer:                       args predefined clang.
                                                              (line  58)
* pointer-integer/false:                 args predefined clang.
                                                              (line  59)
* pointer-integer?:                      words predicates.    (line  76)
* pointer/false:                         args predefined pointers.
                                                              (line  12)
* poll:                                  posix fd poll.       (line  27)
* popen:                                 posix not.           (line  13)
* port:                                  args predefined ports.
                                                              (line   9)
* port->stream:                          streams from.        (line  22)
* port->stream <1>:                      streams from.        (line  23)
* port->stream <2>:                      srfi streams derived.
                                                              (line  43)
* port-in-close-on-exec-mode?:           posix fd device cloexec.
                                                              (line 128)
* port-set-close-on-exec-mode!:          posix fd device cloexec.
                                                              (line 110)
* port-unset-close-on-exec-mode!:        posix fd device cloexec.
                                                              (line 120)
* port/false:                            args predefined ports.
                                                              (line  12)
* port::                                 silex input.         (line  32)
* position:                              lists search.        (line 168)
* position <1>:                          arrays positions.    (line  17)
* position <2>:                          arrays positions.    (line  87)
* position-copy:                         arrays positions.    (line  37)
* position-dimension:                    arrays positions.    (line  59)
* position-index:                        arrays positions.    (line  92)
* position-index?:                       arrays positions.    (line  47)
* position-ref:                          arrays positions.    (line  64)
* position-set!:                         arrays positions.    (line  68)
* position/false:                        arrays positions.    (line  88)
* position/stx:                          lists search.        (line 169)
* position=?:                            arrays positions.    (line  76)
* position?:                             arrays positions.    (line  44)
* positive-exact-integer:                args predefined exact integers.
                                                              (line  16)
* positive-fixnum:                       args predefined fixnums.
                                                              (line  15)
* positive-off_t?:                       words sign.          (line  86)
* positive-ptrdiff_t?:                   words sign.          (line  93)
* positive-signed-char?:                 words sign.          (line  51)
* positive-signed-int:                   args predefined signed int.
                                                              (line  20)
* positive-signed-int?:                  words sign.          (line  58)
* positive-signed-long-long?:            words sign.          (line  72)
* positive-signed-long?:                 words sign.          (line  65)
* positive-ssize_t?:                     words sign.          (line  79)
* positive-word-s128?:                   words sign.          (line  37)
* positive-word-s16?:                    words sign.          (line  16)
* positive-word-s256?:                   words sign.          (line  44)
* positive-word-s32?:                    words sign.          (line  23)
* positive-word-s64?:                    words sign.          (line  30)
* positive-word-s8?:                     words sign.          (line   9)
* posix-signal->symbol:                  platform utilities.  (line  10)
* pread:                                 posix fd read.       (line  17)
* prefix?:                               parser-tools unix-pathnames comp.
                                                              (line 316)
* pregexp:                               pregexp api.         (line   6)
* pregexp-match:                         pregexp api.         (line  56)
* pregexp-match <1>:                     pregexp api.         (line  57)
* pregexp-match <2>:                     pregexp api.         (line  58)
* pregexp-match-positions:               pregexp api.         (line  16)
* pregexp-match-positions <1>:           pregexp api.         (line  17)
* pregexp-match-positions <2>:           pregexp api.         (line  18)
* pregexp-quote:                         pregexp api.         (line 115)
* pregexp-replace:                       pregexp api.         (line  95)
* pregexp-replace*:                      pregexp api.         (line 106)
* pregexp-split:                         pregexp api.         (line  68)
* prepend:                               parser-tools unix-pathnames comp.
                                                              (line 366)
* pretty-print::                         silex tables.        (line 143)
* pretty-print: <1>:                     silex tables.        (line 144)
* prlimit:                               linux resources.     (line  14)
* prlimit <1>:                           linux resources.     (line  15)
* prlimit <2>:                           linux resources.     (line  16)
* procedure:                             args predefined procedures.
                                                              (line   9)
* procedure/false:                       args predefined procedures.
                                                              (line  12)
* procedure::                            silex input.         (line  40)
* product-ec:                            loops comprehensions arith.
                                                              (line  33)
* product-ec <1>:                        srfi eager-comp spec comprehensions.
                                                              (line  49)
* promise:                               args predefined promises.
                                                              (line   9)
* proper-ilist?:                         srfi ilists procs predicates.
                                                              (line   6)
* proper-list?:                          srfi list spec pred. (line   9)
* protocol-entries:                      posix socket protocols.
                                                              (line  56)
* ptrdiff_t:                             args predefined clang.
                                                              (line  78)
* ptrdiff_t/false:                       args predefined clang.
                                                              (line  79)
* ptrdiff_t?:                            words predicates.    (line  90)
* pwrite:                                posix fd write.      (line  18)
* quasiquote:                            simple-match syntax. (line  16)
* queue:                                 queues objects.      (line  29)
* queue->list:                           queues conversion.   (line  11)
* queue->vector:                         queues conversion.   (line  25)
* queue-copy!:                           queues misc.         (line  11)
* queue-empty?:                          queues inspection.   (line  11)
* queue-exists:                          queues searching.    (line  33)
* queue-exists-left:                     queues searching.    (line  19)
* queue-exists-right:                    queues searching.    (line  26)
* queue-filter:                          queues filtering.    (line  11)
* queue-find:                            queues searching.    (line  80)
* queue-find <1>:                        queues searching.    (line  81)
* queue-find-left:                       queues searching.    (line  37)
* queue-find-left <1>:                   queues searching.    (line  38)
* queue-find-right:                      queues searching.    (line  67)
* queue-find-right <1>:                  queues searching.    (line  68)
* queue-fold-left:                       queues folding.      (line  11)
* queue-fold-right:                      queues folding.      (line  24)
* queue-for-all:                         queues searching.    (line  11)
* queue-for-each:                        queues mapping.      (line  51)
* queue-for-each-left:                   queues mapping.      (line  41)
* queue-for-each-right:                  queues mapping.      (line  46)
* queue-front:                           queues access.       (line  11)
* queue-getprop:                         queues objects.      (line  49)
* queue-hash:                            queues objects.      (line  68)
* queue-map:                             queues mapping.      (line  37)
* queue-map-left:                        queues mapping.      (line  11)
* queue-map-right:                       queues mapping.      (line  24)
* queue-not-empty?:                      queues inspection.   (line  15)
* queue-partition:                       queues filtering.    (line  20)
* queue-pop!:                            queues access.       (line  25)
* queue-property-list:                   queues objects.      (line  59)
* queue-purge!:                          queues access.       (line  30)
* queue-push!:                           queues access.       (line  21)
* queue-putprop:                         queues objects.      (line  43)
* queue-rear:                            queues access.       (line  16)
* queue-remprop:                         queues objects.      (line  54)
* queue-reverse!:                        queues misc.         (line  22)
* queue-size?:                           queues inspection.   (line  19)
* queue?:                                queues objects.      (line  25)
* quote:                                 simple-match syntax. (line  15)
* quote <1>:                             srfi ralists spec random.
                                                              (line  66)
* rabin-karp:                            strings rabin-karp.  (line  26)
* rabin-karp-search:                     strings rabin-karp.  (line  31)
* rabin-karp?:                           strings rabin-karp.  (line  23)
* raise:                                 posix signal.        (line   6)
* raise-comparator-argument-type-error:  srfi comparators conditions.
                                                              (line  86)
* raise-comparator-debug-error:          srfi comparators conditions.
                                                              (line 184)
* raise-comparator-nan-comparison-error: srfi comparators conditions.
                                                              (line 116)
* raise-comparator-type-error:           srfi comparators conditions.
                                                              (line  81)
* raise-invalid-option:                  getopts conditions.  (line 133)
* raise-option-requires-no-value:        getopts conditions.  (line 116)
* raise-option-requires-value:           getopts conditions.  (line  99)
* raise-unix-pathname-normalisation-error: parser-tools unix-pathnames errors.
                                                              (line  47)
* raise-unix-pathname-parser-error:      parser-tools unix-pathnames errors.
                                                              (line  42)
* raise-unknown-option:                  getopts conditions.  (line  82)
* raise-unsupported-comparator-operation-error: srfi comparators conditions.
                                                              (line  47)
* rand:                                  glibc random.        (line   8)
* random-access-list->linear-access-list: srfi ralists spec repre.
                                                              (line   6)
* random-bytevector:                     random device.       (line  39)
* random-bytevector!:                    random device.       (line  48)
* random-device-cache-length:            random device.       (line  30)
* random-exponentials-maker:             random dist.         (line   9)
* random-integer:                        srfi random spec.    (line   6)
* random-integer <1>:                    random numbers.      (line  11)
* random-integers-with-sum:              random utils vectors.
                                                              (line  40)
* random-list-sample:                    random utils lists.  (line  18)
* random-list-sample-population:         random utils lists.  (line  22)
* random-list-shuffle:                   random utils lists.  (line  14)
* random-list-unfold-numbers:            random utils lists.  (line  10)
* random-normals-maker:                  random dist.         (line  14)
* random-permutations-maker:             random utils misc.   (line  47)
* random-real:                           srfi random spec.    (line  13)
* random-real <1>:                       random numbers.      (line  17)
* random-reals-with-sum:                 random utils vectors.
                                                              (line  47)
* random-source-integers-maker:          random source.       (line  73)
* random-source-integers-maker-from-range: random utils misc. (line   9)
* random-source-integers-maker-from-range <1>: random utils misc.
                                                              (line  10)
* random-source-jumpahead!:              random source.       (line  62)
* random-source-make-integers:           srfi random spec.    (line  67)
* random-source-make-reals:              srfi random spec.    (line  82)
* random-source-make-reals <1>:          srfi random spec.    (line  83)
* random-source-maker:                   random source.       (line   6)
* random-source-pseudo-randomize!:       srfi random spec.    (line  58)
* random-source-randomize!:              srfi random spec.    (line  51)
* random-source-reals-maker:             random source.       (line  79)
* random-source-reals-maker <1>:         random source.       (line  80)
* random-source-reals-maker-from-range:  random utils misc.   (line  18)
* random-source-reals-maker-from-range <1>: random utils misc.
                                                              (line  19)
* random-source-required-seed-values:    random source.       (line  48)
* random-source-seed!:                   random source.       (line  41)
* random-source-state-ref:               srfi random spec.    (line  43)
* random-source-state-ref <1>:           random source.       (line  29)
* random-source-state-set!:              srfi random spec.    (line  44)
* random-source-state-set! <1>:          random source.       (line  30)
* random-source?:                        srfi random spec.    (line  39)
* random-source? <1>:                    random source.       (line  25)
* random-string-sample:                  random utils strings.
                                                              (line  46)
* random-string-sample-population:       random utils strings.
                                                              (line  52)
* random-string-shuffle:                 random utils strings.
                                                              (line  36)
* random-string-shuffle!:                random utils strings.
                                                              (line  41)
* random-string-unfold-chars:            random utils strings.
                                                              (line  14)
* random-vector-sample:                  random utils vectors.
                                                              (line  29)
* random-vector-sample-population:       random utils vectors.
                                                              (line  35)
* random-vector-shuffle:                 random utils vectors.
                                                              (line  19)
* random-vector-shuffle!:                random utils vectors.
                                                              (line  24)
* random-vector-unfold-numbers:          random utils vectors.
                                                              (line  13)
* rational-compare:                      comparisons atoms.   (line  38)
* rational-compare <1>:                  srfi compare-procedures spec atom.
                                                              (line  47)
* ratnum:                                args predefined ratnums.
                                                              (line   9)
* read:                                  posix fd read.       (line   6)
* read <1>:                              posix fd read.       (line   7)
* read-signalfd-siginfo:                 linux signalfd.      (line  30)
* read-with-shared-structure:            srfi shared structures spec.
                                                              (line  79)
* read-with-shared-structure <1>:        srfi shared structures spec.
                                                              (line  80)
* readable:                              posix sel.           (line  75)
* readable <1>:                          posix sel.           (line  76)
* readdir:                               posix dir.           (line  89)
* readdir/string:                        posix dir.           (line  90)
* readlink:                              posix link.          (line  17)
* readlink/string:                       posix link.          (line  18)
* readv:                                 posix fd scatter.    (line   6)
* real:                                  args predefined reals.
                                                              (line   9)
* real-compare:                          comparisons atoms.   (line  39)
* real-compare <1>:                      srfi compare-procedures spec atom.
                                                              (line  48)
* real-exact:                            args predefined reals.
                                                              (line  12)
* realpath:                              posix link.          (line  25)
* realpath/string:                       posix link.          (line  26)
* rec:                                   srfi rec spec.       (line   6)
* receive:                               srfi receive spec.   (line   6)
* receive-signal:                        posix sel.           (line  60)
* receiving? on <<channel>>:             net channels ifaces channel.
                                                              (line  43)
* receiving? on <channel>:               net channels channels channel.
                                                              (line  41)
* record-rtd:                            srfi err5rs records spec insp.
                                                              (line  12)
* record?:                               srfi err5rs records spec insp.
                                                              (line   9)
* recv:                                  posix socket socket. (line 101)
* recv-abort! on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  53)
* recv-abort! on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  53)
* recv-abort! on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  65)
* recv-abort! on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  65)
* recv-begin! on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  22)
* recv-begin! on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  22)
* recv-begin! on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  34)
* recv-begin! on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  34)
* recv-end! on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  42)
* recv-end! on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  42)
* recv-end! on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  54)
* recv-end! on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  54)
* recv-end!/rbl on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  26)
* recv-end!/rbl on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  26)
* recv-end!/rbl on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  38)
* recv-end!/rbl on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  38)
* recv-full-message on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  85)
* recv-full-message on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  85)
* recv-full-message on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  97)
* recv-full-message on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  97)
* recv-message-portion! on <<binary-input-channel>>: net channels ifaces bichannel.
                                                              (line  58)
* recv-message-portion! on <<textual-input-channel>>: net channels ifaces tichannel.
                                                              (line  58)
* recv-message-portion! on <binary-input-only-channel>: net channels channels bichannel.
                                                              (line  70)
* recv-message-portion! on <textual-input-only-channel>: net channels channels tichannel.
                                                              (line  70)
* recvfrom:                              posix socket socket. (line 127)
* reduce:                                srfi list spec fold. (line 108)
* reduce <1>:                            lists fold reduce.   (line   6)
* reduce*:                               lists fold reduce.   (line  40)
* reduce*/stx:                           lists fold reduce.   (line  41)
* reduce-right:                          srfi list spec fold. (line 142)
* reduce/stx:                            lists fold reduce.   (line   7)
* refine-compare:                        comparisons cons.    (line  10)
* refine-compare <1>:                    srfi compare-procedures spec const.
                                                              (line  11)
* regcomp:                               glibc match.         (line 131)
* regcomp/disown:                        glibc match.         (line 147)
* regexec:                               glibc match.         (line 152)
* regexp:                                srfi regexps procs.  (line   6)
* regexp->sre:                           srfi regexps procs.  (line  42)
* regexp-extract:                        srfi regexps procs.  (line 112)
* regexp-extract <1>:                    srfi regexps procs.  (line 113)
* regexp-extract <2>:                    srfi regexps procs.  (line 114)
* regexp-fold:                           srfi regexps procs.  (line  84)
* regexp-fold <1>:                       srfi regexps procs.  (line  85)
* regexp-fold <2>:                       srfi regexps procs.  (line  86)
* regexp-fold <3>:                       srfi regexps procs.  (line  87)
* regexp-match->list:                    srfi regexps procs.  (line 266)
* regexp-match-count:                    srfi regexps procs.  (line 199)
* regexp-match-submatch:                 srfi regexps procs.  (line 207)
* regexp-match-submatch-end:             srfi regexps procs.  (line 249)
* regexp-match-submatch-start:           srfi regexps procs.  (line 232)
* regexp-match?:                         srfi regexps procs.  (line 192)
* regexp-matches:                        srfi regexps procs.  (line  61)
* regexp-matches <1>:                    srfi regexps procs.  (line  62)
* regexp-matches <2>:                    srfi regexps procs.  (line  63)
* regexp-matches?:                       srfi regexps procs.  (line  69)
* regexp-matches? <1>:                   srfi regexps procs.  (line  70)
* regexp-matches? <2>:                   srfi regexps procs.  (line  71)
* regexp-partition:                      srfi regexps procs.  (line 129)
* regexp-partition <1>:                  srfi regexps procs.  (line 130)
* regexp-partition <2>:                  srfi regexps procs.  (line 131)
* regexp-replace:                        srfi regexps procs.  (line 151)
* regexp-replace <1>:                    srfi regexps procs.  (line 152)
* regexp-replace <2>:                    srfi regexps procs.  (line 153)
* regexp-replace <3>:                    srfi regexps procs.  (line 154)
* regexp-replace-all:                    srfi regexps procs.  (line 183)
* regexp-replace-all <1>:                srfi regexps procs.  (line 184)
* regexp-replace-all <2>:                srfi regexps procs.  (line 185)
* regexp-search:                         srfi regexps procs.  (line  76)
* regexp-search <1>:                     srfi regexps procs.  (line  77)
* regexp-search <2>:                     srfi regexps procs.  (line  78)
* regexp-split:                          srfi regexps procs.  (line 121)
* regexp-split <1>:                      srfi regexps procs.  (line 122)
* regexp-split <2>:                      srfi regexps procs.  (line 123)
* regexp?:                               srfi regexps procs.  (line  58)
* regfree:                               glibc match.         (line 180)
* relative?:                             parser-tools unix-pathnames preds.
                                                              (line  54)
* remove:                                srfi list spec filter.
                                                              (line  37)
* remove <1>:                            posix link.          (line  41)
* remove!:                               srfi list spec filter.
                                                              (line  38)
* remove*:                               lists filter.        (line  35)
* remove*!:                              lists filter.        (line  36)
* remove-hook!:                          hooks.               (line  28)
* remove-pid-file:                       posix pid-files api. (line  35)
* rename:                                posix link.          (line  47)
* replace-extension:                     parser-tools unix-pathnames comp.
                                                              (line 410)
* replace-icar:                          srfi ilists procs replacement.
                                                              (line   9)
* replace-icdr:                          srfi ilists procs replacement.
                                                              (line  13)
* requires-argument:                     getopts types.       (line  52)
* reset-hook!:                           hooks.               (line  32)
* restart-case:                          restarts restart-case.
                                                              (line   6)
* restart-name:                          restarts invoke.     (line  38)
* restarts-control-error?:               restarts errors.     (line  31)
* restarts-error-condition?:             restarts errors.     (line  16)
* reverse:                               srfi list spec misc. (line  67)
* reverse <1>:                           srfi ralists spec random.
                                                              (line 252)
* reverse!:                              srfi list spec misc. (line  68)
* reverse! <1>:                          lists misc.          (line  42)
* reverse-before-methods?:               multimethods definers.
                                                              (line  28)
* reverse-before-methods? <1>:           multimethods definers.
                                                              (line  63)
* reverse-bytevector->s8-list:           bytevectors 8 list.  (line  15)
* reverse-bytevector->u8-list:           bytevectors 8 list.  (line  16)
* reverse-list->string:                  srfi strings spec list.
                                                              (line  16)
* reverse-list->string <1>:              strings list.        (line  17)
* reverse-list->vector:                  srfi vector spec conv.
                                                              (line  17)
* reverse-list->vector <1>:              vectors list.        (line  17)
* reverse-s8-list->bytevector-u8:        bytevectors 8 list.  (line  20)
* reverse-string->list:                  strings list.        (line  13)
* reverse-u8-list->bytevector-u8:        bytevectors 8 list.  (line  21)
* reverse-vector->list:                  srfi vector spec conv.
                                                              (line  10)
* reverse-vector->list <1>:              vectors list.        (line  13)
* rewinddir:                             posix dir.           (line 111)
* rl-version:                            readline.            (line  17)
* RLIM_INFINITY:                         posix resources funcs.
                                                              (line   6)
* rmdir:                                 posix dir.           (line  18)
* rootname:                              parser-tools unix-pathnames comp.
                                                              (line 162)
* rtd-accessor:                          srfi err5rs records spec proc.
                                                              (line 134)
* rtd-all-field-names:                   srfi err5rs records spec insp.
                                                              (line  27)
* rtd-constructor:                       srfi err5rs records spec proc.
                                                              (line  67)
* rtd-constructor <1>:                   srfi err5rs records spec proc.
                                                              (line  68)
* rtd-field-mutable?:                    srfi err5rs records spec insp.
                                                              (line  49)
* rtd-field-names:                       srfi err5rs records spec insp.
                                                              (line  21)
* rtd-mutator:                           srfi err5rs records spec proc.
                                                              (line 143)
* rtd-name:                              srfi err5rs records spec insp.
                                                              (line  15)
* rtd-parent:                            srfi err5rs records spec insp.
                                                              (line  18)
* rtd-predicate:                         srfi err5rs records spec proc.
                                                              (line 131)
* rtd?:                                  srfi err5rs records spec proc.
                                                              (line  64)
* run-hook:                              hooks.               (line  38)
* rx:                                    srfi regexps procs.  (line  17)
* search-file-in-environment-path:       posix file.          (line   8)
* search-file-in-list-path:              posix file.          (line   8)
* second:                                srfi list spec select.
                                                              (line  38)
* second <1>:                            lists select.        (line   7)
* seekdir:                               posix dir.           (line 124)
* segment?:                              parser-tools unix-pathnames preds.
                                                              (line  23)
* select:                                posix fd select select.
                                                              (line   6)
* select-compare:                        comparisons cons.    (line  17)
* select-compare <1>:                    srfi compare-procedures spec const.
                                                              (line  27)
* select-fd:                             posix fd select select.
                                                              (line  23)
* select-fd-exceptional?:                posix fd select special.
                                                              (line  28)
* select-fd-readable?:                   posix fd select special.
                                                              (line   6)
* select-fd-writable?:                   posix fd select special.
                                                              (line  17)
* select-from-sets:                      posix fd select select.
                                                              (line  36)
* select-from-sets-array:                posix fd select select.
                                                              (line  58)
* select-port:                           posix fd select select.
                                                              (line  24)
* select-port-exceptional?:              posix fd select special.
                                                              (line  29)
* select-port-readable?:                 posix fd select special.
                                                              (line   7)
* select-port-writable?:                 posix fd select special.
                                                              (line  18)
* sem-close:                             posix sem api.       (line  30)
* sem-destroy:                           posix sem api.       (line  72)
* sem-getvalue:                          posix sem api.       (line 111)
* sem-init:                              posix sem api.       (line  50)
* sem-init <1>:                          posix sem api.       (line  51)
* sem-open:                              posix sem api.       (line   6)
* sem-open <1>:                          posix sem api.       (line   7)
* sem-post:                              posix sem api.       (line  78)
* sem-timedwait:                         posix sem api.       (line  98)
* sem-trywait:                           posix sem api.       (line  91)
* sem-unlink:                            posix sem api.       (line  37)
* sem-wait:                              posix sem api.       (line  84)
* send:                                  posix socket socket. (line  89)
* send-abort! on <<binary-output-channel>>: net channels ifaces bochannel.
                                                              (line  33)
* send-abort! on <<textual-output-channel>>: net channels ifaces tochannel.
                                                              (line  33)
* send-abort! on <binary-output-only-channel>: net channels channels bochannel.
                                                              (line  38)
* send-abort! on <textual-output-only-channel>: net channels channels tochannel.
                                                              (line  38)
* send-begin! on <<binary-output-channel>>: net channels ifaces bochannel.
                                                              (line  13)
* send-begin! on <<textual-output-channel>>: net channels ifaces tochannel.
                                                              (line  13)
* send-begin! on <binary-output-only-channel>: net channels channels bochannel.
                                                              (line  18)
* send-begin! on <textual-output-only-channel>: net channels channels tochannel.
                                                              (line  18)
* send-end! on <<binary-output-channel>>: net channels ifaces bochannel.
                                                              (line  17)
* send-end! on <<textual-output-channel>>: net channels ifaces tochannel.
                                                              (line  17)
* send-end! on <binary-output-only-channel>: net channels channels bochannel.
                                                              (line  22)
* send-end! on <textual-output-only-channel>: net channels channels tochannel.
                                                              (line  22)
* send-full-message on <<binary-output-port>>: net channels ifaces bochannel.
                                                              (line  51)
* send-full-message on <<textual-output-port>>: net channels ifaces tochannel.
                                                              (line  51)
* send-full-message on <binary-output-port>: net channels channels bochannel.
                                                              (line  56)
* send-full-message on <textual-output-port>: net channels channels tochannel.
                                                              (line  56)
* send-message-portion! on <<binary-output-channel>>: net channels ifaces bochannel.
                                                              (line  39)
* send-message-portion! on <<textual-output-channel>>: net channels ifaces tochannel.
                                                              (line  39)
* send-message-portion! on <binary-output-only-channel>: net channels channels bochannel.
                                                              (line  44)
* send-message-portion! on <textual-output-only-channel>: net channels channels tochannel.
                                                              (line  44)
* sending? on <<channel>>:               net channels ifaces channel.
                                                              (line  39)
* sending? on <channel>:                 net channels channels channel.
                                                              (line  37)
* sendmail:                              posix sendmail.      (line  23)
* sendto:                                posix socket socket. (line 112)
* serialise-segments:                    parser-tools unix-pathnames manip.
                                                              (line  28)
* serve-interprocess-signals:            posix sel.           (line  65)
* service-entries:                       posix socket services.
                                                              (line  70)
* set:                                   srfi sets-and-bags constr.
                                                              (line   6)
* set->bag:                              srfi sets-and-bags bag.
                                                              (line  97)
* set->bag!:                             srfi sets-and-bags bag.
                                                              (line 100)
* set->list:                             srfi sets-and-bags copy.
                                                              (line  11)
* set->list <1>:                         srfi sets-and-bags copy.
                                                              (line  13)
* set-adjoin:                            srfi sets-and-bags update.
                                                              (line   6)
* set-adjoin!:                           srfi sets-and-bags update.
                                                              (line  58)
* set-all! on <bitvector>:               bitvectors bits.     (line  19)
* set-any?:                              srfi sets-and-bags whole.
                                                              (line  26)
* set-box!:                              srfi boxes spec.     (line  22)
* set-car!:                              srfi list spec side. (line   9)
* set-cdr!:                              srfi list spec side. (line  10)
* set-comparator:                        srfi sets-and-bags compar.
                                                              (line   6)
* set-contains?:                         srfi sets-and-bags preds.
                                                              (line  10)
* set-copy:                              srfi sets-and-bags copy.
                                                              (line   6)
* set-count:                             srfi sets-and-bags whole.
                                                              (line  21)
* set-delete:                            srfi sets-and-bags update.
                                                              (line 120)
* set-delete!:                           srfi sets-and-bags update.
                                                              (line 146)
* set-delete-all:                        srfi sets-and-bags update.
                                                              (line 151)
* set-delete-all!:                       srfi sets-and-bags update.
                                                              (line 153)
* set-difference:                        srfi sets-and-bags theory.
                                                              (line   8)
* set-difference!:                       srfi sets-and-bags theory.
                                                              (line  29)
* set-disjoint?:                         srfi sets-and-bags preds.
                                                              (line  19)
* set-element-comparator:                srfi sets-and-bags access.
                                                              (line  12)
* set-empty?:                            srfi sets-and-bags preds.
                                                              (line  15)
* set-every?:                            srfi sets-and-bags whole.
                                                              (line  35)
* set-filter:                            srfi sets-and-bags map.
                                                              (line  77)
* set-filter!:                           srfi sets-and-bags map.
                                                              (line  83)
* set-find:                              srfi sets-and-bags whole.
                                                              (line  10)
* set-find <1>:                          srfi sets-and-bags whole.
                                                              (line  11)
* set-fold:                              srfi sets-and-bags map.
                                                              (line  53)
* set-for-each:                          srfi sets-and-bags map.
                                                              (line  48)
* set-intersection:                      srfi sets-and-bags theory.
                                                              (line   7)
* set-intersection!:                     srfi sets-and-bags theory.
                                                              (line  28)
* set-map:                               srfi sets-and-bags map.
                                                              (line   6)
* set-member:                            srfi sets-and-bags access.
                                                              (line   6)
* set-partition:                         srfi sets-and-bags map.
                                                              (line  99)
* set-partition!:                        srfi sets-and-bags map.
                                                              (line 131)
* set-remove:                            srfi sets-and-bags map.
                                                              (line  88)
* set-remove!:                           srfi sets-and-bags map.
                                                              (line  94)
* set-replace:                           srfi sets-and-bags update.
                                                              (line  93)
* set-replace!:                          srfi sets-and-bags update.
                                                              (line 114)
* set-search!:                           srfi sets-and-bags update.
                                                              (line 159)
* set-size:                              srfi sets-and-bags whole.
                                                              (line   6)
* set-struct-inotify-event-cookie!:      linux inotify.       (line  51)
* set-struct-inotify-event-len!:         linux inotify.       (line  52)
* set-struct-inotify-event-mask!:        linux inotify.       (line  50)
* set-struct-inotify-event-name!:        linux inotify.       (line  53)
* set-struct-inotify-event-wd!:          linux inotify.       (line  49)
* set-struct-mq-attr-mq_curmsgs!:        posix mq attr.       (line  41)
* set-struct-mq-attr-mq_flags!:          posix mq attr.       (line  38)
* set-struct-mq-attr-mq_maxmsg!:         posix mq attr.       (line  39)
* set-struct-mq-attr-mq_msgsize!:        posix mq attr.       (line  40)
* set-struct-rlimit-rlim_cur!:           posix resources rlimit.
                                                              (line  30)
* set-struct-rlimit-rlim_max!:           posix resources rlimit.
                                                              (line  31)
* set-struct-rusage-ru_idrss!:           posix resources rusage.
                                                              (line 108)
* set-struct-rusage-ru_inblock!:         posix resources rusage.
                                                              (line 113)
* set-struct-rusage-ru_isrss!:           posix resources rusage.
                                                              (line 109)
* set-struct-rusage-ru_ixrss!:           posix resources rusage.
                                                              (line 107)
* set-struct-rusage-ru_majflt!:          posix resources rusage.
                                                              (line 111)
* set-struct-rusage-ru_maxrss!:          posix resources rusage.
                                                              (line 106)
* set-struct-rusage-ru_minflt!:          posix resources rusage.
                                                              (line 110)
* set-struct-rusage-ru_msgrcv!:          posix resources rusage.
                                                              (line 116)
* set-struct-rusage-ru_msgsnd!:          posix resources rusage.
                                                              (line 115)
* set-struct-rusage-ru_nivcsw!:          posix resources rusage.
                                                              (line 119)
* set-struct-rusage-ru_nsignals!:        posix resources rusage.
                                                              (line 117)
* set-struct-rusage-ru_nswap!:           posix resources rusage.
                                                              (line 112)
* set-struct-rusage-ru_nvcsw!:           posix resources rusage.
                                                              (line 118)
* set-struct-rusage-ru_oublock!:         posix resources rusage.
                                                              (line 114)
* set-struct-rusage-ru_stime!:           posix resources rusage.
                                                              (line 105)
* set-struct-rusage-ru_utime!:           posix resources rusage.
                                                              (line 104)
* set-struct-siginfo_t-si_addr!:         posix signal.        (line 185)
* set-struct-siginfo_t-si_addr_lsb!:     posix signal.        (line 188)
* set-struct-siginfo_t-si_band!:         posix signal.        (line 186)
* set-struct-siginfo_t-si_code!:         posix signal.        (line 172)
* set-struct-siginfo_t-si_errno!:        posix signal.        (line 171)
* set-struct-siginfo_t-si_fd!:           posix signal.        (line 187)
* set-struct-siginfo_t-si_int!:          posix signal.        (line 181)
* set-struct-siginfo_t-si_overrun!:      posix signal.        (line 183)
* set-struct-siginfo_t-si_pid!:          posix signal.        (line 174)
* set-struct-siginfo_t-si_ptr!:          posix signal.        (line 182)
* set-struct-siginfo_t-si_signo!:        posix signal.        (line 170)
* set-struct-siginfo_t-si_status!:       posix signal.        (line 176)
* set-struct-siginfo_t-si_stime!:        posix signal.        (line 178)
* set-struct-siginfo_t-si_timerid!:      posix signal.        (line 184)
* set-struct-siginfo_t-si_trapno!:       posix signal.        (line 173)
* set-struct-siginfo_t-si_uid!:          posix signal.        (line 175)
* set-struct-siginfo_t-si_utime!:        posix signal.        (line 177)
* set-struct-siginfo_t-si_value.sival_int!: posix signal.     (line 179)
* set-struct-siginfo_t-si_value.sival_ptr!: posix signal.     (line 180)
* set-time-nanosecond!:                  srfi time spec time. (line  36)
* set-time-second!:                      srfi time spec time. (line  39)
* set-time-type!:                        srfi time spec time. (line  27)
* set-unfold:                            srfi sets-and-bags constr.
                                                              (line  30)
* set-union:                             srfi sets-and-bags theory.
                                                              (line   6)
* set-union!:                            srfi sets-and-bags theory.
                                                              (line  27)
* set-xor:                               srfi sets-and-bags theory.
                                                              (line   9)
* set-xor!:                              srfi sets-and-bags theory.
                                                              (line  30)
* set<=?:                                srfi sets-and-bags subsets.
                                                              (line  53)
* set<?:                                 srfi sets-and-bags subsets.
                                                              (line  23)
* set=?:                                 srfi sets-and-bags subsets.
                                                              (line   9)
* set>=?:                                srfi sets-and-bags subsets.
                                                              (line  68)
* set>?:                                 srfi sets-and-bags subsets.
                                                              (line  38)
* set?:                                  srfi sets-and-bags preds.
                                                              (line   6)
* setegid:                               posix users.         (line  51)
* setenv:                                posix env.           (line  20)
* seteuid:                               posix users.         (line  32)
* setgid:                                posix users.         (line  57)
* setitimer:                             posix time functions.
                                                              (line  82)
* setpgid:                               posix job.           (line  32)
* setregid:                              posix users.         (line  63)
* setreuid:                              posix users.         (line  44)
* setrlimit:                             posix resources funcs.
                                                              (line  33)
* setsid:                                posix job.           (line  14)
* setsockopt:                            posix socket socket. (line 173)
* setsockopt/int:                        posix socket socket. (line 181)
* setsockopt/linger:                     posix socket socket. (line 194)
* setsockopt/size_t:                     posix socket socket. (line 188)
* setuid:                                posix users.         (line  38)
* setup-compensated-log-file-creation:   posix log-files api. (line  43)
* setup-compensated-pid-file-creation:   posix pid-files api. (line  72)
* seventh:                               srfi list spec select.
                                                              (line  43)
* seventh <1>:                           lists select.        (line  12)
* seventh/stx:                           lists select.        (line  18)
* shape:                                 srfi marray spec.    (line  34)
* share-array:                           srfi marray spec.    (line  96)
* shm-open:                              posix shm.           (line  12)
* shm-unlink:                            posix shm.           (line  33)
* shutdown:                              posix socket socket. (line  12)
* shutdown-method:                       srfi basic-socket spec flag.
                                                              (line 102)
* signal:                                restarts signal.     (line   6)
* signal-bub-acquire:                    posix signal.        (line  51)
* signal-bub-all-delivered:              posix signal.        (line  63)
* signal-bub-delivered?:                 posix signal.        (line  55)
* signal-bub-final:                      posix signal.        (line  47)
* signal-bub-init:                       posix signal.        (line  44)
* signal-restarts-control-error:         restarts errors.     (line  35)
* signal-undefined-restart-error:        restarts errors.     (line  55)
* signalfd:                              linux signalfd.      (line  12)
* signed-char:                           args predefined clang.
                                                              (line  18)
* signed-char/false:                     args predefined clang.
                                                              (line  19)
* signed-char?:                          words predicates.    (line  49)
* signed-int:                            args predefined signed int.
                                                              (line  14)
* signed-int-in-exclusive-range:         args predefined signed int.
                                                              (line  31)
* signed-int-in-inclusive-range:         args predefined signed int.
                                                              (line  30)
* signed-int/false:                      args predefined signed int.
                                                              (line  17)
* signed-int?:                           words predicates.    (line  60)
* signed-long:                           args predefined clang.
                                                              (line  43)
* signed-long-long:                      args predefined clang.
                                                              (line  53)
* signed-long-long/false:                args predefined clang.
                                                              (line  54)
* signed-long-long?:                     words predicates.    (line  71)
* signed-long/false:                     args predefined clang.
                                                              (line  44)
* signed-long?:                          words predicates.    (line  65)
* signed-short:                          args predefined clang.
                                                              (line  28)
* signed-short/false:                    args predefined clang.
                                                              (line  29)
* signed-short?:                         words predicates.    (line  54)
* sigtimedwait:                          posix signal.        (line 217)
* sigtimedwait <1>:                      posix signal.        (line 218)
* sigwaitinfo:                           posix signal.        (line 191)
* sigwaitinfo <1>:                       posix signal.        (line 192)
* sinh:                                  glibc math.          (line  56)
* sixth:                                 srfi list spec select.
                                                              (line  42)
* sixth <1>:                             lists select.        (line  11)
* sixth/stx:                             lists select.        (line  17)
* sizeof-fd-set:                         posix fd select fdset.
                                                              (line  12)
* sizeof-fd-set <1>:                     posix fd select fdset.
                                                              (line  13)
* sizeof-sem_t:                          posix sem api.       (line  45)
* SIZEOF_CHAR:                           words sizeof.        (line   9)
* SIZEOF_DOUBLE:                         words sizeof.        (line  39)
* SIZEOF_FLOAT:                          words sizeof.        (line  36)
* SIZEOF_INT:                            words sizeof.        (line  15)
* SIZEOF_LONG:                           words sizeof.        (line  18)
* SIZEOF_LONG_LONG:                      words sizeof.        (line  21)
* SIZEOF_OFF_T:                          words sizeof.        (line  30)
* SIZEOF_POINTER:                        words sizeof.        (line  42)
* SIZEOF_PTRDIFF_T:                      words sizeof.        (line  33)
* SIZEOF_SHORT:                          words sizeof.        (line  12)
* SIZEOF_SIZE_T:                         words sizeof.        (line  24)
* SIZEOF_SSIZE_T:                        words sizeof.        (line  27)
* size_t:                                args predefined clang.
                                                              (line  63)
* size_t/false:                          args predefined clang.
                                                              (line  64)
* size_t?:                               words predicates.    (line  80)
* sockaddr_in.in_addr:                   posix socket addresses in.
                                                              (line  43)
* sockaddr_in.in_addr.number:            posix socket addresses in.
                                                              (line  44)
* sockaddr_in.in_port:                   posix socket addresses in.
                                                              (line  45)
* sockaddr_in6.in6_addr:                 posix socket addresses in6.
                                                              (line  27)
* sockaddr_in6.in6_port:                 posix socket addresses in6.
                                                              (line  28)
* sockaddr_un.pathname:                  posix socket addresses local.
                                                              (line  25)
* sockaddr_un.pathname/string:           posix socket addresses local.
                                                              (line  26)
* socket:                                posix socket socket. (line   6)
* socket-accept:                         srfi basic-socket spec ops.
                                                              (line   9)
* socket-close:                          srfi basic-socket spec ops.
                                                              (line  36)
* socket-descriptor:                     srfi basic-socket spec ops.
                                                              (line  48)
* socket-domain:                         srfi basic-socket spec flag.
                                                              (line  53)
* socket-input-port:                     srfi basic-socket spec port.
                                                              (line   9)
* socket-merge-flags:                    srfi basic-socket spec flag.
                                                              (line 116)
* socket-output-port:                    srfi basic-socket spec port.
                                                              (line  10)
* socket-purge-flags:                    srfi basic-socket spec flag.
                                                              (line 119)
* socket-recv:                           srfi basic-socket spec ops.
                                                              (line  22)
* socket-recv <1>:                       srfi basic-socket spec ops.
                                                              (line  23)
* socket-send:                           srfi basic-socket spec ops.
                                                              (line  13)
* socket-send <1>:                       srfi basic-socket spec ops.
                                                              (line  14)
* socket-shutdown:                       srfi basic-socket spec ops.
                                                              (line  32)
* socket?:                               srfi basic-socket spec cons.
                                                              (line  74)
* socketpair:                            posix socket socket. (line  19)
* sorted-list-insert:                    lists sorted.        (line   6)
* sorted-list-insert/uniq:               lists sorted.        (line  16)
* span:                                  srfi list spec search.
                                                              (line 134)
* span <1>:                              lists search.        (line  48)
* span!:                                 srfi list spec search.
                                                              (line 135)
* span! <1>:                             lists search.        (line  49)
* split:                                 parser-tools unix-pathnames comp.
                                                              (line 244)
* split-at:                              srfi list spec select.
                                                              (line 125)
* split-at <1>:                          lists select.        (line 123)
* split-at!:                             srfi list spec select.
                                                              (line 126)
* split-at! <1>:                         lists select.        (line 124)
* split-at!/stx:                         lists select.        (line 126)
* split-at/stx:                          lists select.        (line 125)
* split-pathname:                        posix file.          (line   8)
* split-pathname-bytevector:             posix file.          (line   8)
* split-pathname-root-and-tail:          posix file.          (line   8)
* split-pathname-string:                 posix file.          (line   8)
* split-search-path:                     posix file.          (line   8)
* split-search-path-bytevector:          posix file.          (line   8)
* split-search-path-string:              posix file.          (line   8)
* srand:                                 glibc random.        (line  15)
* sre->irregex:                          irregex compile.     (line   8)
* sre->string:                           irregex misc.        (line  61)
* ssize_t:                               args predefined clang.
                                                              (line  68)
* ssize_t/false:                         args predefined clang.
                                                              (line  69)
* ssize_t?:                              words predicates.    (line  81)
* stack:                                 stacks objects.      (line  29)
* stack->list:                           stacks conversion.   (line  11)
* stack->vector:                         stacks conversion.   (line  24)
* stack-copy!:                           stacks misc.         (line  11)
* stack-empty?:                          stacks inspection.   (line  11)
* stack-exists:                          stacks searching.    (line  33)
* stack-exists-left:                     stacks searching.    (line  19)
* stack-exists-right:                    stacks searching.    (line  26)
* stack-filter:                          stacks filtering.    (line  11)
* stack-find:                            stacks searching.    (line  80)
* stack-find <1>:                        stacks searching.    (line  81)
* stack-find-left:                       stacks searching.    (line  37)
* stack-find-left <1>:                   stacks searching.    (line  38)
* stack-find-right:                      stacks searching.    (line  67)
* stack-find-right <1>:                  stacks searching.    (line  68)
* stack-fold-left:                       stacks folding.      (line  11)
* stack-fold-right:                      stacks folding.      (line  24)
* stack-for-all:                         stacks searching.    (line  11)
* stack-for-each:                        stacks mapping.      (line  51)
* stack-for-each-left:                   stacks mapping.      (line  41)
* stack-for-each-right:                  stacks mapping.      (line  46)
* stack-getprop:                         stacks objects.      (line  48)
* stack-hash:                            stacks objects.      (line  67)
* stack-map:                             stacks mapping.      (line  37)
* stack-map-left:                        stacks mapping.      (line  11)
* stack-map-right:                       stacks mapping.      (line  24)
* stack-not-empty?:                      stacks inspection.   (line  15)
* stack-partition:                       stacks filtering.    (line  20)
* stack-pop!:                            stacks access.       (line  20)
* stack-property-list:                   stacks objects.      (line  58)
* stack-purge!:                          stacks access.       (line  25)
* stack-push!:                           stacks access.       (line  16)
* stack-putprop:                         stacks objects.      (line  42)
* stack-remprop:                         stacks objects.      (line  53)
* stack-reverse!:                        stacks misc.         (line  22)
* stack-size?:                           stacks inspection.   (line  19)
* stack-top:                             stacks access.       (line  11)
* stack?:                                stacks objects.      (line  25)
* start-and-end-for-bytevector:          args predefined bytevectors.
                                                              (line  41)
* start-and-end-for-string:              args predefined strings.
                                                              (line  52)
* start-and-end-for-vector:              args predefined vectors.
                                                              (line  34)
* start-and-past-for-bytevector:         args predefined bytevectors.
                                                              (line  49)
* start-and-past-for-string:             args predefined strings.
                                                              (line  60)
* start-and-past-for-vector:             args predefined vectors.
                                                              (line  42)
* stat:                                  posix stat.          (line  34)
* store-value:                           restarts func.       (line  17)
* store-value <1>:                       restarts func.       (line  18)
* stream:                                streams cons.        (line   6)
* stream <1>:                            srfi streams derived.
                                                              (line  68)
* stream->list:                          streams to.          (line   6)
* stream->list <1>:                      streams to.          (line   7)
* stream->list <2>:                      srfi streams derived.
                                                              (line  82)
* stream-append:                         streams ops.         (line  45)
* stream-append <1>:                     srfi streams derived.
                                                              (line  97)
* stream-car:                            streams basic.       (line  68)
* stream-car <1>:                        srfi streams primitive.
                                                              (line  77)
* stream-cdr:                            streams basic.       (line  75)
* stream-cdr <1>:                        srfi streams primitive.
                                                              (line  84)
* stream-concat:                         streams ops.         (line  86)
* stream-concat <1>:                     srfi streams derived.
                                                              (line 138)
* stream-cons:                           streams basic.       (line  38)
* stream-cons <1>:                       srfi streams primitive.
                                                              (line  39)
* stream-constant:                       streams cons.        (line  20)
* stream-constant <1>:                   srfi streams derived.
                                                              (line 178)
* stream-drop:                           streams select.      (line   6)
* stream-drop <1>:                       srfi streams derived.
                                                              (line 189)
* stream-drop-while:                     streams select.      (line  20)
* stream-drop-while <1>:                 srfi streams derived.
                                                              (line 203)
* stream-filter:                         streams select.      (line  68)
* stream-filter <1>:                     srfi streams derived.
                                                              (line 221)
* stream-fold:                           streams fold.        (line  33)
* stream-fold <1>:                       srfi streams derived.
                                                              (line 230)
* stream-for-each:                       streams map.         (line  28)
* stream-for-each <1>:                   srfi streams derived.
                                                              (line 283)
* stream-from:                           streams range.       (line   6)
* stream-from <1>:                       streams range.       (line   7)
* stream-from <2>:                       srfi streams derived.
                                                              (line 295)
* stream-iterate:                        streams fold.        (line   6)
* stream-iterate <1>:                    srfi streams derived.
                                                              (line 312)
* stream-lambda:                         streams basic.       (line  81)
* stream-lambda <1>:                     srfi streams primitive.
                                                              (line  90)
* stream-length:                         streams ops.         (line   6)
* stream-length <1>:                     srfi streams derived.
                                                              (line 339)
* stream-let:                            streams cons.        (line  53)
* stream-let <1>:                        srfi streams derived.
                                                              (line 349)
* stream-map:                            streams map.         (line   6)
* stream-map <1>:                        srfi streams derived.
                                                              (line 376)
* stream-match:                          streams match.       (line   6)
* stream-match <1>:                      srfi streams derived.
                                                              (line 399)
* stream-null:                           streams basic.       (line  33)
* stream-null <1>:                       srfi streams primitive.
                                                              (line  34)
* stream-null?:                          streams basic.       (line  57)
* stream-null? <1>:                      srfi streams primitive.
                                                              (line  66)
* stream-of:                             streams of.          (line   6)
* stream-of <1>:                         srfi streams derived.
                                                              (line 479)
* stream-pair?:                          streams basic.       (line  62)
* stream-pair? <1>:                      srfi streams primitive.
                                                              (line  71)
* stream-range:                          streams range.       (line  31)
* stream-range <1>:                      streams range.       (line  32)
* stream-range <2>:                      srfi streams derived.
                                                              (line 526)
* stream-ref:                            streams ops.         (line  20)
* stream-ref <1>:                        srfi streams derived.
                                                              (line 550)
* stream-reverse:                        streams ops.         (line  31)
* stream-reverse <1>:                    srfi streams derived.
                                                              (line 561)
* stream-scan:                           streams fold.        (line  87)
* stream-scan <1>:                       srfi streams derived.
                                                              (line 574)
* stream-take:                           streams select.      (line  38)
* stream-take <1>:                       srfi streams derived.
                                                              (line 591)
* stream-take-while:                     streams select.      (line  55)
* stream-take-while <1>:                 srfi streams derived.
                                                              (line 608)
* stream-unfold:                         streams unfold.      (line   6)
* stream-unfold <1>:                     srfi streams derived.
                                                              (line 621)
* stream-unfolds:                        streams unfold.      (line  32)
* stream-unfolds <1>:                    srfi streams derived.
                                                              (line 647)
* stream-zip:                            streams ops.         (line 126)
* stream-zip <1>:                        srfi streams derived.
                                                              (line 706)
* stream?:                               streams basic.       (line  48)
* stream? <1>:                           srfi streams primitive.
                                                              (line  57)
* strerror:                              posix misc.          (line   6)
* strftime:                              posix time functions.
                                                              (line  56)
* strftime/string:                       posix time functions.
                                                              (line  57)
* string:                                srfi strings spec cons.
                                                              (line  12)
* string <1>:                            args predefined strings.
                                                              (line   9)
* string->char-set:                      srfi char-sets spec create.
                                                              (line  26)
* string->char-set <1>:                  srfi char-sets spec create.
                                                              (line  27)
* string->char-set <2>:                  char-sets ops.       (line  90)
* string->char-set <3>:                  char-sets ops.       (line  91)
* string->char-set!:                     srfi char-sets spec create.
                                                              (line  28)
* string->date:                          srfi time spec string.
                                                              (line  70)
* string->irregex:                       irregex compile.     (line   7)
* string->list:                          srfi strings spec list.
                                                              (line   6)
* string->list <1>:                      srfi strings spec list.
                                                              (line   7)
* string->list <2>:                      srfi strings spec list.
                                                              (line   8)
* string->list*:                         strings list.        (line   7)
* string->token-or-false:                parser logic api.    (line 259)
* string-any:                            srfi strings spec pred.
                                                              (line  39)
* string-any <1>:                        srfi strings spec pred.
                                                              (line  40)
* string-any <2>:                        srfi strings spec pred.
                                                              (line  41)
* string-any <3>:                        strings pred.        (line  12)
* string-append:                         srfi strings spec append.
                                                              (line  34)
* string-append-ec:                      loops comprehensions string.
                                                              (line  29)
* string-append-ec <1>:                  srfi eager-comp spec comprehensions.
                                                              (line  28)
* string-append/shared:                  srfi strings spec append.
                                                              (line  48)
* string-ci-hash:                        srfi hash-tables spec hashing.
                                                              (line  42)
* string-ci-hash <1>:                    srfi hash-tables spec hashing.
                                                              (line  43)
* string-ci<:                            srfi strings spec compar.
                                                              (line 115)
* string-ci< <1>:                        srfi strings spec compar.
                                                              (line 116)
* string-ci< <2>:                        srfi strings spec compar.
                                                              (line 117)
* string-ci< <3>:                        srfi strings spec compar.
                                                              (line 118)
* string-ci< <4>:                        srfi strings spec compar.
                                                              (line 119)
* string-ci< <5>:                        strings compar lexi. (line  61)
* string-ci<=:                           srfi strings spec compar.
                                                              (line 129)
* string-ci<= <1>:                       srfi strings spec compar.
                                                              (line 130)
* string-ci<= <2>:                       srfi strings spec compar.
                                                              (line 131)
* string-ci<= <3>:                       srfi strings spec compar.
                                                              (line 132)
* string-ci<= <4>:                       srfi strings spec compar.
                                                              (line 133)
* string-ci<= <5>:                       strings compar lexi. (line  82)
* string-ci<>:                           srfi strings spec compar.
                                                              (line 108)
* string-ci<> <1>:                       srfi strings spec compar.
                                                              (line 109)
* string-ci<> <2>:                       srfi strings spec compar.
                                                              (line 110)
* string-ci<> <3>:                       srfi strings spec compar.
                                                              (line 111)
* string-ci<> <4>:                       srfi strings spec compar.
                                                              (line 112)
* string-ci<> <5>:                       strings compar lexi. (line  49)
* string-ci=:                            srfi strings spec compar.
                                                              (line 101)
* string-ci= <1>:                        srfi strings spec compar.
                                                              (line 102)
* string-ci= <2>:                        srfi strings spec compar.
                                                              (line 103)
* string-ci= <3>:                        srfi strings spec compar.
                                                              (line 104)
* string-ci= <4>:                        srfi strings spec compar.
                                                              (line 105)
* string-ci= <5>:                        strings compar lexi. (line  42)
* string-ci>:                            srfi strings spec compar.
                                                              (line 122)
* string-ci> <1>:                        srfi strings spec compar.
                                                              (line 123)
* string-ci> <2>:                        srfi strings spec compar.
                                                              (line 124)
* string-ci> <3>:                        srfi strings spec compar.
                                                              (line 125)
* string-ci> <4>:                        srfi strings spec compar.
                                                              (line 126)
* string-ci> <5>:                        strings compar lexi. (line 103)
* string-ci>=:                           srfi strings spec compar.
                                                              (line 136)
* string-ci>= <1>:                       srfi strings spec compar.
                                                              (line 137)
* string-ci>= <2>:                       srfi strings spec compar.
                                                              (line 138)
* string-ci>= <3>:                       srfi strings spec compar.
                                                              (line 139)
* string-ci>= <4>:                       srfi strings spec compar.
                                                              (line 140)
* string-ci>= <5>:                       strings compar lexi. (line 124)
* string-compare:                        comparisons atoms.   (line  28)
* string-compare <1>:                    srfi strings spec compar.
                                                              (line   6)
* string-compare <2>:                    srfi strings spec compar.
                                                              (line   7)
* string-compare <3>:                    srfi strings spec compar.
                                                              (line   8)
* string-compare <4>:                    srfi strings spec compar.
                                                              (line   9)
* string-compare <5>:                    srfi strings spec compar.
                                                              (line  11)
* string-compare <6>:                    srfi compare-procedures spec atom.
                                                              (line  30)
* string-compare <7>:                    strings compar lexi. (line  10)
* string-compare-ci:                     comparisons atoms.   (line  29)
* string-compare-ci <1>:                 srfi strings spec compar.
                                                              (line  32)
* string-compare-ci <2>:                 srfi strings spec compar.
                                                              (line  33)
* string-compare-ci <3>:                 srfi strings spec compar.
                                                              (line  34)
* string-compare-ci <4>:                 srfi strings spec compar.
                                                              (line  35)
* string-compare-ci <5>:                 srfi strings spec compar.
                                                              (line  37)
* string-compare-ci <6>:                 srfi compare-procedures spec atom.
                                                              (line  31)
* string-compare-ci <7>:                 strings compar lexi. (line  11)
* string-concatenate:                    srfi strings spec append.
                                                              (line  38)
* string-concatenate <1>:                strings cons.        (line   6)
* string-concatenate-reverse:            srfi strings spec append.
                                                              (line  56)
* string-concatenate-reverse <1>:        srfi strings spec append.
                                                              (line  57)
* string-concatenate-reverse <2>:        srfi strings spec append.
                                                              (line  58)
* string-concatenate-reverse <3>:        strings cons.        (line  12)
* string-concatenate-reverse <4>:        strings cons.        (line  13)
* string-concatenate-reverse <5>:        strings cons.        (line  14)
* string-concatenate-reverse/shared:     srfi strings spec append.
                                                              (line  91)
* string-concatenate-reverse/shared <1>: srfi strings spec append.
                                                              (line  92)
* string-concatenate-reverse/shared <2>: srfi strings spec append.
                                                              (line  93)
* string-concatenate/shared:             srfi strings spec append.
                                                              (line  47)
* string-contains:                       srfi strings spec search.
                                                              (line  68)
* string-contains <1>:                   srfi strings spec search.
                                                              (line  69)
* string-contains <2>:                   srfi strings spec search.
                                                              (line  70)
* string-contains <3>:                   srfi strings spec search.
                                                              (line  71)
* string-contains <4>:                   srfi strings spec search.
                                                              (line  72)
* string-contains <5>:                   strings search.      (line  53)
* string-contains-ci:                    srfi strings spec search.
                                                              (line  87)
* string-contains-ci <1>:                srfi strings spec search.
                                                              (line  88)
* string-contains-ci <2>:                srfi strings spec search.
                                                              (line  89)
* string-contains-ci <3>:                srfi strings spec search.
                                                              (line  90)
* string-contains-ci <4>:                srfi strings spec search.
                                                              (line  91)
* string-contains-ci <5>:                strings search.      (line  54)
* string-copy:                           srfi strings spec select.
                                                              (line  13)
* string-copy <1>:                       srfi strings spec select.
                                                              (line  14)
* string-copy <2>:                       srfi strings spec select.
                                                              (line  15)
* string-copy!:                          srfi strings spec select.
                                                              (line  49)
* string-copy! <1>:                      srfi strings spec select.
                                                              (line  50)
* string-copy! <2>:                      srfi strings spec select.
                                                              (line  51)
* string-copy*:                          strings select.      (line  10)
* string-copy*!:                         strings select.      (line  32)
* string-count:                          srfi strings spec search.
                                                              (line  59)
* string-count <1>:                      srfi strings spec search.
                                                              (line  60)
* string-count <2>:                      srfi strings spec search.
                                                              (line  61)
* string-count <3>:                      strings search.      (line  39)
* string-delete:                         srfi strings spec misc.
                                                              (line  63)
* string-delete <1>:                     srfi strings spec misc.
                                                              (line  64)
* string-delete <2>:                     srfi strings spec misc.
                                                              (line  65)
* string-delete <3>:                     strings filter.      (line  22)
* string-dictionary-ci<=?:               strings compar dict. (line  45)
* string-dictionary-ci<>?:               strings compar dict. (line  42)
* string-dictionary-ci<?:                strings compar dict. (line  43)
* string-dictionary-ci=?:                strings compar dict. (line  41)
* string-dictionary-ci>=?:               strings compar dict. (line  46)
* string-dictionary-ci>?:                strings compar dict. (line  44)
* string-dictionary-compare:             strings compar dict. (line  14)
* string-dictionary-compare-ci:          strings compar dict. (line  35)
* string-dictionary<=?:                  strings compar dict. (line  23)
* string-dictionary<>?:                  strings compar dict. (line  21)
* string-dictionary<?:                   strings compar dict. (line  22)
* string-dictionary=?:                   strings compar dict. (line  20)
* string-dictionary>=?:                  strings compar dict. (line  25)
* string-dictionary>?:                   strings compar dict. (line  24)
* string-downcase:                       srfi strings spec case-map.
                                                              (line  51)
* string-downcase <1>:                   srfi strings spec case-map.
                                                              (line  52)
* string-downcase <2>:                   srfi strings spec case-map.
                                                              (line  53)
* string-downcase!:                      srfi strings spec case-map.
                                                              (line  57)
* string-downcase! <1>:                  srfi strings spec case-map.
                                                              (line  58)
* string-downcase! <2>:                  srfi strings spec case-map.
                                                              (line  59)
* string-downcase*:                      strings case.        (line  36)
* string-downcase*!:                     strings case.        (line  37)
* string-drop:                           srfi strings spec select.
                                                              (line  66)
* string-drop <1>:                       strings select.      (line  57)
* string-drop-right:                     srfi strings spec select.
                                                              (line  68)
* string-drop-right <1>:                 strings select.      (line  58)
* string-ec:                             loops comprehensions string.
                                                              (line   6)
* string-ec <1>:                         srfi eager-comp spec comprehensions.
                                                              (line  23)
* string-every:                          srfi strings spec pred.
                                                              (line  12)
* string-every <1>:                      srfi strings spec pred.
                                                              (line  13)
* string-every <2>:                      srfi strings spec pred.
                                                              (line  14)
* string-every <3>:                      strings pred.        (line  11)
* string-fill!:                          srfi strings spec modify.
                                                              (line  13)
* string-fill! <1>:                      srfi strings spec modify.
                                                              (line  14)
* string-fill! <2>:                      srfi strings spec modify.
                                                              (line  15)
* string-fill*!:                         strings mutate.      (line  10)
* string-filter:                         srfi strings spec misc.
                                                              (line  60)
* string-filter <1>:                     srfi strings spec misc.
                                                              (line  61)
* string-filter <2>:                     srfi strings spec misc.
                                                              (line  62)
* string-filter <3>:                     strings filter.      (line   7)
* string-fold:                           srfi strings spec fold.
                                                              (line  43)
* string-fold <1>:                       srfi strings spec fold.
                                                              (line  44)
* string-fold <2>:                       srfi strings spec fold.
                                                              (line  45)
* string-fold <3>:                       strings fold.        (line  37)
* string-fold-left:                      strings fold.        (line   6)
* string-fold-left*:                     strings fold.        (line  30)
* string-fold-right:                     srfi strings spec fold.
                                                              (line  46)
* string-fold-right <1>:                 srfi strings spec fold.
                                                              (line  47)
* string-fold-right <2>:                 srfi strings spec fold.
                                                              (line  48)
* string-fold-right <3>:                 strings fold.        (line   7)
* string-fold-right <4>:                 strings fold.        (line  38)
* string-fold-right*:                    strings fold.        (line  31)
* string-for-each:                       srfi strings spec fold.
                                                              (line  21)
* string-for-each <1>:                   srfi strings spec fold.
                                                              (line  22)
* string-for-each <2>:                   srfi strings spec fold.
                                                              (line  23)
* string-for-each*:                      strings map.         (line  39)
* string-for-each-index:                 srfi strings spec fold.
                                                              (line  27)
* string-for-each-index <1>:             srfi strings spec fold.
                                                              (line  28)
* string-for-each-index <2>:             srfi strings spec fold.
                                                              (line  29)
* string-hash:                           srfi strings spec compar.
                                                              (line 143)
* string-hash <1>:                       srfi strings spec compar.
                                                              (line 144)
* string-hash <2>:                       srfi strings spec compar.
                                                              (line 145)
* string-hash <3>:                       srfi strings spec compar.
                                                              (line 146)
* string-hash <4>:                       srfi hash-tables spec hashing.
                                                              (line  37)
* string-hash <5>:                       srfi hash-tables spec hashing.
                                                              (line  38)
* string-hash-ci:                        srfi strings spec compar.
                                                              (line 147)
* string-hash-ci <1>:                    srfi strings spec compar.
                                                              (line 148)
* string-hash-ci <2>:                    srfi strings spec compar.
                                                              (line 149)
* string-hash-ci <3>:                    srfi strings spec compar.
                                                              (line 150)
* string-index:                          srfi strings spec search.
                                                              (line  25)
* string-index <1>:                      srfi strings spec search.
                                                              (line  26)
* string-index <2>:                      srfi strings spec search.
                                                              (line  27)
* string-index <3>:                      strings search.      (line   8)
* string-index-right:                    srfi strings spec search.
                                                              (line  32)
* string-index-right <1>:                srfi strings spec search.
                                                              (line  33)
* string-index-right <2>:                srfi strings spec search.
                                                              (line  34)
* string-index-right <3>:                strings search.      (line   9)
* string-join:                           srfi strings spec list.
                                                              (line  26)
* string-join <1>:                       srfi strings spec list.
                                                              (line  27)
* string-join <2>:                       srfi strings spec list.
                                                              (line  28)
* string-join <3>:                       strings list.        (line  44)
* string-join <4>:                       strings list.        (line  45)
* string-join <5>:                       strings list.        (line  46)
* string-length:                         srfi strings spec select.
                                                              (line   6)
* string-levenshtein:                    levenshtein basic.   (line  49)
* string-map:                            srfi strings spec fold.
                                                              (line   6)
* string-map <1>:                        srfi strings spec fold.
                                                              (line   7)
* string-map <2>:                        srfi strings spec fold.
                                                              (line   8)
* string-map <3>:                        strings map.         (line   6)
* string-map!:                           srfi strings spec fold.
                                                              (line  16)
* string-map! <1>:                       srfi strings spec fold.
                                                              (line  17)
* string-map! <2>:                       srfi strings spec fold.
                                                              (line  18)
* string-map! <3>:                       strings map.         (line  21)
* string-map*!:                          strings map.         (line  22)
* string-null?:                          srfi strings spec pred.
                                                              (line   9)
* string-null? <1>:                      strings pred.        (line   6)
* string-or-symbol:                      args predefined strings.
                                                              (line  25)
* string-or-symbol-or-false:             args predefined strings.
                                                              (line  26)
* string-pad:                            srfi strings spec select.
                                                              (line  94)
* string-pad <1>:                        srfi strings spec select.
                                                              (line  95)
* string-pad <2>:                        srfi strings spec select.
                                                              (line  96)
* string-pad <3>:                        srfi strings spec select.
                                                              (line  97)
* string-pad <4>:                        strings pad.         (line   8)
* string-pad <5>:                        strings pad.         (line   9)
* string-pad-right:                      srfi strings spec select.
                                                              (line  98)
* string-pad-right <1>:                  srfi strings spec select.
                                                              (line  99)
* string-pad-right <2>:                  srfi strings spec select.
                                                              (line 100)
* string-pad-right <3>:                  srfi strings spec select.
                                                              (line 101)
* string-pad-right <4>:                  strings pad.         (line  10)
* string-pad-right <5>:                  strings pad.         (line  11)
* string-pathname?:                      parser-tools unix-pathnames preds.
                                                              (line  12)
* string-prefix-ci?:                     srfi strings spec prefix.
                                                              (line  45)
* string-prefix-ci? <1>:                 srfi strings spec prefix.
                                                              (line  46)
* string-prefix-ci? <2>:                 srfi strings spec prefix.
                                                              (line  47)
* string-prefix-ci? <3>:                 srfi strings spec prefix.
                                                              (line  48)
* string-prefix-ci? <4>:                 srfi strings spec prefix.
                                                              (line  49)
* string-prefix-ci? <5>:                 strings prefix.      (line  26)
* string-prefix-length:                  srfi strings spec prefix.
                                                              (line   6)
* string-prefix-length <1>:              srfi strings spec prefix.
                                                              (line   7)
* string-prefix-length <2>:              srfi strings spec prefix.
                                                              (line   8)
* string-prefix-length <3>:              srfi strings spec prefix.
                                                              (line   9)
* string-prefix-length <4>:              srfi strings spec prefix.
                                                              (line  10)
* string-prefix-length <5>:              strings prefix.      (line   9)
* string-prefix-length-ci:               srfi strings spec prefix.
                                                              (line  15)
* string-prefix-length-ci <1>:           srfi strings spec prefix.
                                                              (line  16)
* string-prefix-length-ci <2>:           srfi strings spec prefix.
                                                              (line  17)
* string-prefix-length-ci <3>:           srfi strings spec prefix.
                                                              (line  18)
* string-prefix-length-ci <4>:           srfi strings spec prefix.
                                                              (line  19)
* string-prefix-length-ci <5>:           strings prefix.      (line  10)
* string-prefix?:                        srfi strings spec prefix.
                                                              (line  37)
* string-prefix? <1>:                    srfi strings spec prefix.
                                                              (line  38)
* string-prefix? <2>:                    srfi strings spec prefix.
                                                              (line  39)
* string-prefix? <3>:                    srfi strings spec prefix.
                                                              (line  40)
* string-prefix? <4>:                    srfi strings spec prefix.
                                                              (line  41)
* string-prefix? <5>:                    strings prefix.      (line  25)
* string-ref:                            srfi strings spec select.
                                                              (line   9)
* string-replace:                        srfi strings spec misc.
                                                              (line   6)
* string-replace <1>:                    srfi strings spec misc.
                                                              (line   7)
* string-replace <2>:                    srfi strings spec misc.
                                                              (line   8)
* string-replace <3>:                    strings misc.        (line   7)
* string-reverse:                        srfi strings spec append.
                                                              (line   6)
* string-reverse <1>:                    srfi strings spec append.
                                                              (line   7)
* string-reverse <2>:                    srfi strings spec append.
                                                              (line   8)
* string-reverse <3>:                    strings misc.        (line  13)
* string-reverse!:                       srfi strings spec append.
                                                              (line  29)
* string-reverse! <1>:                   srfi strings spec append.
                                                              (line  30)
* string-reverse! <2>:                   srfi strings spec append.
                                                              (line  31)
* string-reverse! <3>:                   strings misc.        (line  14)
* string-reverse-copy*:                  strings select.      (line  21)
* string-reverse-copy*!:                 strings select.      (line  44)
* string-search-and-replace:             strings search.      (line  63)
* string-search-and-replace-ci:          strings search.      (line  65)
* string-segment?:                       parser-tools unix-pathnames preds.
                                                              (line  26)
* string-set!:                           srfi strings spec modify.
                                                              (line   6)
* string-skip:                           srfi strings spec search.
                                                              (line  39)
* string-skip <1>:                       srfi strings spec search.
                                                              (line  40)
* string-skip <2>:                       srfi strings spec search.
                                                              (line  41)
* string-skip <3>:                       strings search.      (line  24)
* string-skip-right:                     srfi strings spec search.
                                                              (line  52)
* string-skip-right <1>:                 srfi strings spec search.
                                                              (line  53)
* string-skip-right <2>:                 srfi strings spec search.
                                                              (line  54)
* string-skip-right <3>:                 strings search.      (line  25)
* string-suffix-ci?:                     srfi strings spec prefix.
                                                              (line  60)
* string-suffix-ci? <1>:                 srfi strings spec prefix.
                                                              (line  61)
* string-suffix-ci? <2>:                 srfi strings spec prefix.
                                                              (line  62)
* string-suffix-ci? <3>:                 srfi strings spec prefix.
                                                              (line  63)
* string-suffix-ci? <4>:                 srfi strings spec prefix.
                                                              (line  64)
* string-suffix-ci? <5>:                 strings prefix.      (line  34)
* string-suffix-length:                  srfi strings spec prefix.
                                                              (line  22)
* string-suffix-length <1>:              srfi strings spec prefix.
                                                              (line  23)
* string-suffix-length <2>:              srfi strings spec prefix.
                                                              (line  24)
* string-suffix-length <3>:              srfi strings spec prefix.
                                                              (line  25)
* string-suffix-length <4>:              srfi strings spec prefix.
                                                              (line  26)
* string-suffix-length <5>:              strings prefix.      (line  18)
* string-suffix-length-ci:               srfi strings spec prefix.
                                                              (line  30)
* string-suffix-length-ci <1>:           srfi strings spec prefix.
                                                              (line  31)
* string-suffix-length-ci <2>:           srfi strings spec prefix.
                                                              (line  32)
* string-suffix-length-ci <3>:           srfi strings spec prefix.
                                                              (line  33)
* string-suffix-length-ci <4>:           srfi strings spec prefix.
                                                              (line  34)
* string-suffix-length-ci <5>:           strings prefix.      (line  19)
* string-suffix?:                        srfi strings spec prefix.
                                                              (line  52)
* string-suffix? <1>:                    srfi strings spec prefix.
                                                              (line  53)
* string-suffix? <2>:                    srfi strings spec prefix.
                                                              (line  54)
* string-suffix? <3>:                    srfi strings spec prefix.
                                                              (line  55)
* string-suffix? <4>:                    srfi strings spec prefix.
                                                              (line  56)
* string-suffix? <5>:                    strings prefix.      (line  33)
* string-swap!:                          strings mutate.      (line   6)
* string-tabulate:                       srfi strings spec cons.
                                                              (line  16)
* string-tabulate <1>:                   strings cons.        (line  27)
* string-take:                           srfi strings spec select.
                                                              (line  65)
* string-take <1>:                       strings select.      (line  50)
* string-take-right:                     srfi strings spec select.
                                                              (line  67)
* string-take-right <1>:                 strings select.      (line  51)
* string-titlecase:                      srfi strings spec case-map.
                                                              (line   6)
* string-titlecase <1>:                  srfi strings spec case-map.
                                                              (line   7)
* string-titlecase <2>:                  srfi strings spec case-map.
                                                              (line   8)
* string-titlecase!:                     srfi strings spec case-map.
                                                              (line  35)
* string-titlecase! <1>:                 srfi strings spec case-map.
                                                              (line  36)
* string-titlecase! <2>:                 srfi strings spec case-map.
                                                              (line  37)
* string-titlecase*:                     strings case.        (line   7)
* string-titlecase*!:                    strings case.        (line   8)
* string-to-bytevector:                  cbuffers api.        (line  57)
* string-to-bytevector <1>:              cbuffers api.        (line  89)
* string-tokenise:                       strings list.        (line  27)
* string-tokenize:                       srfi strings spec misc.
                                                              (line  36)
* string-tokenize <1>:                   srfi strings spec misc.
                                                              (line  37)
* string-tokenize <2>:                   srfi strings spec misc.
                                                              (line  38)
* string-tokenize <3>:                   srfi strings spec misc.
                                                              (line  39)
* string-tokenize <4>:                   strings list.        (line  26)
* string-trim:                           srfi strings spec select.
                                                              (line 116)
* string-trim <1>:                       srfi strings spec select.
                                                              (line 117)
* string-trim <2>:                       srfi strings spec select.
                                                              (line 118)
* string-trim <3>:                       srfi strings spec select.
                                                              (line 119)
* string-trim <4>:                       strings pad.         (line  29)
* string-trim-both:                      srfi strings spec select.
                                                              (line 124)
* string-trim-both <1>:                  srfi strings spec select.
                                                              (line 125)
* string-trim-both <2>:                  srfi strings spec select.
                                                              (line 126)
* string-trim-both <3>:                  srfi strings spec select.
                                                              (line 127)
* string-trim-both <4>:                  strings pad.         (line  31)
* string-trim-right:                     srfi strings spec select.
                                                              (line 120)
* string-trim-right <1>:                 srfi strings spec select.
                                                              (line 121)
* string-trim-right <2>:                 srfi strings spec select.
                                                              (line 122)
* string-trim-right <3>:                 srfi strings spec select.
                                                              (line 123)
* string-trim-right <4>:                 strings pad.         (line  30)
* string-unfold:                         srfi strings spec fold.
                                                              (line 107)
* string-unfold <1>:                     srfi strings spec fold.
                                                              (line 108)
* string-unfold <2>:                     srfi strings spec fold.
                                                              (line 110)
* string-unfold <3>:                     strings fold.        (line 117)
* string-unfold <4>:                     strings fold.        (line 118)
* string-unfold <5>:                     strings fold.        (line 120)
* string-unfold-right:                   srfi strings spec fold.
                                                              (line 214)
* string-unfold-right <1>:               srfi strings spec fold.
                                                              (line 215)
* string-unfold-right <2>:               srfi strings spec fold.
                                                              (line 217)
* string-unfold-right <3>:               strings fold.        (line 220)
* string-unfold-right <4>:               strings fold.        (line 221)
* string-unfold-right <5>:               strings fold.        (line 223)
* string-upcase:                         srfi strings spec case-map.
                                                              (line  40)
* string-upcase <1>:                     srfi strings spec case-map.
                                                              (line  41)
* string-upcase <2>:                     srfi strings spec case-map.
                                                              (line  42)
* string-upcase!:                        srfi strings spec case-map.
                                                              (line  46)
* string-upcase! <1>:                    srfi strings spec case-map.
                                                              (line  47)
* string-upcase! <2>:                    srfi strings spec case-map.
                                                              (line  48)
* string-upcase*:                        strings case.        (line  34)
* string-upcase*!:                       strings case.        (line  35)
* string-xcopy!:                         srfi strings spec replicate.
                                                              (line  62)
* string-xcopy! <1>:                     srfi strings spec replicate.
                                                              (line  63)
* string-xcopy! <2>:                     srfi strings spec replicate.
                                                              (line  64)
* string-xcopy! <3>:                     srfi strings spec replicate.
                                                              (line  66)
* string-xcopy! <4>:                     strings replicate.   (line  62)
* string/bytevector->pathname-bytevector: parser-tools unix-pathnames conv.
                                                              (line   9)
* string/bytevector->pathname-bytevector <1>: parser-tools unix-pathnames conv.
                                                              (line  10)
* string/false:                          args predefined strings.
                                                              (line  12)
* string/numbers-ci<=?:                  strings compar number.
                                                              (line  68)
* string/numbers-ci<>?:                  strings compar number.
                                                              (line  65)
* string/numbers-ci<?:                   strings compar number.
                                                              (line  66)
* string/numbers-ci=?:                   strings compar number.
                                                              (line  64)
* string/numbers-ci>=?:                  strings compar number.
                                                              (line  69)
* string/numbers-ci>?:                   strings compar number.
                                                              (line  67)
* string/numbers-compare:                strings compar number.
                                                              (line  35)
* string/numbers-compare-ci:             strings compar number.
                                                              (line  57)
* string/numbers-dictionary-ci<=?:       strings compar dictnumber.
                                                              (line  53)
* string/numbers-dictionary-ci<>?:       strings compar dictnumber.
                                                              (line  50)
* string/numbers-dictionary-ci<?:        strings compar dictnumber.
                                                              (line  51)
* string/numbers-dictionary-ci=?:        strings compar dictnumber.
                                                              (line  49)
* string/numbers-dictionary-ci>=?:       strings compar dictnumber.
                                                              (line  54)
* string/numbers-dictionary-ci>?:        strings compar dictnumber.
                                                              (line  52)
* string/numbers-dictionary-compare:     strings compar dictnumber.
                                                              (line  20)
* string/numbers-dictionary-compare-ci:  strings compar dictnumber.
                                                              (line  42)
* string/numbers-dictionary<=?:          strings compar dictnumber.
                                                              (line  30)
* string/numbers-dictionary<>?:          strings compar dictnumber.
                                                              (line  28)
* string/numbers-dictionary<?:           strings compar dictnumber.
                                                              (line  29)
* string/numbers-dictionary=?:           strings compar dictnumber.
                                                              (line  27)
* string/numbers-dictionary>=?:          strings compar dictnumber.
                                                              (line  32)
* string/numbers-dictionary>?:           strings compar dictnumber.
                                                              (line  31)
* string/numbers<=?:                     strings compar number.
                                                              (line  45)
* string/numbers<>?:                     strings compar number.
                                                              (line  43)
* string/numbers<?:                      strings compar number.
                                                              (line  44)
* string/numbers=?:                      strings compar number.
                                                              (line  42)
* string/numbers>=?:                     strings compar number.
                                                              (line  47)
* string/numbers>?:                      strings compar number.
                                                              (line  46)
* string::                               silex input.         (line  24)
* string<:                               srfi strings spec compar.
                                                              (line  69)
* string< <1>:                           srfi strings spec compar.
                                                              (line  70)
* string< <2>:                           srfi strings spec compar.
                                                              (line  71)
* string< <3>:                           srfi strings spec compar.
                                                              (line  72)
* string< <4>:                           srfi strings spec compar.
                                                              (line  73)
* string< <5>:                           strings compar lexi. (line  60)
* string<=:                              srfi strings spec compar.
                                                              (line  85)
* string<= <1>:                          srfi strings spec compar.
                                                              (line  86)
* string<= <2>:                          srfi strings spec compar.
                                                              (line  87)
* string<= <3>:                          srfi strings spec compar.
                                                              (line  88)
* string<= <4>:                          srfi strings spec compar.
                                                              (line  89)
* string<= <5>:                          strings compar lexi. (line  81)
* string<>:                              srfi strings spec compar.
                                                              (line  61)
* string<> <1>:                          srfi strings spec compar.
                                                              (line  62)
* string<> <2>:                          srfi strings spec compar.
                                                              (line  63)
* string<> <3>:                          srfi strings spec compar.
                                                              (line  64)
* string<> <4>:                          srfi strings spec compar.
                                                              (line  65)
* string<> <5>:                          strings compar lexi. (line  48)
* string=:                               srfi strings spec compar.
                                                              (line  53)
* string= <1>:                           srfi strings spec compar.
                                                              (line  54)
* string= <2>:                           srfi strings spec compar.
                                                              (line  55)
* string= <3>:                           srfi strings spec compar.
                                                              (line  56)
* string= <4>:                           srfi strings spec compar.
                                                              (line  57)
* string= <5>:                           strings compar lexi. (line  41)
* string>:                               srfi strings spec compar.
                                                              (line  77)
* string> <1>:                           srfi strings spec compar.
                                                              (line  78)
* string> <2>:                           srfi strings spec compar.
                                                              (line  79)
* string> <3>:                           srfi strings spec compar.
                                                              (line  80)
* string> <4>:                           srfi strings spec compar.
                                                              (line  81)
* string> <5>:                           strings compar lexi. (line 102)
* string>=:                              srfi strings spec compar.
                                                              (line  93)
* string>= <1>:                          srfi strings spec compar.
                                                              (line  94)
* string>= <2>:                          srfi strings spec compar.
                                                              (line  95)
* string>= <3>:                          srfi strings spec compar.
                                                              (line  96)
* string>= <4>:                          srfi strings spec compar.
                                                              (line  97)
* string>= <5>:                          strings compar lexi. (line 123)
* string?:                               srfi strings spec pred.
                                                              (line   6)
* strip-trailing-slashes:                parser-tools unix-pathnames comp.
                                                              (line 221)
* struct-addrinfo-ai_addr:               posix socket addresses info.
                                                              (line  48)
* struct-addrinfo-ai_addrlen:            posix socket addresses info.
                                                              (line  47)
* struct-addrinfo-ai_canonname:          posix socket addresses info.
                                                              (line  49)
* struct-addrinfo-ai_family:             posix socket addresses info.
                                                              (line  44)
* struct-addrinfo-ai_flags:              posix socket addresses info.
                                                              (line  43)
* struct-addrinfo-ai_protocol:           posix socket addresses info.
                                                              (line  46)
* struct-addrinfo-ai_socktype:           posix socket addresses info.
                                                              (line  45)
* struct-addrinfo?:                      posix socket addresses info.
                                                              (line  40)
* struct-group-gr_gid:                   posix users.         (line 155)
* struct-group-gr_mem:                   posix users.         (line 156)
* struct-group-gr_name:                  posix users.         (line 154)
* struct-hostent-h_addr:                 posix socket hosts.  (line  42)
* struct-hostent-h_addrtype:             posix socket hosts.  (line  39)
* struct-hostent-h_addr_list:            posix socket hosts.  (line  41)
* struct-hostent-h_aliases:              posix socket hosts.  (line  38)
* struct-hostent-h_length:               posix socket hosts.  (line  40)
* struct-hostent-h_name:                 posix socket hosts.  (line  37)
* struct-hostent?:                       posix socket hosts.  (line  33)
* struct-inotify-event-cookie:           linux inotify.       (line  44)
* struct-inotify-event-len:              linux inotify.       (line  45)
* struct-inotify-event-mask:             linux inotify.       (line  43)
* struct-inotify-event-name:             linux inotify.       (line  46)
* struct-inotify-event-wd:               linux inotify.       (line  42)
* struct-inotify-event?:                 linux inotify.       (line  39)
* struct-itimerspec-it_interval:         posix time itimerspec.
                                                              (line  35)
* struct-itimerspec-it_value:            posix time itimerspec.
                                                              (line  36)
* struct-itimerspec?:                    posix time itimerspec.
                                                              (line  32)
* struct-itimerval-it_interval:          posix time itimerval.
                                                              (line  30)
* struct-itimerval-it_value:             posix time itimerval.
                                                              (line  31)
* struct-itimerval?:                     posix time itimerval.
                                                              (line  27)
* struct-mq-attr-mq_curmsgs:             posix mq attr.       (line  35)
* struct-mq-attr-mq_flags:               posix mq attr.       (line  32)
* struct-mq-attr-mq_maxmsg:              posix mq attr.       (line  33)
* struct-mq-attr-mq_msgsize:             posix mq attr.       (line  34)
* struct-mq-attr?:                       posix mq attr.       (line  28)
* struct-netent-n_addrtype:              posix socket networks.
                                                              (line  27)
* struct-netent-n_aliases:               posix socket networks.
                                                              (line  26)
* struct-netent-n_name:                  posix socket networks.
                                                              (line  25)
* struct-netent-n_net:                   posix socket networks.
                                                              (line  28)
* struct-netent?:                        posix socket networks.
                                                              (line  31)
* struct-passwd-pw_dir:                  posix users.         (line 114)
* struct-passwd-pw_gecos:                posix users.         (line 113)
* struct-passwd-pw_gid:                  posix users.         (line 112)
* struct-passwd-pw_name:                 posix users.         (line 109)
* struct-passwd-pw_passwd:               posix users.         (line 110)
* struct-passwd-pw_shell:                posix users.         (line 115)
* struct-passwd-pw_uid:                  posix users.         (line 111)
* struct-passwd?:                        posix users.         (line 106)
* struct-protoent-p_aliases:             posix socket protocols.
                                                              (line  24)
* struct-protoent-p_name:                posix socket protocols.
                                                              (line  23)
* struct-protoent-p_proto:               posix socket protocols.
                                                              (line  25)
* struct-rlimit-rlim_cur:                posix resources rlimit.
                                                              (line  26)
* struct-rlimit-rlim_max:                posix resources rlimit.
                                                              (line  27)
* struct-rlimit?:                        posix resources rlimit.
                                                              (line  23)
* struct-rusage-ru_idrss:                posix resources rusage.
                                                              (line  90)
* struct-rusage-ru_inblock:              posix resources rusage.
                                                              (line  95)
* struct-rusage-ru_isrss:                posix resources rusage.
                                                              (line  91)
* struct-rusage-ru_ixrss:                posix resources rusage.
                                                              (line  89)
* struct-rusage-ru_majflt:               posix resources rusage.
                                                              (line  93)
* struct-rusage-ru_maxrss:               posix resources rusage.
                                                              (line  88)
* struct-rusage-ru_minflt:               posix resources rusage.
                                                              (line  92)
* struct-rusage-ru_msgrcv:               posix resources rusage.
                                                              (line  98)
* struct-rusage-ru_msgsnd:               posix resources rusage.
                                                              (line  97)
* struct-rusage-ru_nivcsw:               posix resources rusage.
                                                              (line 101)
* struct-rusage-ru_nsignals:             posix resources rusage.
                                                              (line  99)
* struct-rusage-ru_nswap:                posix resources rusage.
                                                              (line  94)
* struct-rusage-ru_nvcsw:                posix resources rusage.
                                                              (line 100)
* struct-rusage-ru_oublock:              posix resources rusage.
                                                              (line  96)
* struct-rusage-ru_stime:                posix resources rusage.
                                                              (line  87)
* struct-rusage-ru_utime:                posix resources rusage.
                                                              (line  86)
* struct-rusage?:                        posix resources rusage.
                                                              (line  83)
* struct-servent-s_aliases:              posix socket services.
                                                              (line  27)
* struct-servent-s_name:                 posix socket services.
                                                              (line  26)
* struct-servent-s_port:                 posix socket services.
                                                              (line  29)
* struct-servent-s_proto:                posix socket services.
                                                              (line  28)
* struct-siginfo_t-si_addr:              posix signal.        (line 164)
* struct-siginfo_t-si_addr_lsb:          posix signal.        (line 167)
* struct-siginfo_t-si_band:              posix signal.        (line 165)
* struct-siginfo_t-si_code:              posix signal.        (line 151)
* struct-siginfo_t-si_code <1>:          linux status.        (line  29)
* struct-siginfo_t-si_errno:             posix signal.        (line 150)
* struct-siginfo_t-si_fd:                posix signal.        (line 166)
* struct-siginfo_t-si_int:               posix signal.        (line 160)
* struct-siginfo_t-si_overrun:           posix signal.        (line 162)
* struct-siginfo_t-si_pid:               posix signal.        (line 153)
* struct-siginfo_t-si_pid <1>:           linux status.        (line  25)
* struct-siginfo_t-si_ptr:               posix signal.        (line 161)
* struct-siginfo_t-si_signo:             posix signal.        (line 149)
* struct-siginfo_t-si_signo <1>:         linux status.        (line  27)
* struct-siginfo_t-si_status:            posix signal.        (line 155)
* struct-siginfo_t-si_status <1>:        linux status.        (line  28)
* struct-siginfo_t-si_stime:             posix signal.        (line 157)
* struct-siginfo_t-si_timerid:           posix signal.        (line 163)
* struct-siginfo_t-si_trapno:            posix signal.        (line 152)
* struct-siginfo_t-si_uid:               posix signal.        (line 154)
* struct-siginfo_t-si_uid <1>:           linux status.        (line  26)
* struct-siginfo_t-si_utime:             posix signal.        (line 156)
* struct-siginfo_t-si_value.sival_int:   posix signal.        (line 158)
* struct-siginfo_t-si_value.sival_ptr:   posix signal.        (line 159)
* struct-siginfo_t?:                     posix signal.        (line 146)
* struct-siginfo_t? <1>:                 linux status.        (line  24)
* struct-signalfd-siginfo-ssi_addr:      linux signalfd.      (line  71)
* struct-signalfd-siginfo-ssi_band:      linux signalfd.      (line  63)
* struct-signalfd-siginfo-ssi_code:      linux signalfd.      (line  58)
* struct-signalfd-siginfo-ssi_errno:     linux signalfd.      (line  57)
* struct-signalfd-siginfo-ssi_fd:        linux signalfd.      (line  61)
* struct-signalfd-siginfo-ssi_int:       linux signalfd.      (line  67)
* struct-signalfd-siginfo-ssi_overrun:   linux signalfd.      (line  64)
* struct-signalfd-siginfo-ssi_pid:       linux signalfd.      (line  59)
* struct-signalfd-siginfo-ssi_ptr:       linux signalfd.      (line  68)
* struct-signalfd-siginfo-ssi_signo:     linux signalfd.      (line  56)
* struct-signalfd-siginfo-ssi_status:    linux signalfd.      (line  66)
* struct-signalfd-siginfo-ssi_stime:     linux signalfd.      (line  70)
* struct-signalfd-siginfo-ssi_tid:       linux signalfd.      (line  62)
* struct-signalfd-siginfo-ssi_trapno:    linux signalfd.      (line  65)
* struct-signalfd-siginfo-ssi_uid:       linux signalfd.      (line  60)
* struct-signalfd-siginfo-ssi_utime:     linux signalfd.      (line  69)
* struct-signalfd-siginfo?:              linux signalfd.      (line  52)
* struct-stat-st_atime:                  posix stat.          (line  24)
* struct-stat-st_atime_nsec:             posix stat.          (line  25)
* struct-stat-st_blksize:                posix stat.          (line  31)
* struct-stat-st_blocks:                 posix stat.          (line  30)
* struct-stat-st_ctime:                  posix stat.          (line  28)
* struct-stat-st_ctime_nsec:             posix stat.          (line  29)
* struct-stat-st_dev:                    posix stat.          (line  19)
* struct-stat-st_gid:                    posix stat.          (line  22)
* struct-stat-st_ino:                    posix stat.          (line  18)
* struct-stat-st_mode:                   posix stat.          (line  17)
* struct-stat-st_mtime:                  posix stat.          (line  26)
* struct-stat-st_mtime_nsec:             posix stat.          (line  27)
* struct-stat-st_nlink:                  posix stat.          (line  20)
* struct-stat-st_size:                   posix stat.          (line  23)
* struct-stat-st_uid:                    posix stat.          (line  21)
* struct-stat?:                          posix stat.          (line  14)
* struct-timespec-tv_nsec:               posix time timespec. (line  23)
* struct-timespec-tv_sec:                posix time timespec. (line  22)
* struct-timespec?:                      posix time timespec. (line  19)
* struct-timeval-tv_sec:                 posix time timeval.  (line  22)
* struct-timeval-tv_usec:                posix time timeval.  (line  23)
* struct-timeval?:                       posix time timeval.  (line  19)
* struct-tm-tm_gmtoff:                   posix time tm.       (line  59)
* struct-tm-tm_hour:                     posix time tm.       (line  52)
* struct-tm-tm_isdst:                    posix time tm.       (line  58)
* struct-tm-tm_mday:                     posix time tm.       (line  53)
* struct-tm-tm_min:                      posix time tm.       (line  51)
* struct-tm-tm_mon:                      posix time tm.       (line  54)
* struct-tm-tm_sec:                      posix time tm.       (line  50)
* struct-tm-tm_wday:                     posix time tm.       (line  56)
* struct-tm-tm_yday:                     posix time tm.       (line  57)
* struct-tm-tm_year:                     posix time tm.       (line  55)
* struct-tm-tm_zone:                     posix time tm.       (line  60)
* struct-tm?:                            posix time tm.       (line  47)
* struct-tms-tms_cstime:                 posix time tms.      (line  31)
* struct-tms-tms_cutime:                 posix time tms.      (line  30)
* struct-tms-tms_stime:                  posix time tms.      (line  29)
* struct-tms-tms_utime:                  posix time tms.      (line  28)
* struct-tms?:                           posix time tms.      (line  25)
* subbytevector-s8:                      bytevectors 8 select.
                                                              (line   6)
* subbytevector-s8*:                     bytevectors 8 select.
                                                              (line  11)
* subbytevector-s8-for-each:             bytevectors 8 map.   (line  80)
* subbytevector-s8-for-each-index:       bytevectors 8 map.   (line  87)
* subbytevector-s8-map:                  bytevectors 8 map.   (line  64)
* subbytevector-s8-map!:                 bytevectors 8 map.   (line  72)
* subbytevector-u8:                      bytevectors 8 select.
                                                              (line   7)
* subbytevector-u8*:                     bytevectors 8 select.
                                                              (line  12)
* subbytevector-u8-for-each:             bytevectors 8 map.   (line  81)
* subbytevector-u8-for-each-index:       bytevectors 8 map.   (line  88)
* subbytevector-u8-map:                  bytevectors 8 map.   (line  65)
* subbytevector-u8-map!:                 bytevectors 8 map.   (line  73)
* substring*:                            strings select.      (line   6)
* substring-for-each:                    strings map.         (line  70)
* substring-for-each-index:              strings map.         (line  75)
* substring-map:                         strings map.         (line  58)
* substring-map!:                        strings map.         (line  64)
* substring/shared:                      srfi strings spec select.
                                                              (line  16)
* substring/shared <1>:                  srfi strings spec select.
                                                              (line  17)
* subtract-duration:                     srfi time spec time. (line  99)
* subtract-duration!:                    srfi time spec time. (line 104)
* subvector*:                            vectors select.      (line   7)
* subvector-any:                         vectors pred.        (line  12)
* subvector-every:                       vectors pred.        (line  11)
* subvector-fold-left:                   vectors fold sub.    (line   8)
* subvector-fold-right:                  vectors fold sub.    (line   9)
* subvector-for-each:                    vectors fold map.    (line  81)
* subvector-for-each-index:              vectors fold map.    (line  87)
* subvector-for-each/with-index:         vectors fold map.    (line  82)
* subvector-map:                         vectors fold map.    (line  66)
* subvector-map!:                        vectors fold map.    (line  74)
* subvector-map!/with-index:             vectors fold map.    (line  75)
* subvector-map/with-index:              vectors fold map.    (line  67)
* suffix?:                               parser-tools unix-pathnames comp.
                                                              (line 341)
* sum-ec:                                loops comprehensions arith.
                                                              (line   6)
* sum-ec <1>:                            srfi eager-comp spec comprehensions.
                                                              (line  44)
* symbol:                                args predefined symbols.
                                                              (line   9)
* symbol-compare:                        comparisons atoms.   (line  33)
* symbol-compare <1>:                    srfi compare-procedures spec atom.
                                                              (line  42)
* symbol/false:                          args predefined symbols.
                                                              (line  12)
* symlink:                               posix link.          (line  11)
* sync:                                  glibc sync.          (line   8)
* syntax:                                simple-match syntax. (line  17)
* sysconf:                               posix config.        (line  11)
* system:                                posix process system.
                                                              (line   6)
* S_ISBLK:                               posix stat.          (line  75)
* S_ISCHR:                               posix stat.          (line  74)
* S_ISDIR:                               posix stat.          (line  73)
* S_ISFIFO:                              posix stat.          (line  79)
* S_ISLNK:                               posix stat.          (line  77)
* S_ISREG:                               posix stat.          (line  76)
* S_ISSOCK:                              posix stat.          (line  78)
* table->environ:                        posix env.           (line  55)
* table-name::                           silex tables.        (line  98)
* tailname:                              parser-tools unix-pathnames comp.
                                                              (line 117)
* take:                                  srfi list spec select.
                                                              (line  58)
* take!:                                 srfi list spec select.
                                                              (line 114)
* take-left:                             lists select.        (line  33)
* take-left!:                            lists select.        (line 114)
* take-left!/stx:                        lists select.        (line 116)
* take-left/stx:                         lists select.        (line  35)
* take-right:                            srfi list spec select.
                                                              (line  85)
* take-right <1>:                        lists select.        (line  73)
* take-right/stx:                        lists select.        (line  75)
* take-while:                            srfi list spec search.
                                                              (line 112)
* take-while <1>:                        lists search.        (line  30)
* take-while!:                           srfi list spec search.
                                                              (line 113)
* take-while! <1>:                       lists search.        (line  31)
* tanh:                                  glibc math.          (line  58)
* task-fragment:                         posix sel.           (line 112)
* tcgetpgrp:                             posix job.           (line  38)
* tcgetsid:                              posix job.           (line  52)
* tcp-connect:                           posix socket socket. (line 210)
* tcp-connect <1>:                       posix socket socket. (line 211)
* tcp-connect.connect-proc:              posix socket socket. (line 282)
* tcp-connect/binary:                    posix socket socket. (line 275)
* tcp-connect/binary <1>:                posix socket socket. (line 276)
* tcsetpgrp:                             posix job.           (line  45)
* telldir:                               posix dir.           (line 117)
* tenth:                                 srfi list spec select.
                                                              (line  46)
* tenth <1>:                             lists select.        (line  15)
* tenth/stx:                             lists select.        (line  21)
* test-apply:                            srfi testing spec runner.
                                                              (line  54)
* test-apply <1>:                        srfi testing spec runner.
                                                              (line  55)
* test-assert:                           srfi testing spec basic.
                                                              (line  45)
* test-assert <1>:                       srfi testing spec basic.
                                                              (line  46)
* test-begin:                            srfi testing spec basic.
                                                              (line 174)
* test-begin <1>:                        srfi testing spec basic.
                                                              (line 175)
* test-end:                              srfi testing spec basic.
                                                              (line 195)
* test-end <1>:                          srfi testing spec basic.
                                                              (line 196)
* test-eq:                               srfi testing spec basic.
                                                              (line  70)
* test-equal:                            srfi testing spec basic.
                                                              (line  70)
* test-eqv:                              srfi testing spec basic.
                                                              (line  64)
* test-eqv <1>:                          srfi testing spec basic.
                                                              (line  65)
* test-error:                            srfi testing spec basic.
                                                              (line  99)
* test-error <1>:                        srfi testing spec basic.
                                                              (line 100)
* test-error <2>:                        srfi testing spec basic.
                                                              (line 101)
* test-expect-fail:                      srfi testing spec advanced.
                                                              (line  91)
* test-group:                            srfi testing spec basic.
                                                              (line 204)
* test-group-with-cleanup:               srfi testing spec basic.
                                                              (line 221)
* test-match-all:                        srfi testing spec advanced.
                                                              (line  41)
* test-match-any:                        srfi testing spec advanced.
                                                              (line  36)
* test-match-name:                       srfi testing spec advanced.
                                                              (line  25)
* test-match-nth:                        srfi testing spec advanced.
                                                              (line  29)
* test-match-nth <1>:                    srfi testing spec advanced.
                                                              (line  30)
* test-passed?:                          srfi testing spec results.
                                                              (line  38)
* test-passed? <1>:                      srfi testing spec results.
                                                              (line  39)
* test-read-eval-string:                 srfi testing spec basic.
                                                              (line 132)
* test-result-alist:                     srfi testing spec results.
                                                              (line  78)
* test-result-clear:                     srfi testing spec results.
                                                              (line  73)
* test-result-kind:                      srfi testing spec results.
                                                              (line  30)
* test-result-kind <1>:                  srfi testing spec results.
                                                              (line  31)
* test-result-ref:                       srfi testing spec results.
                                                              (line  59)
* test-result-ref <1>:                   srfi testing spec results.
                                                              (line  60)
* test-result-remove:                    srfi testing spec results.
                                                              (line  70)
* test-result-set!:                      srfi testing spec results.
                                                              (line  65)
* test-runner-aux-value:                 srfi testing spec writing.
                                                              (line 137)
* test-runner-aux-value!:                srfi testing spec writing.
                                                              (line 138)
* test-runner-create:                    srfi testing spec runner.
                                                              (line  37)
* test-runner-current:                   srfi testing spec runner.
                                                              (line  14)
* test-runner-current <1>:               srfi testing spec runner.
                                                              (line  15)
* test-runner-factory:                   srfi testing spec runner.
                                                              (line  42)
* test-runner-factory <1>:               srfi testing spec runner.
                                                              (line  43)
* test-runner-fail-count:                srfi testing spec writing.
                                                              (line 109)
* test-runner-get:                       srfi testing spec runner.
                                                              (line  22)
* test-runner-group-path:                srfi testing spec writing.
                                                              (line 128)
* test-runner-group-stack:               srfi testing spec writing.
                                                              (line 132)
* test-runner-null:                      srfi testing spec runner.
                                                              (line  30)
* test-runner-on-bad-count:              srfi testing spec writing.
                                                              (line  61)
* test-runner-on-bad-count!:             srfi testing spec writing.
                                                              (line  62)
* test-runner-on-bad-end-name:           srfi testing spec writing.
                                                              (line  69)
* test-runner-on-bad-end-name!:          srfi testing spec writing.
                                                              (line  70)
* test-runner-on-final:                  srfi testing spec writing.
                                                              (line  77)
* test-runner-on-final!:                 srfi testing spec writing.
                                                              (line  78)
* test-runner-on-group-begin:            srfi testing spec writing.
                                                              (line  48)
* test-runner-on-group-begin!:           srfi testing spec writing.
                                                              (line  49)
* test-runner-on-group-end:              srfi testing spec writing.
                                                              (line  55)
* test-runner-on-group-end!:             srfi testing spec writing.
                                                              (line  56)
* test-runner-on-test-begin:             srfi testing spec writing.
                                                              (line  35)
* test-runner-on-test-begin!:            srfi testing spec writing.
                                                              (line  36)
* test-runner-on-test-end:               srfi testing spec writing.
                                                              (line  42)
* test-runner-on-test-end!:              srfi testing spec writing.
                                                              (line  43)
* test-runner-pass-count:                srfi testing spec writing.
                                                              (line 106)
* test-runner-reset:                     srfi testing spec writing.
                                                              (line 143)
* test-runner-simple:                    srfi testing spec runner.
                                                              (line  26)
* test-runner-skip-count:                srfi testing spec writing.
                                                              (line 118)
* test-runner-test-name:                 srfi testing spec writing.
                                                              (line 121)
* test-runner-xfail-count:               srfi testing spec writing.
                                                              (line 115)
* test-runner-xpass-count:               srfi testing spec writing.
                                                              (line 112)
* test-runner?:                          srfi testing spec runner.
                                                              (line  11)
* test-skip:                             srfi testing spec advanced.
                                                              (line  61)
* test-with-runner:                      srfi testing spec runner.
                                                              (line  67)
* textual-contents-reading-procedure:    posix pid-files config.
                                                              (line  19)
* textual-contents-writing-procedure:    posix pid-files config.
                                                              (line  30)
* textual-port:                          args predefined ports.
                                                              (line  25)
* textual-port/false:                    args predefined ports.
                                                              (line  29)
* tgamma:                                glibc math.          (line  91)
* third:                                 srfi list spec select.
                                                              (line  39)
* third <1>:                             lists select.        (line   8)
* time:                                  posix time functions.
                                                              (line  17)
* time <1>:                              args predefined time.
                                                              (line   9)
* time-difference:                       srfi time spec time. (line  80)
* time-difference!:                      srfi time spec time. (line  85)
* time-monotonic->date:                  srfi time spec conversion.
                                                              (line  67)
* time-monotonic->date <1>:              srfi time spec conversion.
                                                              (line  68)
* time-monotonic->julian-day:            srfi time spec conversion.
                                                              (line  72)
* time-monotonic->modified-julian-day:   srfi time spec conversion.
                                                              (line  75)
* time-monotonic->time-tai:              srfi time spec conversion.
                                                              (line  78)
* time-monotonic->time-tai!:             srfi time spec conversion.
                                                              (line  81)
* time-monotonic->time-utc:              srfi time spec conversion.
                                                              (line  85)
* time-monotonic->time-utc!:             srfi time spec conversion.
                                                              (line  88)
* time-nanosecond:                       srfi time spec time. (line  21)
* time-resolution:                       srfi time spec current.
                                                              (line  27)
* time-resolution <1>:                   srfi time spec current.
                                                              (line  28)
* time-second:                           srfi time spec time. (line  24)
* time-tai->date:                        srfi time spec conversion.
                                                              (line  95)
* time-tai->date <1>:                    srfi time spec conversion.
                                                              (line  96)
* time-tai->julian-day:                  srfi time spec conversion.
                                                              (line 100)
* time-tai->modified-julian-day:         srfi time spec conversion.
                                                              (line 103)
* time-tai->time-monotonic:              srfi time spec conversion.
                                                              (line 106)
* time-tai->time-monotonic!:             srfi time spec conversion.
                                                              (line 109)
* time-tai->time-utc:                    srfi time spec conversion.
                                                              (line 113)
* time-tai->time-utc!:                   srfi time spec conversion.
                                                              (line 116)
* time-type:                             srfi time spec time. (line  17)
* time-utc->date:                        srfi time spec conversion.
                                                              (line 123)
* time-utc->date <1>:                    srfi time spec conversion.
                                                              (line 124)
* time-utc->julian-day:                  srfi time spec conversion.
                                                              (line 128)
* time-utc->modified-julian-day:         srfi time spec conversion.
                                                              (line 131)
* time-utc->time-monotonic:              srfi time spec conversion.
                                                              (line 134)
* time-utc->time-monotonic!:             srfi time spec conversion.
                                                              (line 137)
* time-utc->time-tai:                    srfi time spec conversion.
                                                              (line 141)
* time-utc->time-tai!:                   srfi time spec conversion.
                                                              (line 144)
* time/false:                            args predefined time.
                                                              (line  13)
* time<=?:                               srfi time spec time. (line  58)
* time<?:                                srfi time spec time. (line  62)
* time=?:                                srfi time spec time. (line  65)
* time>=?:                               srfi time spec time. (line  68)
* time>?:                                srfi time spec time. (line  72)
* time?:                                 srfi time spec time. (line  14)
* timegm:                                posix time functions.
                                                              (line  49)
* timelocal:                             posix time functions.
                                                              (line  42)
* timer-create:                          posix timers.        (line  24)
* timer-delete:                          posix timers.        (line  47)
* timer-getoverrun:                      posix timers.        (line  77)
* timer-gettime:                         posix timers.        (line  65)
* timer-gettime <1>:                     posix timers.        (line  66)
* timer-settime:                         posix timers.        (line  52)
* timer-settime <1>:                     posix timers.        (line  53)
* timerfd-create:                        linux timerfd api.   (line  20)
* timerfd-create <1>:                    linux timerfd api.   (line  21)
* timerfd-gettime:                       linux timerfd api.   (line  45)
* timerfd-gettime <1>:                   linux timerfd api.   (line  46)
* timerfd-read:                          linux timerfd api.   (line  56)
* timerfd-settime:                       linux timerfd api.   (line  32)
* timerfd-settime <1>:                   linux timerfd api.   (line  33)
* times:                                 posix time functions.
                                                              (line  12)
* toggle! on <bitvector>:                bitvectors bits.     (line  23)
* trace-define:                          tracing.             (line  30)
* trace-define <1>:                      tracing.             (line  31)
* trace-define-syntax:                   tracing.             (line  96)
* trace-lambda:                          tracing.             (line  91)
* trace-let-syntax:                      tracing.             (line 115)
* trace-letrec-syntax:                   tracing.             (line 116)
* transcoder:                            args predefined transcoders.
                                                              (line   9)
* transcoder/false:                      args predefined transcoders.
                                                              (line  12)
* tree->itree:                           srfi ilists procs conversion.
                                                              (line  33)
* tree-copy:                             lists cons.          (line  32)
* tree-copy/stx:                         lists cons.          (line  33)
* truncate:                              posix fd trunc.      (line   6)
* type-unique-identifiers-of:            multimethods defining.
                                                              (line   6)
* ucs-range->char-set:                   srfi char-sets spec create.
                                                              (line  53)
* ucs-range->char-set <1>:               srfi char-sets spec create.
                                                              (line  54)
* ucs-range->char-set <2>:               srfi char-sets spec create.
                                                              (line  55)
* ucs-range->char-set!:                  srfi char-sets spec create.
                                                              (line  56)
* umask:                                 posix file.          (line  47)
* unbalanced-binary-node?:               bst unodes objects.  (line  23)
* unbalanced-tree-insert!:               bst unodes ops.      (line  11)
* unbalanced-tree-remove!:               bst unodes ops.      (line  36)
* unbox:                                 srfi boxes spec.     (line  16)
* undefined-restart-error?:              restarts errors.     (line  51)
* unfold:                                srfi list spec fold. (line 157)
* unfold <1>:                            lists fold unfold.   (line   6)
* unfold <2>:                            lists fold unfold.   (line   7)
* unfold-right:                          srfi list spec fold. (line 229)
* unfold-right <1>:                      lists fold unfold.   (line  91)
* unfold-right <2>:                      lists fold unfold.   (line  92)
* unfold-right/stx:                      lists fold unfold.   (line  93)
* unfold-right/stx <1>:                  lists fold unfold.   (line  94)
* unfold/stx:                            lists fold unfold.   (line   8)
* unfold/stx <1>:                        lists fold unfold.   (line   9)
* union-of-sorted-lists:                 lists sorted.        (line  20)
* union-of-sorted-lists/uniq:            lists sorted.        (line  34)
* unix-pathname-normalisation-error?:    parser-tools unix-pathnames errors.
                                                              (line  35)
* unix-pathname-parser-error?:           parser-tools unix-pathnames errors.
                                                              (line  20)
* unknown-option-condition?:             getopts conditions.  (line  79)
* unlink:                                posix link.          (line  33)
* unsetenv:                              posix env.           (line  35)
* unsigned-char:                         args predefined clang.
                                                              (line  13)
* unsigned-char/false:                   args predefined clang.
                                                              (line  14)
* unsigned-char?:                        words predicates.    (line  48)
* unsigned-int:                          args predefined clang.
                                                              (line  33)
* unsigned-int/false:                    args predefined clang.
                                                              (line  34)
* unsigned-int?:                         words predicates.    (line  59)
* unsigned-long:                         args predefined clang.
                                                              (line  38)
* unsigned-long-long:                    args predefined clang.
                                                              (line  48)
* unsigned-long-long/false:              args predefined clang.
                                                              (line  49)
* unsigned-long-long?:                   words predicates.    (line  70)
* unsigned-long/false:                   args predefined clang.
                                                              (line  39)
* unsigned-long?:                        words predicates.    (line  64)
* unsigned-short:                        args predefined clang.
                                                              (line  23)
* unsigned-short/false:                  args predefined clang.
                                                              (line  24)
* unsigned-short?:                       words predicates.    (line  53)
* unsupported-comparator-operation-error.comparator: srfi comparators conditions.
                                                              (line  43)
* unsupported-comparator-operation-error?: srfi comparators conditions.
                                                              (line  39)
* unzip1:                                srfi list spec misc. (line 124)
* unzip1 <1>:                            lists misc.          (line 111)
* unzip1/stx:                            lists misc.          (line 116)
* unzip2:                                srfi list spec misc. (line 125)
* unzip2 <1>:                            lists misc.          (line 112)
* unzip2/stx:                            lists misc.          (line 117)
* unzip3:                                srfi list spec misc. (line 126)
* unzip3 <1>:                            lists misc.          (line 113)
* unzip3/stx:                            lists misc.          (line 118)
* unzip4:                                srfi list spec misc. (line 127)
* unzip4 <1>:                            lists misc.          (line 114)
* unzip4/stx:                            lists misc.          (line 119)
* unzip5:                                srfi list spec misc. (line 128)
* unzip5 <1>:                            lists misc.          (line 115)
* unzip5/stx:                            lists misc.          (line 120)
* urandom-bytevector:                    random device.       (line  40)
* urandom-bytevector!:                   random device.       (line  49)
* uri-representation:                    parser-tools unix-pathnames comp.
                                                              (line 449)
* use-value:                             restarts func.       (line   6)
* use-value <1>:                         restarts func.       (line   7)
* user-entries:                          posix users.         (line 132)
* utime:                                 posix file.          (line  57)
* utimes:                                posix file.          (line  64)
* valid-sre?:                            srfi regexps procs.  (line  55)
* variable-ref:                          variables.           (line  24)
* variable-set!:                         variables.           (line  23)
* variable?:                             variables.           (line  20)
* vector:                                srfi vector spec cons.
                                                              (line  15)
* vector <1>:                            args predefined vectors.
                                                              (line   9)
* vector on <bitvector>:                 bitvectors conv.     (line  10)
* vector->bitvector:                     bitvectors conv.     (line  20)
* vector->chain:                         chains conversion.   (line  19)
* vector->deque:                         deques conversion.   (line  27)
* vector->dynamic-array:                 dynamic arrays conversion.
                                                              (line  28)
* vector->ilist:                         srfi ilists procs conversion.
                                                              (line  24)
* vector->list:                          srfi vector spec conv.
                                                              (line   6)
* vector->list*:                         vectors list.        (line   7)
* vector->position:                      arrays positions.    (line  27)
* vector->queue:                         queues conversion.   (line  27)
* vector->stack:                         stacks conversion.   (line  26)
* vector-and-fold-left:                  vectors fold rnrs.   (line  76)
* vector-and-fold-left*:                 vectors fold rnrs.   (line  77)
* vector-and-fold-left*/stx:             vectors fold rnrs.   (line  81)
* vector-and-fold-left/stx:              vectors fold rnrs.   (line  80)
* vector-and-fold-right:                 vectors fold rnrs.   (line  78)
* vector-and-fold-right*:                vectors fold rnrs.   (line  79)
* vector-and-fold-right*/stx:            vectors fold rnrs.   (line  83)
* vector-and-fold-right/stx:             vectors fold rnrs.   (line  82)
* vector-any:                            srfi vector spec search.
                                                              (line  69)
* vector-any <1>:                        vectors pred.        (line  34)
* vector-append:                         srfi vector spec cons.
                                                              (line 103)
* vector-append <1>:                     vectors cons.        (line  27)
* vector-binary-search:                  srfi vector spec search.
                                                              (line  54)
* vector-binary-search <1>:              vectors search.      (line  34)
* vector-compare:                        comparisons sequence.
                                                              (line  40)
* vector-compare <1>:                    comparisons sequence.
                                                              (line  41)
* vector-compare <2>:                    comparisons sequence.
                                                              (line  42)
* vector-compare <3>:                    srfi compare-procedures spec seq.
                                                              (line  42)
* vector-compare <4>:                    srfi compare-procedures spec seq.
                                                              (line  43)
* vector-compare <5>:                    srfi compare-procedures spec seq.
                                                              (line  44)
* vector-compare <6>:                    vectors compar.      (line   8)
* vector-compare-as-list:                comparisons sequence.
                                                              (line  43)
* vector-compare-as-list <1>:            comparisons sequence.
                                                              (line  44)
* vector-compare-as-list <2>:            comparisons sequence.
                                                              (line  45)
* vector-compare-as-list <3>:            srfi compare-procedures spec seq.
                                                              (line  45)
* vector-compare-as-list <4>:            srfi compare-procedures spec seq.
                                                              (line  46)
* vector-compare-as-list <5>:            srfi compare-procedures spec seq.
                                                              (line  47)
* vector-concatenate:                    srfi vector spec cons.
                                                              (line 118)
* vector-concatenate <1>:                vectors cons.        (line   6)
* vector-concatenate-reverse:            vectors cons.        (line  12)
* vector-concatenate-reverse <1>:        vectors cons.        (line  13)
* vector-concatenate-reverse <2>:        vectors cons.        (line  14)
* vector-contains:                       vectors search.      (line  28)
* vector-copy:                           srfi vector spec cons.
                                                              (line  68)
* vector-copy <1>:                       vectors select.      (line   8)
* vector-copy!:                          srfi vector spec mutators.
                                                              (line  22)
* vector-copy! <1>:                      vectors select.      (line  23)
* vector-count:                          srfi vector spec iter.
                                                              (line 121)
* vector-count <1>:                      vectors search.      (line  23)
* vector-delete:                         vectors filter.      (line  12)
* vector-drop:                           vectors select.      (line  46)
* vector-drop-right:                     vectors select.      (line  47)
* vector-ec:                             loops comprehensions vector.
                                                              (line   6)
* vector-ec <1>:                         srfi eager-comp spec comprehensions.
                                                              (line  34)
* vector-empty?:                         srfi vector spec pred.
                                                              (line  27)
* vector-every:                          srfi vector spec search.
                                                              (line  75)
* vector-every <1>:                      vectors pred.        (line  33)
* vector-fill!:                          srfi vector spec mutators.
                                                              (line  12)
* vector-fill*!:                         vectors mutate.      (line  10)
* vector-filter:                         vectors filter.      (line   7)
* vector-fold:                           srfi vector spec iter.
                                                              (line   6)
* vector-fold-left:                      vectors fold rnrs.   (line   6)
* vector-fold-left*:                     vectors fold rnrs.   (line  39)
* vector-fold-left*/stx:                 vectors fold rnrs.   (line  41)
* vector-fold-left*/with-index:          vectors fold rnrs.   (line  47)
* vector-fold-left/pred:                 vectors fold rnrs.   (line 120)
* vector-fold-left/stx:                  vectors fold rnrs.   (line   8)
* vector-fold-left/with-index:           vectors fold rnrs.   (line  46)
* vector-fold-right:                     srfi vector spec iter.
                                                              (line  39)
* vector-fold-right <1>:                 vectors fold rnrs.   (line   7)
* vector-fold-right*:                    vectors fold rnrs.   (line  40)
* vector-fold-right*/stx:                vectors fold rnrs.   (line  42)
* vector-fold-right*/with-index:         vectors fold rnrs.   (line  49)
* vector-fold-right/stx:                 vectors fold rnrs.   (line   9)
* vector-fold-right/with-index:          vectors fold rnrs.   (line  48)
* vector-for-each:                       srfi vector spec iter.
                                                              (line  98)
* vector-for-each*:                      vectors fold map.    (line  57)
* vector-for-each*/stx:                  vectors fold map.    (line 108)
* vector-for-each*/with-index:           vectors fold map.    (line  58)
* vector-for-each/stx:                   vectors fold map.    (line 107)
* vector-index:                          srfi vector spec search.
                                                              (line   6)
* vector-index <1>:                      vectors search.      (line   8)
* vector-index-right:                    srfi vector spec search.
                                                              (line  23)
* vector-index-right <1>:                vectors search.      (line   9)
* vector-length:                         srfi vector spec select.
                                                              (line  17)
* vector-levenshtein:                    levenshtein basic.   (line  25)
* vector-levenshtein/eq:                 levenshtein basic.   (line  22)
* vector-levenshtein/equal:              levenshtein basic.   (line  24)
* vector-levenshtein/eqv:                levenshtein basic.   (line  23)
* vector-levenshtein/predicate:          levenshtein basic.   (line  21)
* vector-levenshtein/predicate/get-scratch: levenshtein basic.
                                                              (line   9)
* vector-map:                            srfi vector spec iter.
                                                              (line  51)
* vector-map!:                           srfi vector spec iter.
                                                              (line  91)
* vector-map! <1>:                       vectors fold map.    (line  50)
* vector-map!/stx:                       vectors fold map.    (line 103)
* vector-map!/with-index:                vectors fold map.    (line  52)
* vector-map*:                           vectors fold map.    (line  44)
* vector-map*!:                          vectors fold map.    (line  51)
* vector-map*!/stx:                      vectors fold map.    (line 104)
* vector-map*!/with-index:               vectors fold map.    (line  53)
* vector-map*/stx:                       vectors fold map.    (line 100)
* vector-map*/with-index:                vectors fold map.    (line  46)
* vector-map/stx:                        vectors fold map.    (line  99)
* vector-map/with-index:                 vectors fold map.    (line  45)
* vector-null?:                          vectors pred.        (line   6)
* vector-of-coordinates:                 arrays coordinates.  (line  29)
* vector-of-length-ec:                   loops comprehensions vector.
                                                              (line  29)
* vector-of-length-ec <1>:               srfi eager-comp spec comprehensions.
                                                              (line  39)
* vector-or-fold-left:                   vectors fold rnrs.   (line  98)
* vector-or-fold-left*:                  vectors fold rnrs.   (line  99)
* vector-or-fold-left*/stx:              vectors fold rnrs.   (line 103)
* vector-or-fold-left/stx:               vectors fold rnrs.   (line 102)
* vector-or-fold-right:                  vectors fold rnrs.   (line 100)
* vector-or-fold-right*:                 vectors fold rnrs.   (line 101)
* vector-or-fold-right*/stx:             vectors fold rnrs.   (line 105)
* vector-or-fold-right/stx:              vectors fold rnrs.   (line 104)
* vector-pad:                            vectors pad.         (line   8)
* vector-pad <1>:                        vectors pad.         (line   9)
* vector-pad-right:                      vectors pad.         (line  10)
* vector-pad-right <1>:                  vectors pad.         (line  11)
* vector-prefix-length:                  vectors prefix.      (line   7)
* vector-prefix?:                        vectors prefix.      (line  18)
* vector-ref:                            srfi vector spec select.
                                                              (line   6)
* vector-replace:                        vectors misc.        (line   7)
* vector-reverse:                        vectors misc.        (line  13)
* vector-reverse!:                       srfi vector spec mutators.
                                                              (line  17)
* vector-reverse! <1>:                   vectors misc.        (line  14)
* vector-reverse-copy:                   srfi vector spec cons.
                                                              (line  94)
* vector-reverse-copy <1>:               vectors select.      (line  13)
* vector-reverse-copy!:                  srfi vector spec mutators.
                                                              (line  33)
* vector-reverse-copy! <1>:              vectors select.      (line  33)
* vector-set!:                           srfi vector spec mutators.
                                                              (line   6)
* vector-skip:                           srfi vector spec search.
                                                              (line  28)
* vector-skip <1>:                       vectors search.      (line  16)
* vector-skip-right:                     srfi vector spec search.
                                                              (line  44)
* vector-skip-right <1>:                 vectors search.      (line  17)
* vector-suffix-length:                  vectors prefix.      (line  13)
* vector-suffix?:                        vectors prefix.      (line  24)
* vector-swap!:                          srfi vector spec mutators.
                                                              (line   9)
* vector-swap! <1>:                      vectors mutate.      (line   6)
* vector-tabulate:                       vectors cons.        (line  40)
* vector-take:                           vectors select.      (line  39)
* vector-take-right:                     vectors select.      (line  40)
* vector-trim:                           vectors pad.         (line  27)
* vector-trim-both:                      vectors pad.         (line  29)
* vector-trim-right:                     vectors pad.         (line  28)
* vector-unfold:                         srfi vector spec cons.
                                                              (line  23)
* vector-unfold <1>:                     vectors fold unfold. (line   6)
* vector-unfold <2>:                     vectors fold unfold. (line   7)
* vector-unfold <3>:                     vectors fold unfold. (line   9)
* vector-unfold-right:                   srfi vector spec cons.
                                                              (line  49)
* vector-unfold-right <1>:               vectors fold unfold. (line 108)
* vector-unfold-right <2>:               vectors fold unfold. (line 109)
* vector-unfold-right <3>:               vectors fold unfold. (line 111)
* vector-xcopy!:                         vectors replicate.   (line  81)
* vector/false:                          args predefined vectors.
                                                              (line  12)
* vector<:                               vectors compar.      (line  75)
* vector<=:                              vectors compar.      (line  80)
* vector<>:                              vectors compar.      (line  45)
* vector=:                               srfi vector spec pred.
                                                              (line  44)
* vector= <1>:                           vectors compar.      (line  40)
* vector>:                               vectors compar.      (line  85)
* vector>=:                              vectors compar.      (line  90)
* vector?:                               srfi vector spec pred.
                                                              (line   6)
* vicare-executable-as-bytevector:       posix process exec.  (line 114)
* vicare-executable-as-string:           posix process exec.  (line 115)
* wait:                                  posix status.        (line  26)
* waitid:                                linux status.        (line   8)
* waitpid:                               posix status.        (line   6)
* WCOREDUMP:                             posix status.        (line  59)
* weak-hashtable:                        wtables.             (line  67)
* weak-hashtable-clear!:                 wtables.             (line  92)
* weak-hashtable-contains?:              wtables.             (line  80)
* weak-hashtable-delete!:                wtables.             (line  83)
* weak-hashtable-entries:                wtables.             (line  99)
* weak-hashtable-keys:                   wtables.             (line  96)
* weak-hashtable-ref:                    wtables.             (line  76)
* weak-hashtable-set!:                   wtables.             (line  72)
* weak-hashtable-size:                   wtables.             (line  87)
* weak-hashtable-update!:                wtables.             (line 103)
* weak-hashtable?:                       wtables.             (line  63)
* WEXITSTATUS:                           posix status.        (line  41)
* wget:                                  posix wget.          (line  19)
* WIFCONTINUED:                          linux status.        (line  37)
* WIFEXITED:                             posix status.        (line  36)
* WIFSIGNALED:                           posix status.        (line  47)
* WIFSTOPPED:                            posix status.        (line  64)
* with:                                  makers api.          (line  12)
* with-amb-exhaustion-handler:           amb api core.        (line  14)
* with-ambiguous-choices:                amb api core.        (line   9)
* with-argument:                         keywords.            (line  27)
* with-arguments-validation:             args using.          (line   9)
* with-bytevectors:                      syntaxes conversion. (line  22)
* with-bytevectors/or-false:             syntaxes conversion. (line  34)
* with-condition-restarts:               restarts assoc.      (line   6)
* with-dangerous-arguments-validation:   args using.          (line  88)
* with-general-c-pathnames:              cbuffers api.        (line  93)
* with-general-c-pathnames/false:        cbuffers api.        (line 116)
* with-general-c-strings:                cbuffers api.        (line  54)
* with-general-c-strings <1>:            cbuffers api.        (line  56)
* with-general-c-strings/false:          cbuffers api.        (line  85)
* with-general-c-strings/false <1>:      cbuffers api.        (line  87)
* with-lock-pid-file:                    posix lock-pid-files api.
                                                              (line   9)
* with-logging-handler:                  posix log-files api. (line  74)
* with-pathnames:                        syntaxes conversion. (line   9)
* with-result:                           checks result.       (line   6)
* with-return-to-signal-on-unhandled-exception: restarts signal.
                                                              (line  19)
* without:                               makers api.          (line  13)
* without-argument:                      keywords.            (line  28)
* word-frequency:                        strings misc.        (line  19)
* word-s128:                             args predefined bits.
                                                              (line  69)
* word-s128/false:                       args predefined bits.
                                                              (line  70)
* word-s128?:                            words predicates.    (line  39)
* word-s16:                              args predefined bits.
                                                              (line  39)
* word-s16/false:                        args predefined bits.
                                                              (line  40)
* word-s16?:                             words predicates.    (line  24)
* word-s256:                             args predefined bits.
                                                              (line  79)
* word-s256/false:                       args predefined bits.
                                                              (line  80)
* word-s256?:                            words predicates.    (line  44)
* word-s32:                              args predefined bits.
                                                              (line  49)
* word-s32/false:                        args predefined bits.
                                                              (line  50)
* word-s32?:                             words predicates.    (line  29)
* word-s64:                              args predefined bits.
                                                              (line  59)
* word-s64/false:                        args predefined bits.
                                                              (line  60)
* word-s64?:                             words predicates.    (line  34)
* word-s8:                               args predefined bits.
                                                              (line  29)
* word-s8/false:                         args predefined bits.
                                                              (line  30)
* word-s8?:                              words predicates.    (line  19)
* word-u128:                             args predefined bits.
                                                              (line  64)
* word-u128/false:                       args predefined bits.
                                                              (line  65)
* word-u128?:                            words predicates.    (line  38)
* word-u16:                              args predefined bits.
                                                              (line  34)
* word-u16/false:                        args predefined bits.
                                                              (line  35)
* word-u16?:                             words predicates.    (line  23)
* word-u256:                             args predefined bits.
                                                              (line  74)
* word-u256/false:                       args predefined bits.
                                                              (line  75)
* word-u256?:                            words predicates.    (line  43)
* word-u32:                              args predefined bits.
                                                              (line  44)
* word-u32/false:                        args predefined bits.
                                                              (line  45)
* word-u32?:                             words predicates.    (line  28)
* word-u64:                              args predefined bits.
                                                              (line  54)
* word-u64/false:                        args predefined bits.
                                                              (line  55)
* word-u64?:                             words predicates.    (line  33)
* word-u8:                               args predefined bits.
                                                              (line  24)
* word-u8/false:                         args predefined bits.
                                                              (line  25)
* word-u8?:                              words predicates.    (line  18)
* word?:                                 words predicates.    (line   9)
* wordexp:                               glibc word.          (line  29)
* wordexp/string:                        glibc word.          (line  30)
* writable:                              posix sel.           (line  78)
* writable <1>:                          posix sel.           (line  79)
* write:                                 posix fd write.      (line   6)
* write <1>:                             posix fd write.      (line   7)
* write-with-shared-structure:           srfi shared structures spec.
                                                              (line  32)
* write-with-shared-structure <1>:       srfi shared structures spec.
                                                              (line  33)
* write-with-shared-structure <2>:       srfi shared structures spec.
                                                              (line  34)
* writev:                                posix fd scatter.    (line  13)
* WSTOPSIG:                              posix status.        (line  69)
* WTERMSIG:                              posix status.        (line  53)
* xbytevector-s8-xcopy!:                 bytevectors 8 replicate.
                                                              (line  40)
* xbytevector-u8-xcopy!:                 bytevectors 8 replicate.
                                                              (line  42)
* xcons:                                 srfi list spec cons. (line  23)
* xcons <1>:                             lists cons.          (line   6)
* xipair:                                srfi ilists procs constructors.
                                                              (line  23)
* xor on <bitvector>:                    bitvectors bits.     (line  37)
* xor! on <bitvector>:                   bitvectors bits.     (line  44)
* xstring-xcopy!:                        strings replicate.   (line  60)
* xsubbytevector-s8:                     bytevectors 8 replicate.
                                                              (line   8)
* xsubbytevector-u8:                     bytevectors 8 replicate.
                                                              (line   9)
* xsubstring:                            srfi strings spec replicate.
                                                              (line   6)
* xsubstring <1>:                        srfi strings spec replicate.
                                                              (line   7)
* xsubstring <2>:                        srfi strings spec replicate.
                                                              (line   8)
* xsubstring <3>:                        srfi strings spec replicate.
                                                              (line   9)
* xsubstring <4>:                        strings replicate.   (line   7)
* xsubvector:                            vectors replicate.   (line   7)
* xvector-xcopy!:                        vectors replicate.   (line  79)
* y0:                                    glibc math.          (line 102)
* y1:                                    glibc math.          (line 103)
* yn:                                    glibc math.          (line 104)
* yycolumn:                              silex semantics action.
                                                              (line  63)
* yycontinue:                            silex semantics action.
                                                              (line  31)
* yygetc:                                silex semantics action.
                                                              (line  37)
* yyline:                                silex semantics action.
                                                              (line  62)
* yyoffset:                              silex semantics action.
                                                              (line  64)
* yytext:                                silex semantics action.
                                                              (line  56)
* yyungetc:                              silex semantics action.
                                                              (line  38)
* zip:                                   srfi list spec misc. (line 102)
* zip <1>:                               lists misc.          (line  77)
* zip*:                                  lists misc.          (line  78)
* zip*/stx:                              lists misc.          (line  80)
* zip/stx:                               lists misc.          (line  79)

