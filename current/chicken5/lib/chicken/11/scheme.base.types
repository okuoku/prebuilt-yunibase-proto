; GENERATED BY CHICKEN 5.3.1 FROM scheme.base.scm

(scheme.base#assoc
  (forall
    (a360 b361 c362)
    (#(procedure)
     scheme.base#assoc
     (a360 (list-of (pair b361 c362)) #!optional (procedure (b361 a360) *))
     (or false (list-of (pair b361 c362))))))

(scheme.base#binary-port?
  (#(procedure #:pure) scheme.base#binary-port? (*) boolean))

(scheme.base#boolean=?
  (#(procedure)
   scheme.base#boolean=?
   (boolean boolean #!rest boolean)
   boolean))

(scheme.base#bytevector-append
  (#(procedure)
   scheme.base#bytevector-append
   (#!rest (struct u8vector))
   (struct u8vector)))

(scheme.base#bytevector-copy
  (#(procedure)
   scheme.base#bytevector-copy
   ((struct u8vector) #!optional fixnum fixnum)
   (struct u8vector)))

(scheme.base#bytevector-copy!
  (#(procedure)
   scheme.base#bytevector-copy!
   ((struct u8vector) fixnum (struct u8vector) #!optional fixnum fixnum)
   undefined))

(scheme.base#call-with-port
  (#(procedure) scheme.base#call-with-port (port (procedure (port) . *)) . *))

(scheme.base#char<=?
  (#(procedure) scheme.base#char<=? (char char #!rest char) boolean))

(scheme.base#char<?
  (#(procedure) scheme.base#char<? (char char #!rest char) boolean))

(scheme.base#char=?
  (#(procedure) scheme.base#char=? (char char #!rest char) boolean))

(scheme.base#char>=?
  (#(procedure) scheme.base#char>=? (char char #!rest char) boolean))

(scheme.base#char>?
  (#(procedure) scheme.base#char>? (char char #!rest char) boolean))

(scheme.base#close-port (#(procedure) scheme.base#close-port (port) undefined))

(scheme.base#eof-object (#(procedure #:pure) scheme.base#eof-object () eof))

(scheme.base#error-object-irritants
  (#(procedure)
   scheme.base#error-object-irritants
   ((struct condition))
   (or list false)))

(scheme.base#error-object-message
  (#(procedure)
   scheme.base#error-object-message
   ((struct condition))
   (or string false)))

(scheme.base#error-object?
  (#(procedure #:predicate (struct condition))
   scheme.base#error-object?
   (*)
   boolean))

(scheme.base#features
  (#(procedure #:pure) scheme.base#features () (list-of symbol)))

(scheme.base#file-error?
  (#(procedure #:pure) scheme.base#file-error? (*) boolean))

(scheme.base#floor-quotient
  (#(procedure) scheme.base#floor-quotient (number number) number))

(scheme.base#floor-remainder
  (#(procedure)
   scheme.base#floor-remainder
   ((or fixnum bignum float ratnum) (or fixnum bignum float ratnum))
   (or fixnum bignum float ratnum)
   (or fixnum bignum float ratnum)))

(scheme.base#floor/
  (#(procedure) scheme.base#floor/ (number number) number number))

(scheme.base#input-port-open?
  (#(procedure) scheme.base#input-port-open? ((refine (input) port)) boolean))

(scheme.base#list-copy
  (forall (a416) (#(procedure) scheme.base#list-copy (a416) a416)))

(scheme.base#list-set!
  (#(procedure) scheme.base#list-set! (list fixnum *) undefined))

(scheme.base#list-tail
  (forall
    (x277)
    (#(procedure)
     scheme.base#list-tail
     ((list-of x277) fixnum)
     (list-of x277))))

(scheme.base#make-list
  (forall
    (x248)
    (#(procedure)
     scheme.base#make-list
     (fixnum #!optional x248)
     (list-of x248))))

(scheme.base#member
  (forall
    (a303 b304)
    (#(procedure)
     scheme.base#member
     (a303 (list-of b304) #!optional (procedure (b304 a303) *))
     (or false (list-of b304)))))

(scheme.base#output-port-open?
  (#(procedure)
   scheme.base#output-port-open?
   ((refine (output) port))
   boolean))

(scheme.base#peek-u8
  (#(procedure) scheme.base#peek-u8 (#!optional (refine (input) port)) fixnum))

(scheme.base#raise (#(procedure) scheme.base#raise (*) noreturn))

(scheme.base#raise-continuable
  (#(procedure) scheme.base#raise-continuable (*) . *))

(scheme.base#read-bytevector!
  (#(procedure)
   scheme.base#read-bytevector!
   ((struct u8vector) #!optional (refine (input) port) number number)
   fixnum))

(scheme.base#read-error?
  (#(procedure #:pure) scheme.base#read-error? (*) boolean))

(scheme.base#square (#(procedure) scheme.base#square (number) number))

(scheme.base#string->utf8
  (#(procedure)
   scheme.base#string->utf8
   (string #!optional fixnum fixnum)
   (struct u8vector)))

(scheme.base#string->vector
  (#(procedure)
   scheme.base#string->vector
   (string #!optional fixnum fixnum)
   (vector-of char)))

(scheme.base#string-for-each
  (#(procedure)
   scheme.base#string-for-each
   ((procedure (char #!rest char) *) string #!rest string)
   undefined))

(scheme.base#string-map
  (#(procedure)
   scheme.base#string-map
   ((procedure (char #!rest char) char) string #!rest string)
   string))

(scheme.base#string<=?
  (#(procedure) scheme.base#string<=? (string string #!rest string) boolean))

(scheme.base#string<?
  (#(procedure) scheme.base#string<? (string string #!rest string) boolean))

(scheme.base#string=?
  (#(procedure) scheme.base#string=? (string string #!rest string) boolean))

(scheme.base#string>=?
  (#(procedure) scheme.base#string>=? (string string #!rest string) boolean))

(scheme.base#string>?
  (#(procedure) scheme.base#string>? (string string #!rest string) boolean))

(scheme.base#symbol=?
  (#(procedure) scheme.base#symbol=? (symbol symbol #!rest symbol) boolean))

(scheme.base#textual-port?
  (#(procedure #:pure) scheme.base#textual-port? (*) boolean))

(scheme.base#truncate-quotient
  (#(procedure)
   scheme.base#truncate-quotient
   ((or integer float) (or integer float))
   (or integer float)))

(scheme.base#truncate-remainder
  (#(procedure)
   scheme.base#truncate-remainder
   ((or integer float) (or integer float))
   (or integer float)))

(scheme.base#truncate/
  (#(procedure)
   scheme.base#truncate/
   ((or integer float) (or integer float))
   (or integer float)
   (or integer float)))

(scheme.base#utf8->string
  (#(procedure)
   scheme.base#utf8->string
   ((struct u8vector) #!optional fixnum fixnum)
   string))

(scheme.base#vector->list
  (forall
    (a858)
    (#(procedure)
     scheme.base#vector->list
     ((vector-of a858) #!optional fixnum fixnum)
     (list-of a858))))

(scheme.base#vector->string
  (#(procedure)
   scheme.base#vector->string
   ((vector-of char) #!optional fixnum fixnum)
   string))

(scheme.base#vector-append
  (#(procedure) scheme.base#vector-append (#!rest vector) vector))

(scheme.base#vector-copy
  (forall
    (a856)
    (#(procedure)
     scheme.base#vector-copy
     ((vector-of a856) #!optional fixnum fixnum)
     (vector-of a856))))

(scheme.base#vector-copy!
  (#(procedure)
   scheme.base#vector-copy!
   (vector fixnum vector #!optional fixnum fixnum)
   undefined))

(scheme.base#vector-fill!
  (#(procedure)
   scheme.base#vector-fill!
   (vector * #!optional fixnum fixnum)
   undefined))

(scheme.base#vector-for-each
  (#(procedure)
   scheme.base#vector-for-each
   ((procedure (* #!rest *) *) vector #!rest vector)
   undefined))

(scheme.base#vector-map
  (#(procedure)
   scheme.base#vector-map
   ((procedure (* #!rest *) *) vector #!rest vector)
   vector))

(scheme.base#with-exception-handler
  (#(procedure)
   scheme.base#with-exception-handler
   ((procedure (*) . *) (procedure () . *))
   .
   *))

(scheme.base#write-string
  (#(procedure)
   scheme.base#write-string
   (string #!optional (refine (output) port) fixnum fixnum)
   undefined))

; END OF FILE
