(* value scheme)
(* value r4rs)
(+ value scheme)
(+ value r4rs)
(- value scheme)
(- value r4rs)
(->string value chicken.string)
(/ value scheme)
(/ value r4rs)
(: syntax chicken.type)
(< value scheme)
(< value r4rs)
(<= value scheme)
(<= value r4rs)
(= value scheme)
(= value r4rs)
(> value scheme)
(> value r4rs)
(>= value scheme)
(>= value r4rs)
(abort value chicken.condition)
(abort value srfi-12)
(abs value scheme)
(abs value r4rs)
(absolute-pathname? value chicken.pathname)
(acos value scheme)
(acos value r4rs)
(add1 value chicken.base)
(address->pointer value chicken.memory)
(align-to-word value chicken.memory)
(alist-ref value chicken.base)
(alist-update value chicken.base)
(alist-update! value chicken.base)
(allocate value chicken.memory)
(and syntax r5rs-null)
(and syntax r4rs-null)
(and syntax scheme)
(and syntax r4rs)
(and-let* syntax chicken.base)
(and-let* syntax srfi-2)
(angle value scheme)
(angle value r4rs)
(append value scheme)
(append value r4rs)
(apply value scheme)
(apply value r4rs)
(argc+argv value chicken.process-context)
(argv value chicken.process-context)
(arithmetic-shift value chicken.bitwise)
(asin value scheme)
(asin value r4rs)
(assert syntax chicken.base)
(assoc value scheme)
(assoc value r4rs)
(assq value scheme)
(assq value r4rs)
(assume syntax chicken.type)
(assv value scheme)
(assv value r4rs)
(atan value scheme)
(atan value r4rs)
(atom? value chicken.base)
(begin syntax r5rs-null)
(begin syntax r4rs-null)
(begin syntax scheme)
(begin syntax r4rs)
(begin-for-syntax syntax chicken.syntax)
(bignum? value chicken.base)
(bit->boolean value chicken.bitwise)
(bitwise-and value chicken.bitwise)
(bitwise-ior value chicken.bitwise)
(bitwise-not value chicken.bitwise)
(bitwise-xor value chicken.bitwise)
(blob->f32vector value srfi-4)
(blob->f32vector/shared value srfi-4)
(blob->f64vector value srfi-4)
(blob->f64vector/shared value srfi-4)
(blob->s16vector value srfi-4)
(blob->s16vector/shared value srfi-4)
(blob->s32vector value srfi-4)
(blob->s32vector/shared value srfi-4)
(blob->s64vector value srfi-4)
(blob->s64vector/shared value srfi-4)
(blob->s8vector value srfi-4)
(blob->s8vector/shared value srfi-4)
(blob->string value chicken.blob)
(blob->u16vector value srfi-4)
(blob->u16vector/shared value srfi-4)
(blob->u32vector value srfi-4)
(blob->u32vector/shared value srfi-4)
(blob->u64vector value srfi-4)
(blob->u64vector/shared value srfi-4)
(blob->u8vector value srfi-4)
(blob->u8vector/shared value srfi-4)
(blob-size value chicken.blob)
(blob=? value chicken.blob)
(blob? value chicken.blob)
(block-device? value chicken.file.posix)
(block-ref value chicken.memory.representation)
(block-set! value chicken.memory.representation)
(boolean? value scheme)
(boolean? value r4rs)
(build-platform value chicken.platform)
(butlast value chicken.base)
(caaaar value scheme)
(caaaar value r4rs)
(caaadr value scheme)
(caaadr value r4rs)
(caaar value scheme)
(caaar value r4rs)
(caadar value scheme)
(caadar value r4rs)
(caaddr value scheme)
(caaddr value r4rs)
(caadr value scheme)
(caadr value r4rs)
(caar value scheme)
(caar value r4rs)
(cadaar value scheme)
(cadaar value r4rs)
(cadadr value scheme)
(cadadr value r4rs)
(cadar value scheme)
(cadar value r4rs)
(caddar value scheme)
(caddar value r4rs)
(cadddr value scheme)
(cadddr value r4rs)
(caddr value scheme)
(caddr value r4rs)
(cadr value scheme)
(cadr value r4rs)
(call-with-current-continuation value scheme)
(call-with-current-continuation value r4rs)
(call-with-input-file value scheme)
(call-with-input-file value r4rs)
(call-with-input-pipe value chicken.process)
(call-with-input-string value chicken.port)
(call-with-output-file value scheme)
(call-with-output-file value r4rs)
(call-with-output-pipe value chicken.process)
(call-with-output-string value chicken.port)
(call-with-values value scheme)
(call/cc value chicken.base)
(car value scheme)
(car value r4rs)
(case syntax r5rs-null)
(case syntax r4rs-null)
(case syntax scheme)
(case syntax r4rs)
(case-lambda syntax chicken.base)
(case-lambda syntax srfi-16)
(case-sensitive value chicken.base)
(cdaaar value scheme)
(cdaaar value r4rs)
(cdaadr value scheme)
(cdaadr value r4rs)
(cdaar value scheme)
(cdaar value r4rs)
(cdadar value scheme)
(cdadar value r4rs)
(cdaddr value scheme)
(cdaddr value r4rs)
(cdadr value scheme)
(cdadr value r4rs)
(cdar value scheme)
(cdar value r4rs)
(cddaar value scheme)
(cddaar value r4rs)
(cddadr value scheme)
(cddadr value r4rs)
(cddar value scheme)
(cddar value r4rs)
(cdddar value scheme)
(cdddar value r4rs)
(cddddr value scheme)
(cddddr value r4rs)
(cdddr value scheme)
(cdddr value r4rs)
(cddr value scheme)
(cddr value r4rs)
(cdr value scheme)
(cdr value r4rs)
(ceiling value scheme)
(ceiling value r4rs)
(change-directory value chicken.process-context)
(change-directory* value chicken.process-context.posix)
(char->integer value scheme)
(char->integer value r4rs)
(char-alphabetic? value scheme)
(char-alphabetic? value r4rs)
(char-ci<=? value scheme)
(char-ci<=? value r4rs)
(char-ci<? value scheme)
(char-ci<? value r4rs)
(char-ci=? value scheme)
(char-ci=? value r4rs)
(char-ci>=? value scheme)
(char-ci>=? value r4rs)
(char-ci>? value scheme)
(char-ci>? value r4rs)
(char-downcase value scheme)
(char-downcase value r4rs)
(char-lower-case? value scheme)
(char-lower-case? value r4rs)
(char-name value chicken.base)
(char-numeric? value scheme)
(char-numeric? value r4rs)
(char-ready? value scheme)
(char-ready? value r4rs)
(char-upcase value scheme)
(char-upcase value r4rs)
(char-upper-case? value scheme)
(char-upper-case? value r4rs)
(char-whitespace? value scheme)
(char-whitespace? value r4rs)
(char<=? value scheme)
(char<=? value r4rs)
(char<? value scheme)
(char<? value r4rs)
(char=? value scheme)
(char=? value r4rs)
(char>=? value scheme)
(char>=? value r4rs)
(char>? value scheme)
(char>? value r4rs)
(char? value scheme)
(char? value r4rs)
(character-device? value chicken.file.posix)
(chicken-home value chicken.platform)
(chicken-version value chicken.platform)
(chop value chicken.base)
(close-input-pipe value chicken.process)
(close-input-port value scheme)
(close-input-port value r4rs)
(close-output-pipe value chicken.process)
(close-output-port value scheme)
(close-output-port value r4rs)
(command-line-arguments value chicken.process-context)
(compiler-typecase syntax chicken.type)
(complement value chicken.base)
(complex? value scheme)
(complex? value r4rs)
(compose value chicken.base)
(compress value chicken.base)
(conc value chicken.string)
(cond syntax r5rs-null)
(cond syntax r4rs-null)
(cond syntax scheme)
(cond syntax r4rs)
(cond-expand syntax srfi-0)
(cond-expand syntax chicken.module)
(condition value chicken.condition)
(condition->list value chicken.condition)
(condition-case syntax chicken.condition)
(condition-predicate value chicken.condition)
(condition-predicate value srfi-12)
(condition-property-accessor value chicken.condition)
(condition-property-accessor value srfi-12)
(condition? value chicken.condition)
(condition? value srfi-12)
(conjoin value chicken.base)
(cons value scheme)
(cons value r4rs)
(constantly value chicken.base)
(continuation-capture value chicken.continuation)
(continuation-graft value chicken.continuation)
(continuation-return value chicken.continuation)
(continuation? value chicken.continuation)
(copy-file value chicken.file)
(copy-port value chicken.port)
(copy-read-table value chicken.read-syntax)
(cos value scheme)
(cos value r4rs)
(cplxnum? value chicken.base)
(cpu-time value chicken.time)
(create-directory value chicken.file)
(create-fifo value chicken.file.posix)
(create-pipe value chicken.process)
(create-session value chicken.process-context.posix)
(create-symbolic-link value chicken.file.posix)
(create-temporary-directory value chicken.file)
(create-temporary-file value chicken.file)
(current-directory value chicken.process-context)
(current-effective-group-id value chicken.process-context.posix)
(current-effective-user-id value chicken.process-context.posix)
(current-effective-user-name value chicken.process-context.posix)
(current-error-port value chicken.base)
(current-exception-handler value chicken.condition)
(current-exception-handler value srfi-12)
(current-gc-milliseconds value chicken.gc)
(current-group-id value chicken.process-context.posix)
(current-input-port value scheme)
(current-input-port value r4rs)
(current-milliseconds value chicken.time)
(current-module syntax chicken.module)
(current-output-port value scheme)
(current-output-port value r4rs)
(current-process-id value chicken.process-context.posix)
(current-read-table value chicken.read-syntax)
(current-seconds value chicken.time)
(current-user-id value chicken.process-context.posix)
(current-user-name value chicken.process-context.posix)
(cut syntax chicken.base)
(cut syntax srfi-26)
(cute syntax chicken.base)
(cute syntax srfi-26)
(declare syntax chicken.base)
(decompose-directory value chicken.pathname)
(decompose-pathname value chicken.pathname)
(define syntax r5rs-null)
(define syntax r4rs-null)
(define syntax scheme)
(define syntax r4rs)
(define-compiler-syntax syntax chicken.syntax)
(define-constant syntax chicken.base)
(define-external syntax chicken.foreign)
(define-for-syntax syntax chicken.syntax)
(define-foreign-type syntax chicken.foreign)
(define-foreign-variable syntax chicken.foreign)
(define-inline syntax chicken.base)
(define-interface syntax chicken.module)
(define-location syntax chicken.foreign)
(define-reader-ctor value chicken.read-syntax)
(define-reader-ctor value srfi-10)
(define-record syntax chicken.base)
(define-record-printer syntax chicken.base)
(define-record-type syntax chicken.base)
(define-record-type syntax srfi-9)
(define-specialization syntax chicken.type)
(define-syntax syntax r5rs-null)
(define-syntax syntax r4rs-null)
(define-syntax syntax scheme)
(define-syntax syntax r4rs)
(define-type syntax chicken.type)
(define-values syntax chicken.base)
(delay syntax r5rs-null)
(delay syntax r4rs-null)
(delay syntax scheme)
(delay syntax r4rs)
(delay-force syntax chicken.base)
(delete-directory value chicken.file)
(delete-file value chicken.file)
(delete-file* value chicken.file)
(denominator value scheme)
(denominator value r4rs)
(directory value chicken.file)
(directory-exists? value chicken.file)
(directory-null? value chicken.pathname)
(directory? value chicken.file.posix)
(disjoin value chicken.base)
(display value scheme)
(display value r4rs)
(do syntax r5rs-null)
(do syntax r4rs-null)
(do syntax scheme)
(do syntax r4rs)
(duplicate-fileno value chicken.file.posix)
(dynamic-load-libraries value chicken.load)
(dynamic-wind value scheme)
(each value chicken.base)
(editor-command value chicken.csi)
(emergency-exit value chicken.base)
(enable-warnings value chicken.base)
(eof-object? value scheme)
(eof-object? value r4rs)
(eq? value scheme)
(eq? value r4rs)
(equal=? value chicken.base)
(equal? value scheme)
(equal? value r4rs)
(eqv? value scheme)
(eqv? value r4rs)
(er-macro-transformer value chicken.syntax)
(errno value chicken.errno)
(errno/2big value chicken.errno)
(errno/acces value chicken.errno)
(errno/again value chicken.errno)
(errno/badf value chicken.errno)
(errno/busy value chicken.errno)
(errno/child value chicken.errno)
(errno/deadlk value chicken.errno)
(errno/dom value chicken.errno)
(errno/exist value chicken.errno)
(errno/fault value chicken.errno)
(errno/fbig value chicken.errno)
(errno/ilseq value chicken.errno)
(errno/intr value chicken.errno)
(errno/inval value chicken.errno)
(errno/io value chicken.errno)
(errno/isdir value chicken.errno)
(errno/mfile value chicken.errno)
(errno/mlink value chicken.errno)
(errno/nametoolong value chicken.errno)
(errno/nfile value chicken.errno)
(errno/nodev value chicken.errno)
(errno/noent value chicken.errno)
(errno/noexec value chicken.errno)
(errno/nolck value chicken.errno)
(errno/nomem value chicken.errno)
(errno/nospc value chicken.errno)
(errno/nosys value chicken.errno)
(errno/notdir value chicken.errno)
(errno/notempty value chicken.errno)
(errno/notty value chicken.errno)
(errno/nxio value chicken.errno)
(errno/perm value chicken.errno)
(errno/pipe value chicken.errno)
(errno/range value chicken.errno)
(errno/rofs value chicken.errno)
(errno/spipe value chicken.errno)
(errno/srch value chicken.errno)
(errno/wouldblock value chicken.errno)
(errno/xdev value chicken.errno)
(error value chicken.base)
(error value srfi-23)
(eval value scheme)
(eval-handler value chicken.eval)
(even? value scheme)
(even? value r4rs)
(exact->inexact value scheme)
(exact->inexact value r4rs)
(exact-integer-nth-root value chicken.base)
(exact-integer-sqrt value chicken.base)
(exact-integer? value chicken.base)
(exact? value scheme)
(exact? value r4rs)
(executable-pathname value chicken.process-context)
(exit value chicken.base)
(exit-handler value chicken.base)
(exp value scheme)
(exp value r4rs)
(expand value chicken.syntax)
(export syntax chicken.module)
(expt value scheme)
(expt value r4rs)
(extend-procedure value chicken.memory.representation)
(extended-procedure? value chicken.memory.representation)
(f32vector value srfi-4)
(f32vector->blob value srfi-4)
(f32vector->blob/shared value srfi-4)
(f32vector->list value srfi-4)
(f32vector-length value srfi-4)
(f32vector-ref value srfi-4)
(f32vector-set! value srfi-4)
(f32vector? value srfi-4)
(f64vector value srfi-4)
(f64vector->blob value srfi-4)
(f64vector->blob/shared value srfi-4)
(f64vector->list value srfi-4)
(f64vector-length value srfi-4)
(f64vector-ref value srfi-4)
(f64vector-set! value srfi-4)
(f64vector? value srfi-4)
(fcntl/dupfd value chicken.file.posix)
(fcntl/getfd value chicken.file.posix)
(fcntl/getfl value chicken.file.posix)
(fcntl/setfd value chicken.file.posix)
(fcntl/setfl value chicken.file.posix)
(feature? value chicken.platform)
(features value chicken.platform)
(fifo? value chicken.file.posix)
(file-access-time value chicken.file.posix)
(file-change-time value chicken.file.posix)
(file-close value chicken.file.posix)
(file-control value chicken.file.posix)
(file-creation-mode value chicken.file.posix)
(file-executable? value chicken.file)
(file-exists? value chicken.file)
(file-group value chicken.file.posix)
(file-link value chicken.file.posix)
(file-lock value chicken.file.posix)
(file-lock/blocking value chicken.file.posix)
(file-mkstemp value chicken.file.posix)
(file-modification-time value chicken.file.posix)
(file-open value chicken.file.posix)
(file-owner value chicken.file.posix)
(file-permissions value chicken.file.posix)
(file-position value chicken.file.posix)
(file-read value chicken.file.posix)
(file-readable? value chicken.file)
(file-select value chicken.file.posix)
(file-size value chicken.file.posix)
(file-stat value chicken.file.posix)
(file-test-lock value chicken.file.posix)
(file-truncate value chicken.file.posix)
(file-type value chicken.file.posix)
(file-unlock value chicken.file.posix)
(file-writable? value chicken.file)
(file-write value chicken.file.posix)
(fileno/stderr value chicken.file.posix)
(fileno/stdin value chicken.file.posix)
(fileno/stdout value chicken.file.posix)
(find-files value chicken.file)
(finite? value chicken.base)
(fixnum-bits value chicken.fixnum)
(fixnum-precision value chicken.fixnum)
(fixnum? value chicken.base)
(flatten value chicken.base)
(flip value chicken.base)
(flonum-decimal-precision value chicken.flonum)
(flonum-epsilon value chicken.flonum)
(flonum-maximum-decimal-exponent value chicken.flonum)
(flonum-maximum-exponent value chicken.flonum)
(flonum-minimum-decimal-exponent value chicken.flonum)
(flonum-minimum-exponent value chicken.flonum)
(flonum-precision value chicken.flonum)
(flonum-print-precision value chicken.flonum)
(flonum-radix value chicken.flonum)
(flonum? value chicken.base)
(floor value scheme)
(floor value r4rs)
(fluid-let syntax chicken.base)
(fluid-let syntax srfi-15)
(flush-output value chicken.base)
(foldl value chicken.base)
(foldr value chicken.base)
(for-each value scheme)
(for-each value r4rs)
(force value scheme)
(force value r4rs)
(force-finalizers value chicken.gc)
(foreign-code syntax chicken.foreign)
(foreign-declare syntax chicken.foreign)
(foreign-lambda syntax chicken.foreign)
(foreign-lambda* syntax chicken.foreign)
(foreign-primitive syntax chicken.foreign)
(foreign-safe-lambda syntax chicken.foreign)
(foreign-safe-lambda* syntax chicken.foreign)
(foreign-type-size syntax chicken.foreign)
(foreign-value syntax chicken.foreign)
(format value chicken.format)
(format value srfi-28)
(fp* value chicken.flonum)
(fp+ value chicken.flonum)
(fp- value chicken.flonum)
(fp/ value chicken.flonum)
(fp/? value chicken.flonum)
(fp< value chicken.flonum)
(fp<= value chicken.flonum)
(fp= value chicken.flonum)
(fp> value chicken.flonum)
(fp>= value chicken.flonum)
(fpabs value chicken.flonum)
(fpacos value chicken.flonum)
(fpasin value chicken.flonum)
(fpatan value chicken.flonum)
(fpatan2 value chicken.flonum)
(fpceiling value chicken.flonum)
(fpcos value chicken.flonum)
(fpexp value chicken.flonum)
(fpexpt value chicken.flonum)
(fpfloor value chicken.flonum)
(fpgcd value chicken.flonum)
(fpinteger? value chicken.flonum)
(fplog value chicken.flonum)
(fpmax value chicken.flonum)
(fpmin value chicken.flonum)
(fpneg value chicken.flonum)
(fprintf value chicken.format)
(fpround value chicken.flonum)
(fpsin value chicken.flonum)
(fpsqrt value chicken.flonum)
(fptan value chicken.flonum)
(fptruncate value chicken.flonum)
(free value chicken.memory)
(functor syntax chicken.module)
(fx* value chicken.fixnum)
(fx*? value chicken.fixnum)
(fx+ value chicken.fixnum)
(fx+? value chicken.fixnum)
(fx- value chicken.fixnum)
(fx-? value chicken.fixnum)
(fx/ value chicken.fixnum)
(fx/? value chicken.fixnum)
(fx< value chicken.fixnum)
(fx<= value chicken.fixnum)
(fx= value chicken.fixnum)
(fx> value chicken.fixnum)
(fx>= value chicken.fixnum)
(fxand value chicken.fixnum)
(fxeven? value chicken.fixnum)
(fxgcd value chicken.fixnum)
(fxior value chicken.fixnum)
(fxlen value chicken.fixnum)
(fxmax value chicken.fixnum)
(fxmin value chicken.fixnum)
(fxmod value chicken.fixnum)
(fxneg value chicken.fixnum)
(fxnot value chicken.fixnum)
(fxodd? value chicken.fixnum)
(fxrem value chicken.fixnum)
(fxshl value chicken.fixnum)
(fxshr value chicken.fixnum)
(fxxor value chicken.fixnum)
(gc value chicken.gc)
(gcd value scheme)
(gcd value r4rs)
(gensym value chicken.base)
(get value chicken.plist)
(get-call-chain value chicken.base)
(get-condition-property value chicken.condition)
(get-environment-variable value chicken.process-context)
(get-environment-variable value srfi-98)
(get-environment-variables value chicken.process-context)
(get-environment-variables value srfi-98)
(get-keyword value chicken.keyword)
(get-line-number value chicken.syntax)
(get-output-string value chicken.base)
(get-output-string value srfi-6)
(get-properties value chicken.plist)
(getter-with-setter value chicken.base)
(glob value chicken.file)
(glob->sre value chicken.irregex)
(handle-exceptions syntax chicken.condition)
(handle-exceptions syntax srfi-12)
(identity value chicken.base)
(if syntax r5rs-null)
(if syntax r4rs-null)
(if syntax scheme)
(if syntax r4rs)
(imag-part value scheme)
(imag-part value r4rs)
(implicit-exit-handler value chicken.base)
(import syntax chicken.module)
(import-for-syntax syntax chicken.module)
(import-syntax syntax chicken.module)
(import-syntax-for-syntax syntax chicken.module)
(include syntax chicken.base)
(include-relative syntax chicken.base)
(inexact->exact value scheme)
(inexact->exact value r4rs)
(inexact? value scheme)
(inexact? value r4rs)
(infinite? value chicken.base)
(input-port-open? value chicken.base)
(input-port? value scheme)
(input-port? value r4rs)
(installation-repository value chicken.platform)
(integer->char value scheme)
(integer->char value r4rs)
(integer-length value chicken.bitwise)
(integer? value scheme)
(integer? value r4rs)
(interaction-environment value scheme)
(interaction-environment value r4rs)
(intersperse value chicken.base)
(ir-macro-transformer value chicken.syntax)
(irregex value chicken.irregex)
(irregex-extract value chicken.irregex)
(irregex-fold value chicken.irregex)
(irregex-fold/chunked value chicken.irregex)
(irregex-match value chicken.irregex)
(irregex-match-data? value chicken.irregex)
(irregex-match-end-chunk value chicken.irregex)
(irregex-match-end-index value chicken.irregex)
(irregex-match-names value chicken.irregex)
(irregex-match-num-submatches value chicken.irregex)
(irregex-match-start-chunk value chicken.irregex)
(irregex-match-start-index value chicken.irregex)
(irregex-match-subchunk value chicken.irregex)
(irregex-match-substring value chicken.irregex)
(irregex-match-valid-index? value chicken.irregex)
(irregex-match/chunked value chicken.irregex)
(irregex-match? value chicken.irregex)
(irregex-names value chicken.irregex)
(irregex-num-submatches value chicken.irregex)
(irregex-opt value chicken.irregex)
(irregex-quote value chicken.irregex)
(irregex-replace value chicken.irregex)
(irregex-replace/all value chicken.irregex)
(irregex-search value chicken.irregex)
(irregex-search/chunked value chicken.irregex)
(irregex-split value chicken.irregex)
(irregex? value chicken.irregex)
(join value chicken.base)
(keyword->string value chicken.keyword)
(keyword->string value srfi-88)
(keyword-style value chicken.base)
(keyword? value chicken.keyword)
(keyword? value srfi-88)
(lambda syntax r5rs-null)
(lambda syntax r4rs-null)
(lambda syntax scheme)
(lambda syntax r4rs)
(lcm value scheme)
(lcm value r4rs)
(length value scheme)
(length value r4rs)
(let syntax r5rs-null)
(let syntax r4rs-null)
(let syntax scheme)
(let syntax r4rs)
(let* syntax r5rs-null)
(let* syntax r4rs-null)
(let* syntax scheme)
(let* syntax r4rs)
(let*-values syntax chicken.base)
(let*-values syntax srfi-11)
(let-compiler-syntax syntax chicken.syntax)
(let-location syntax chicken.foreign)
(let-optionals syntax chicken.base)
(let-optionals* syntax chicken.base)
(let-syntax syntax r5rs-null)
(let-syntax syntax r4rs-null)
(let-syntax syntax scheme)
(let-syntax syntax r4rs)
(let-values syntax chicken.base)
(let-values syntax srfi-11)
(letrec syntax r5rs-null)
(letrec syntax r4rs-null)
(letrec syntax scheme)
(letrec syntax r4rs)
(letrec* syntax chicken.base)
(letrec-syntax syntax r5rs-null)
(letrec-syntax syntax r4rs-null)
(letrec-syntax syntax scheme)
(letrec-syntax syntax r4rs)
(letrec-values syntax chicken.base)
(list value scheme)
(list value r4rs)
(list->f32vector value srfi-4)
(list->f64vector value srfi-4)
(list->s16vector value srfi-4)
(list->s32vector value srfi-4)
(list->s64vector value srfi-4)
(list->s8vector value srfi-4)
(list->string value scheme)
(list->string value r4rs)
(list->u16vector value srfi-4)
(list->u32vector value srfi-4)
(list->u64vector value srfi-4)
(list->u8vector value srfi-4)
(list->vector value scheme)
(list->vector value r4rs)
(list-of? value chicken.base)
(list-ref value scheme)
(list-ref value r4rs)
(list-tail value scheme)
(list-tail value r4rs)
(list? value scheme)
(list? value r4rs)
(load value scheme)
(load value r4rs)
(load-library value chicken.load)
(load-noisily value chicken.load)
(load-relative value chicken.load)
(load-verbose value chicken.load)
(local-time->seconds value chicken.time.posix)
(local-timezone-abbreviation value chicken.time.posix)
(location syntax chicken.foreign)
(locative->object value chicken.locative)
(locative-ref value chicken.locative)
(locative-set! value chicken.locative)
(locative? value chicken.locative)
(log value scheme)
(log value r4rs)
(machine-byte-order value chicken.platform)
(machine-type value chicken.platform)
(magnitude value scheme)
(magnitude value r4rs)
(make-absolute-pathname value chicken.pathname)
(make-bidirectional-port value chicken.port)
(make-blob value chicken.blob)
(make-broadcast-port value chicken.port)
(make-composite-condition value chicken.condition)
(make-composite-condition value srfi-12)
(make-concatenated-port value chicken.port)
(make-f32vector value srfi-4)
(make-f64vector value srfi-4)
(make-input-port value chicken.port)
(make-irregex-chunker value chicken.irregex)
(make-locative value chicken.locative)
(make-output-port value chicken.port)
(make-parameter value chicken.base)
(make-parameter value srfi-39)
(make-pathname value chicken.pathname)
(make-pointer-vector value chicken.memory)
(make-polar value scheme)
(make-polar value r4rs)
(make-promise value chicken.base)
(make-property-condition value chicken.condition)
(make-property-condition value srfi-12)
(make-record-instance value chicken.memory.representation)
(make-rectangular value scheme)
(make-rectangular value r4rs)
(make-s16vector value srfi-4)
(make-s32vector value srfi-4)
(make-s64vector value srfi-4)
(make-s8vector value srfi-4)
(make-string value scheme)
(make-string value r4rs)
(make-u16vector value srfi-4)
(make-u32vector value srfi-4)
(make-u64vector value srfi-4)
(make-u8vector value srfi-4)
(make-vector value scheme)
(make-vector value r4rs)
(make-weak-locative value chicken.locative)
(map value scheme)
(map value r4rs)
(max value scheme)
(max value r4rs)
(maximum-flonum value chicken.flonum)
(maybe-string->sre value chicken.irregex)
(member value scheme)
(member value r4rs)
(memory-statistics value chicken.gc)
(memq value scheme)
(memq value r4rs)
(memv value scheme)
(memv value r4rs)
(merge value chicken.sort)
(merge! value chicken.sort)
(min value scheme)
(min value r4rs)
(minimum-flonum value chicken.flonum)
(module syntax chicken.module)
(module-environment value chicken.eval)
(modulo value scheme)
(modulo value r4rs)
(most-negative-fixnum value chicken.fixnum)
(most-positive-fixnum value chicken.fixnum)
(move-file value chicken.file)
(move-memory! value chicken.memory)
(mutate-procedure! value chicken.memory.representation)
(nan? value chicken.base)
(negative? value scheme)
(negative? value r4rs)
(newline value scheme)
(newline value r4rs)
(normalize-pathname value chicken.pathname)
(not value scheme)
(not value r4rs)
(notice value chicken.base)
(nth-value syntax chicken.base)
(null-environment value scheme)
(null-environment value r4rs)
(null? value scheme)
(null? value r4rs)
(number->string value scheme)
(number->string value r4rs)
(number-of-bytes value chicken.memory.representation)
(number-of-slots value chicken.memory.representation)
(number-vector? value srfi-4)
(number? value scheme)
(number? value r4rs)
(numerator value scheme)
(numerator value r4rs)
(o value chicken.base)
(object->pointer value chicken.memory)
(object-become! value chicken.memory.representation)
(object-copy value chicken.memory.representation)
(odd? value scheme)
(odd? value r4rs)
(on-exit value chicken.base)
(open-input-file value scheme)
(open-input-file value r4rs)
(open-input-file* value chicken.file.posix)
(open-input-pipe value chicken.process)
(open-input-string value chicken.base)
(open-input-string value srfi-6)
(open-output-file value scheme)
(open-output-file value r4rs)
(open-output-file* value chicken.file.posix)
(open-output-pipe value chicken.process)
(open-output-string value chicken.base)
(open-output-string value srfi-6)
(open/append value chicken.file.posix)
(open/binary value chicken.file.posix)
(open/creat value chicken.file.posix)
(open/excl value chicken.file.posix)
(open/fsync value chicken.file.posix)
(open/noctty value chicken.file.posix)
(open/noinherit value chicken.file.posix)
(open/nonblock value chicken.file.posix)
(open/rdonly value chicken.file.posix)
(open/rdwr value chicken.file.posix)
(open/read value chicken.file.posix)
(open/sync value chicken.file.posix)
(open/text value chicken.file.posix)
(open/trunc value chicken.file.posix)
(open/write value chicken.file.posix)
(open/wronly value chicken.file.posix)
(optional syntax chicken.base)
(or syntax r5rs-null)
(or syntax r4rs-null)
(or syntax scheme)
(or syntax r4rs)
(output-port-open? value chicken.base)
(output-port? value scheme)
(output-port? value r4rs)
(pair? value scheme)
(pair? value r4rs)
(parameterize syntax chicken.base)
(parameterize syntax srfi-39)
(parent-process-id value chicken.process-context.posix)
(parentheses-synonyms value chicken.base)
(pathname-directory value chicken.pathname)
(pathname-extension value chicken.pathname)
(pathname-file value chicken.pathname)
(pathname-replace-directory value chicken.pathname)
(pathname-replace-extension value chicken.pathname)
(pathname-replace-file value chicken.pathname)
(pathname-strip-directory value chicken.pathname)
(pathname-strip-extension value chicken.pathname)
(peek-char value scheme)
(peek-char value r4rs)
(perm/irgrp value chicken.file.posix)
(perm/iroth value chicken.file.posix)
(perm/irusr value chicken.file.posix)
(perm/irwxg value chicken.file.posix)
(perm/irwxo value chicken.file.posix)
(perm/irwxu value chicken.file.posix)
(perm/isgid value chicken.file.posix)
(perm/isuid value chicken.file.posix)
(perm/isvtx value chicken.file.posix)
(perm/iwgrp value chicken.file.posix)
(perm/iwoth value chicken.file.posix)
(perm/iwusr value chicken.file.posix)
(perm/ixgrp value chicken.file.posix)
(perm/ixoth value chicken.file.posix)
(perm/ixusr value chicken.file.posix)
(pipe/buf value chicken.process)
(pointer+ value chicken.memory)
(pointer->address value chicken.memory)
(pointer->object value chicken.memory)
(pointer-f32-ref value chicken.memory)
(pointer-f32-set! value chicken.memory)
(pointer-f64-ref value chicken.memory)
(pointer-f64-set! value chicken.memory)
(pointer-like? value chicken.memory)
(pointer-s16-ref value chicken.memory)
(pointer-s16-set! value chicken.memory)
(pointer-s32-ref value chicken.memory)
(pointer-s32-set! value chicken.memory)
(pointer-s64-ref value chicken.memory)
(pointer-s64-set! value chicken.memory)
(pointer-s8-ref value chicken.memory)
(pointer-s8-set! value chicken.memory)
(pointer-tag value chicken.memory)
(pointer-u16-ref value chicken.memory)
(pointer-u16-set! value chicken.memory)
(pointer-u32-ref value chicken.memory)
(pointer-u32-set! value chicken.memory)
(pointer-u64-ref value chicken.memory)
(pointer-u64-set! value chicken.memory)
(pointer-u8-ref value chicken.memory)
(pointer-u8-set! value chicken.memory)
(pointer-vector value chicken.memory)
(pointer-vector-fill! value chicken.memory)
(pointer-vector-length value chicken.memory)
(pointer-vector-ref value chicken.memory)
(pointer-vector-set! value chicken.memory)
(pointer-vector? value chicken.memory)
(pointer=? value chicken.memory)
(pointer? value chicken.memory)
(port->fileno value chicken.file.posix)
(port-closed? value chicken.base)
(port-fold value chicken.port)
(port-for-each value chicken.port)
(port-map value chicken.port)
(port-name value chicken.port)
(port-position value chicken.port)
(port? value chicken.base)
(positive? value scheme)
(positive? value r4rs)
(pp value chicken.pretty-print)
(pretty-print value chicken.pretty-print)
(pretty-print-width value chicken.pretty-print)
(print value chicken.base)
(print* value chicken.base)
(print-call-chain value chicken.base)
(print-error-message value chicken.condition)
(printf value chicken.format)
(procedure-data value chicken.memory.representation)
(procedure-information value chicken.base)
(procedure? value scheme)
(procedure? value r4rs)
(process value chicken.process)
(process* value chicken.process)
(process-execute value chicken.process)
(process-fork value chicken.process)
(process-group-id value chicken.process-context.posix)
(process-run value chicken.process)
(process-signal value chicken.process)
(process-sleep value chicken.process)
(process-spawn value chicken.process)
(process-wait value chicken.process)
(program-name value chicken.process-context)
(promise? value chicken.base)
(provide value chicken.load)
(provided? value chicken.load)
(pseudo-random-integer value chicken.random)
(pseudo-random-real value chicken.random)
(put! value chicken.plist)
(qs value chicken.process)
(quasiquote syntax r5rs-null)
(quasiquote syntax r4rs-null)
(quasiquote syntax scheme)
(quasiquote syntax r4rs)
(quit value chicken.repl)
(quote syntax r5rs-null)
(quote syntax r4rs-null)
(quote syntax scheme)
(quote syntax r4rs)
(quotient value scheme)
(quotient value r4rs)
(quotient&modulo value chicken.base)
(quotient&remainder value chicken.base)
(random-bytes value chicken.random)
(rassoc value chicken.base)
(rational? value scheme)
(rational? value r4rs)
(rationalize value scheme)
(rationalize value r4rs)
(ratnum? value chicken.base)
(read value scheme)
(read value r4rs)
(read-buffered value chicken.io)
(read-byte value chicken.io)
(read-char value scheme)
(read-char value r4rs)
(read-line value chicken.io)
(read-lines value chicken.io)
(read-list value chicken.io)
(read-string value chicken.io)
(read-string! value chicken.io)
(read-symbolic-link value chicken.file.posix)
(read-token value chicken.io)
(read-u8vector value srfi-4)
(read-u8vector! value srfi-4)
(real-part value scheme)
(real-part value r4rs)
(real? value scheme)
(real? value r4rs)
(rec syntax chicken.base)
(rec syntax srfi-31)
(receive syntax chicken.base)
(receive syntax srfi-8)
(record->vector value chicken.memory.representation)
(record-instance-length value chicken.memory.representation)
(record-instance-slot value chicken.memory.representation)
(record-instance-slot-set! value chicken.memory.representation)
(record-instance-type value chicken.memory.representation)
(record-instance? value chicken.memory.representation)
(record-printer value chicken.base)
(reexport syntax chicken.module)
(register-feature! value chicken.platform)
(regular-file? value chicken.file.posix)
(release-number-vector value srfi-4)
(remainder value scheme)
(remainder value r4rs)
(remprop! value chicken.plist)
(rename-file value chicken.file)
(repl value chicken.repl)
(repl-prompt value chicken.repl)
(repository-path value chicken.platform)
(require value chicken.load)
(require-extension syntax chicken.base)
(require-extension syntax srfi-55)
(require-library syntax chicken.base)
(reset value chicken.repl)
(reset-handler value chicken.repl)
(return-to-host value chicken.platform)
(reverse value scheme)
(reverse value r4rs)
(reverse-list->string value chicken.string)
(reverse-string-append value chicken.string)
(round value scheme)
(round value r4rs)
(s16vector value srfi-4)
(s16vector->blob value srfi-4)
(s16vector->blob/shared value srfi-4)
(s16vector->list value srfi-4)
(s16vector-length value srfi-4)
(s16vector-ref value srfi-4)
(s16vector-set! value srfi-4)
(s16vector? value srfi-4)
(s32vector value srfi-4)
(s32vector->blob value srfi-4)
(s32vector->blob/shared value srfi-4)
(s32vector->list value srfi-4)
(s32vector-length value srfi-4)
(s32vector-ref value srfi-4)
(s32vector-set! value srfi-4)
(s32vector? value srfi-4)
(s64vector value srfi-4)
(s64vector->blob value srfi-4)
(s64vector->blob/shared value srfi-4)
(s64vector->list value srfi-4)
(s64vector-length value srfi-4)
(s64vector-ref value srfi-4)
(s64vector-set! value srfi-4)
(s64vector? value srfi-4)
(s8vector value srfi-4)
(s8vector->blob value srfi-4)
(s8vector->blob/shared value srfi-4)
(s8vector->list value srfi-4)
(s8vector-length value srfi-4)
(s8vector-ref value srfi-4)
(s8vector-set! value srfi-4)
(s8vector? value srfi-4)
(scheme-report-environment value scheme)
(scheme-report-environment value r4rs)
(seconds->local-time value chicken.time.posix)
(seconds->string value chicken.time.posix)
(seconds->utc-time value chicken.time.posix)
(seek/cur value chicken.file.posix)
(seek/end value chicken.file.posix)
(seek/set value chicken.file.posix)
(set! syntax srfi-17)
(set! syntax r5rs-null)
(set! syntax r4rs-null)
(set! syntax scheme)
(set! syntax r4rs)
(set!-values syntax chicken.base)
(set-alarm! value chicken.process.signal)
(set-buffering-mode! value chicken.port)
(set-car! value scheme)
(set-car! value r4rs)
(set-cdr! value scheme)
(set-cdr! value r4rs)
(set-describer! value chicken.csi)
(set-dynamic-load-mode! value chicken.load)
(set-environment-variable! value chicken.process-context)
(set-file-group! value chicken.file.posix)
(set-file-owner! value chicken.file.posix)
(set-file-permissions! value chicken.file.posix)
(set-file-position! value chicken.file.posix)
(set-file-times! value chicken.file.posix)
(set-finalizer! value chicken.gc)
(set-gc-report! value chicken.gc)
(set-parameterized-read-syntax! value chicken.read-syntax)
(set-port-name! value chicken.port)
(set-procedure-data! value chicken.memory.representation)
(set-pseudo-random-seed! value chicken.random)
(set-read-syntax! value chicken.read-syntax)
(set-record-printer! value chicken.base)
(set-root-directory! value chicken.process-context.posix)
(set-sharp-read-syntax! value chicken.read-syntax)
(set-signal-handler! value chicken.process.signal)
(set-signal-mask! value chicken.process.signal)
(setter value chicken.base)
(signal value chicken.condition)
(signal value srfi-12)
(signal-handler value chicken.process.signal)
(signal-mask value chicken.process.signal)
(signal-mask! value chicken.process.signal)
(signal-masked? value chicken.process.signal)
(signal-unmask! value chicken.process.signal)
(signal/abrt value chicken.process.signal)
(signal/alrm value chicken.process.signal)
(signal/break value chicken.process.signal)
(signal/bus value chicken.process.signal)
(signal/chld value chicken.process.signal)
(signal/cont value chicken.process.signal)
(signal/fpe value chicken.process.signal)
(signal/hup value chicken.process.signal)
(signal/ill value chicken.process.signal)
(signal/int value chicken.process.signal)
(signal/io value chicken.process.signal)
(signal/kill value chicken.process.signal)
(signal/pipe value chicken.process.signal)
(signal/prof value chicken.process.signal)
(signal/quit value chicken.process.signal)
(signal/segv value chicken.process.signal)
(signal/stop value chicken.process.signal)
(signal/term value chicken.process.signal)
(signal/trap value chicken.process.signal)
(signal/tstp value chicken.process.signal)
(signal/urg value chicken.process.signal)
(signal/usr1 value chicken.process.signal)
(signal/usr2 value chicken.process.signal)
(signal/vtalrm value chicken.process.signal)
(signal/winch value chicken.process.signal)
(signal/xcpu value chicken.process.signal)
(signal/xfsz value chicken.process.signal)
(signals-list value chicken.process.signal)
(signum value chicken.base)
(sin value scheme)
(sin value r4rs)
(sleep value chicken.base)
(socket? value chicken.file.posix)
(software-type value chicken.platform)
(software-version value chicken.platform)
(sort value chicken.sort)
(sort! value chicken.sort)
(sorted? value chicken.sort)
(spawn/detach value chicken.process)
(spawn/nowait value chicken.process)
(spawn/nowaito value chicken.process)
(spawn/overlay value chicken.process)
(spawn/wait value chicken.process)
(sprintf value chicken.format)
(sqrt value scheme)
(sqrt value r4rs)
(sre->irregex value chicken.irregex)
(sre->string value chicken.irregex)
(string value scheme)
(string value r4rs)
(string->blob value chicken.blob)
(string->irregex value chicken.irregex)
(string->keyword value chicken.keyword)
(string->keyword value srfi-88)
(string->list value scheme)
(string->list value r4rs)
(string->number value scheme)
(string->number value r4rs)
(string->sre value chicken.irregex)
(string->symbol value scheme)
(string->symbol value r4rs)
(string->time value chicken.time.posix)
(string->uninterned-symbol value chicken.base)
(string-append value scheme)
(string-append value r4rs)
(string-chomp value chicken.string)
(string-chop value chicken.string)
(string-ci<=? value scheme)
(string-ci<=? value r4rs)
(string-ci<? value scheme)
(string-ci<? value r4rs)
(string-ci=? value scheme)
(string-ci=? value r4rs)
(string-ci>=? value scheme)
(string-ci>=? value r4rs)
(string-ci>? value scheme)
(string-ci>? value r4rs)
(string-compare3 value chicken.string)
(string-compare3-ci value chicken.string)
(string-copy value scheme)
(string-copy value r4rs)
(string-fill! value scheme)
(string-fill! value r4rs)
(string-intersperse value chicken.string)
(string-length value scheme)
(string-length value r4rs)
(string-ref value scheme)
(string-ref value r4rs)
(string-set! value scheme)
(string-set! value r4rs)
(string-split value chicken.string)
(string-translate value chicken.string)
(string-translate* value chicken.string)
(string<=? value scheme)
(string<=? value r4rs)
(string<? value scheme)
(string<? value r4rs)
(string=? value scheme)
(string=? value r4rs)
(string>=? value scheme)
(string>=? value r4rs)
(string>? value scheme)
(string>? value r4rs)
(string? value scheme)
(string? value r4rs)
(strip-syntax value chicken.syntax)
(sub1 value chicken.base)
(subf32vector value srfi-4)
(subf64vector value srfi-4)
(subs16vector value srfi-4)
(subs32vector value srfi-4)
(subs64vector value srfi-4)
(subs8vector value srfi-4)
(substring value scheme)
(substring value r4rs)
(substring-ci=? value chicken.string)
(substring-index value chicken.string)
(substring-index-ci value chicken.string)
(substring=? value chicken.string)
(subu16vector value srfi-4)
(subu32vector value srfi-4)
(subu64vector value srfi-4)
(subu8vector value srfi-4)
(subvector value chicken.base)
(symbol->string value scheme)
(symbol->string value r4rs)
(symbol-append value chicken.base)
(symbol-escape value chicken.base)
(symbol-plist value chicken.plist)
(symbol? value scheme)
(symbol? value r4rs)
(symbolic-link? value chicken.file.posix)
(syntax syntax chicken.syntax)
(syntax-error value chicken.syntax)
(syntax-rules syntax r5rs-null)
(syntax-rules syntax r4rs-null)
(syntax-rules syntax scheme)
(syntax-rules syntax r4rs)
(system value chicken.process)
(system* value chicken.process)
(system-cache-directory value chicken.platform)
(system-config-directory value chicken.platform)
(tag-pointer value chicken.memory)
(tagged-pointer? value chicken.memory)
(tail? value chicken.base)
(tan value scheme)
(tan value r4rs)
(tcp-abandon-port value chicken.tcp)
(tcp-accept value chicken.tcp)
(tcp-accept-ready? value chicken.tcp)
(tcp-accept-timeout value chicken.tcp)
(tcp-addresses value chicken.tcp)
(tcp-buffer-size value chicken.tcp)
(tcp-close value chicken.tcp)
(tcp-connect value chicken.tcp)
(tcp-connect-timeout value chicken.tcp)
(tcp-listen value chicken.tcp)
(tcp-listener-fileno value chicken.tcp)
(tcp-listener-port value chicken.tcp)
(tcp-listener? value chicken.tcp)
(tcp-port-numbers value chicken.tcp)
(tcp-read-timeout value chicken.tcp)
(tcp-write-timeout value chicken.tcp)
(terminal-name value chicken.port)
(terminal-port? value chicken.port)
(terminal-size value chicken.port)
(the syntax chicken.type)
(time syntax chicken.time)
(time->string value chicken.time.posix)
(toplevel-command value chicken.csi)
(topological-sort value chicken.sort)
(truncate value scheme)
(truncate value r4rs)
(u16vector value srfi-4)
(u16vector->blob value srfi-4)
(u16vector->blob/shared value srfi-4)
(u16vector->list value srfi-4)
(u16vector-length value srfi-4)
(u16vector-ref value srfi-4)
(u16vector-set! value srfi-4)
(u16vector? value srfi-4)
(u32vector value srfi-4)
(u32vector->blob value srfi-4)
(u32vector->blob/shared value srfi-4)
(u32vector->list value srfi-4)
(u32vector-length value srfi-4)
(u32vector-ref value srfi-4)
(u32vector-set! value srfi-4)
(u32vector? value srfi-4)
(u64vector value srfi-4)
(u64vector->blob value srfi-4)
(u64vector->blob/shared value srfi-4)
(u64vector->list value srfi-4)
(u64vector-length value srfi-4)
(u64vector-ref value srfi-4)
(u64vector-set! value srfi-4)
(u64vector? value srfi-4)
(u8vector value srfi-4)
(u8vector->blob value srfi-4)
(u8vector->blob/shared value srfi-4)
(u8vector->list value srfi-4)
(u8vector-length value srfi-4)
(u8vector-ref value srfi-4)
(u8vector-set! value srfi-4)
(u8vector? value srfi-4)
(unless syntax chicken.base)
(unregister-feature! value chicken.platform)
(unset-environment-variable! value chicken.process-context)
(user-information value chicken.process-context.posix)
(user-options-pass value chicken.compiler.user-pass)
(user-pass value chicken.compiler.user-pass)
(user-post-analysis-pass value chicken.compiler.user-pass)
(user-preprocessor-pass value chicken.compiler.user-pass)
(user-read-pass value chicken.compiler.user-pass)
(utc-time->seconds value chicken.time.posix)
(values value scheme)
(vector value scheme)
(vector value r4rs)
(vector->list value scheme)
(vector->list value r4rs)
(vector-copy! value chicken.base)
(vector-fill! value scheme)
(vector-fill! value r4rs)
(vector-length value scheme)
(vector-length value r4rs)
(vector-like? value chicken.memory.representation)
(vector-ref value scheme)
(vector-ref value r4rs)
(vector-resize value chicken.base)
(vector-set! value scheme)
(vector-set! value r4rs)
(vector? value scheme)
(vector? value r4rs)
(void value chicken.base)
(warning value chicken.base)
(when syntax chicken.base)
(with-error-output-to-port value chicken.port)
(with-error-output-to-string value chicken.port)
(with-exception-handler value chicken.condition)
(with-exception-handler value srfi-12)
(with-input-from-file value scheme)
(with-input-from-file value r4rs)
(with-input-from-pipe value chicken.process)
(with-input-from-port value chicken.port)
(with-input-from-string value chicken.port)
(with-output-to-file value scheme)
(with-output-to-file value r4rs)
(with-output-to-pipe value chicken.process)
(with-output-to-port value chicken.port)
(with-output-to-string value chicken.port)
(write value scheme)
(write value r4rs)
(write-byte value chicken.io)
(write-char value scheme)
(write-char value r4rs)
(write-line value chicken.io)
(write-string value chicken.io)
(write-u8vector value srfi-4)
(zero? value scheme)
(zero? value r4rs)
