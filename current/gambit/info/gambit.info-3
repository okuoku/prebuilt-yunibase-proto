This is gambit.info, produced by makeinfo version 6.8 from gambit.txi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Gambit: (gambit).		A portable implementation of Scheme.
* gsi: (gambit) interpreter.	Gambit interpreter.
* gsc: (gambit) compiler.	Gambit compiler.
END-INFO-DIR-ENTRY

   This file documents Gambit, a portable implementation of Scheme.

   Copyright (C) 1994-2022 Marc Feeley.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the copyright holder.


File: gambit.info,  Node: Boolean syntax,  Next: Character syntax,  Prev: Readtables,  Up: Lexical syntax and readtables

15.2 Boolean syntax
===================

Booleans are required to be followed by a delimiter (i.e.  '#f64()' is
not the boolean '#f' followed by the number '64' and the empty list).


File: gambit.info,  Node: Character syntax,  Next: String syntax,  Prev: Boolean syntax,  Up: Lexical syntax and readtables

15.3 Character syntax
=====================

Characters are required to be followed by a delimiter (i.e.
'#\spaceballs' is not the character '#\space' followed by the symbol
'balls').  The lexical syntax of characters is extended to allow the
following:

'#\nul'
     Unicode character 0
'#\alarm'
     Unicode character 7
'#\backspace'
     Unicode character 8
'#\tab'
     Unicode character 9
'#\newline'
     Unicode character 10 (newline character)
'#\linefeed'
     Unicode character 10
'#\vtab'
     Unicode character 11
'#\page'
     Unicode character 12
'#\return'
     Unicode character 13
'#\esc'
     Unicode character 27
'#\space'
     Unicode character 32 (space character)
'#\delete'
     Unicode character 127
'#\xHH'
     character encoded in hexadecimal (>= 1 hexadecimal digit)
'#\uHHHH'
     character encoded in hexadecimal (exactly 4 hexadecimal digits)
'#\UHHHHHHHH'
     character encoded in hexadecimal (exactly 8 hexadecimal digits)


File: gambit.info,  Node: String syntax,  Next: Symbol syntax,  Prev: Character syntax,  Up: Lexical syntax and readtables

15.4 String syntax
==================

The lexical syntax of quoted strings is extended to allow the following
escape codes:

'\a'
     Unicode character 7
'\b'
     Unicode character 8
'\t'
     Unicode character 9
'\n'
     Unicode character 10 (newline character)
'\v'
     Unicode character 11
'\f'
     Unicode character 12
'\r'
     Unicode character 13
'\"'
     '"'
'\\'
     '\'
'\|'
     '|'
'\?'
     '?'
'\OOO'
     character encoded in octal (1 to 3 octal digits, first digit must
     be less than 4 when there are 3 octal digits)
'\xHH'
     character encoded in hexadecimal (>= 1 hexadecimal digit)
'\uHHHH'
     character encoded in hexadecimal (exactly 4 hexadecimal digits)
'\UHHHHHHHH'
     character encoded in hexadecimal (exactly 8 hexadecimal digits)
'\<space>'
     Unicode character 32 (space character)
'\<newline><whitespace-except-newline>*'
     This sequence expands to nothing (it is useful for splitting a long
     string literal on multiple lines while respecting proper
     indentation of the source code)

   Gambit also supports a "here string" syntax that is similar to shell
"here documents".  For example:

     > (pretty-print #<<THE-END
     hello
     world
     THE-END
     )
     "hello\nworld"

   The here string starts with the sequence '#<<'.  The part of the line
after the '#<<' up to and including the newline character is the key.
The first line afterward that matches the key marks the end of the here
string.  The string contains all the characters between the start key
and the end key, with the exception of the newline character before the
end key.


File: gambit.info,  Node: Symbol syntax,  Next: Keyword syntax,  Prev: String syntax,  Up: Lexical syntax and readtables

15.5 Symbol syntax
==================

The lexical syntax of symbols is extended to allow a leading and
trailing vertical bar (e.g.  '|a\|b"c:|').  The symbol's name
corresponds verbatim to the characters between the vertical bars except
for escaped characters.  The same escape sequences as for strings are
permitted except that '"' does not need to be escaped and '|' needs to
be escaped.

   For example:

     > (symbol->string '|a\|b"c:|)
     "a|b\"c:"


File: gambit.info,  Node: Keyword syntax,  Next: Box syntax,  Prev: Symbol syntax,  Up: Lexical syntax and readtables

15.6 Keyword syntax
===================

The lexical syntax of keywords is like symbols, but with a colon at the
end (note that this can be changed to a leading colon by setting the
'keywords-allowed?' field of the readtable to the symbol 'prefix').  A
colon by itself is not a keyword, it is a symbol.  Vertical bars can be
used like symbols but the colon must be outside the vertical bars.  Note
that the string returned by the 'keyword->string' procedure does not
include the colon.

   For example:

     > (keyword->string 'foo:)
     "foo"
     > (map keyword? '(|ab()cd:| |ab()cd|: : ||:))
     (#f #t #f #t)


File: gambit.info,  Node: Box syntax,  Next: Number syntax,  Prev: Keyword syntax,  Up: Lexical syntax and readtables

15.7 Box syntax
===============

The lexical syntax of boxes is '#&OBJ' where OBJ is the content of the
box.

   For example:

     > (list '#&"hello" '#&123)
     (#&"hello" #&123)
     > (box (box (+ 10 20)))
     #&#&30


File: gambit.info,  Node: Number syntax,  Next: Homogeneous vector syntax,  Prev: Box syntax,  Up: Lexical syntax and readtables

15.8 Number syntax
==================

The lexical syntax of the special inexact real numbers is as follows:

'+inf.0'
     positive infinity
'-inf.0'
     negative infinity
'+nan.0'
     "not a number"
'-0.'
     negative zero ('0.' is the positive zero)


File: gambit.info,  Node: Homogeneous vector syntax,  Next: Special #! syntax,  Prev: Number syntax,  Up: Lexical syntax and readtables

15.9 Homogeneous vector syntax
==============================

Homogeneous vectors are vectors containing raw numbers of the same type
(signed or unsigned exact integers or inexact reals).  There are 10
types of homogeneous vectors: 's8vector' (vector of 8 bit signed
integers), 'u8vector' (vector of 8 bit unsigned integers), 's16vector'
(vector of 16 bit signed integers), 'u16vector' (vector of 16 bit
unsigned integers), 's32vector' (vector of 32 bit signed integers),
'u32vector' (vector of 32 bit unsigned integers), 's64vector' (vector of
64 bit signed integers), 'u64vector' (vector of 64 bit unsigned
integers), 'f32vector' (vector of 32 bit floating point numbers), and
'f64vector' (vector of 64 bit floating point numbers).

   The external representation of homogeneous vectors is similar to
normal vectors but with the '#(' prefix replaced respectively with
'#s8(', '#u8(', '#s16(', '#u16(', '#s32(', '#u32(', '#s64(', '#u64(',
'#f32(', and '#f64('.

   The elements of the integer homogeneous vectors must be exact
integers fitting in the given precision.  The elements of the floating
point homogeneous vectors must be inexact reals.


File: gambit.info,  Node: Special #! syntax,  Next: Multiline comment syntax,  Prev: Homogeneous vector syntax,  Up: Lexical syntax and readtables

15.10 Special '#!' syntax
=========================

The lexical syntax of the special '#!' objects is as follows:

'#!eof'
     end-of-file object
'#!void'
     void object
'#!optional'
     optional object
'#!rest'
     rest object
'#!key'
     key object


File: gambit.info,  Node: Multiline comment syntax,  Next: Scheme infix syntax extension,  Prev: Special #! syntax,  Up: Lexical syntax and readtables

15.11 Multiline comment syntax
==============================

Multiline comments are delimited by the tokens '#|' and '|#'.  These
comments can be nested.


File: gambit.info,  Node: Scheme infix syntax extension,  Prev: Multiline comment syntax,  Up: Lexical syntax and readtables

15.12 Scheme infix syntax extension
===================================

The reader supports an infix syntax extension which is called SIX
(Scheme Infix eXtension).  This extension is both supported by the
'read' procedure and in program source code.

   The backslash character is a delimiter that marks the beginning of a
single datum expressed in the infix syntax (the details are given
below).  One way to think about it is that the backslash character
escapes the prefix syntax temporarily to use the infix syntax.  For
example a three element list could be written as '(X \Y Z)', the
elements X and Z are expressed using the normal prefix syntax and Y is
expressed using the infix syntax.

   When the reader encounters an infix datum, it constructs a syntax
tree for that particular datum.  Each node of this tree is represented
with a list whose first element is a symbol indicating the type of node.
For example, '(six.identifier abc)' is the representation of the infix
identifier 'abc' and '(six.index (six.identifier abc) (six.identifier
i))' is the representation of the infix datum 'abc[i];'.  The reader
will return this representation wrapped with a '(six.infix ...)' form.

15.12.1 SIX grammar
-------------------

The SIX grammar is given below.  On the left hand side are the
production rules.  On the right hand side is the datum that is
constructed by the reader.  The notation $I denotes the datum that is
constructed by the reader for the Ith part of the production rule.

   In this grammar most statements end with a semicolon.  When the
<infix datum> is immediately following the backslash character that
indicates the start of an infix datum, the ending semicolon is optional
(a semicolon is automatically inserted when the datum could be complete
and a whitespace or inappropriate character is encountered such as a
closing parenthesis).  For example '(f \2*n (list) \5)' is equivalent to
'(f \2*n; (list) \5;)'.

<infix datum> ::=
    <stat>                                  $1
                                            
<stat> ::=
    <if stat>                               $1
  | <for stat>                              $1
  | <while stat>                            $1
  | <do stat>                               $1
  | <switch stat>                           $1
  | <case stat>                             $1
  | <break stat>                            $1
  | <continue stat>                         $1
  | <label stat>                            $1
  | <goto stat>                             $1
  | <return stat>                           $1
  | <import stat>                           $1
  | <from stat>                             $1
  | <expression stat>                       $1
  | <procedure definition>                  $1
  | <variable definition> ';'               $1
  | <clause stat>                           $1
  | <compound stat>                         $1
  | ';'                                     '(six.compound)'
                                            
<if stat> ::=
    'if' '(' <pexpr> ')' <stat>             '(six.if $3 $5)'
  | 'if' '(' <pexpr> ')' <stat> 'else'      '(six.if $3 $5 $7)'
<stat>                                      
<for stat> ::=
    'for' '(' <stat> <oexpr> ';' <oexpr>    '(six.for $3 $4 $6 $8)'
')' <stat>                                  
<while stat> ::=
    'while' '(' <pexpr> ')' <stat>          '(six.while $3 $5)'
                                            
<do stat> ::=
    'do' <stat> 'while' '(' <pexpr> ')'     '(six.do-while $2 $5)'
';'                                         
<switch stat> ::=
    'switch' '(' <pexpr> ')' <stat>         '(six.switch $3 $5)'
                                            
<case stat> ::=
    'case' <expr> ':' <stat>                '(six.case $2 $4)'
                                            
<break stat> ::=
    'break' ';'                             '(six.break)'
                                            
<continue stat> ::=
    'continue' ';'                          '(six.continue)'
                                            
<label stat> ::=
    <identifier> ':' <stat>                 '(six.label $1 $3)'
                                            
<goto stat> ::=
    'goto' <expr> ';'                       '(six.goto $2)'
                                            
<return stat> ::=
    'return' ';'                            '(six.return)'
  | 'return' <expr> ';'                     '(six.return $2)'
                                            
<import stat> ::=
    'import' <nonempty import clause        '(six.import $2...)'
list> ';'                                   
<from stat> ::=
    'from' <expr> 'import' <nonempty        '(six.from-import $2
import clause list> ';'                     $4...)'
    'from' <expr> 'import' '*' ';'          '(six.from-import-* $2)'
                                            
<import clause> ::=
    <expr1> 'as' <expr2>                    '(six.xasy $1 $3)'
  | <expr1>                                 $1
                                            
<import clause list> ::=
    <nonempty import clause list>           '($1...)'
  |                                         '()'
                                            
<nonempty import clause list> ::=
    <import clause>                         '($1)'
  | <import clause> ',' <nonempty import    '($1 $3...)'
clause list>                                
<expression stat> ::=
    <expr> ';'                              $1
                                            
<clause stat> ::=
    <expr> '.'                              '(six.clause $1)'
                                            
<pexpr> ::=
    <procedure definition>                  $1
  | <variable definition>                   $1
  | <expr>                                  $1
                                            
<procedure definition> ::=
    <type> <id-or-prefix> '('               '(six.define-procedure $2
<parameters> ')' <body>                     (six.procedure $1 $4 $6))'
  | 'function' <id-or-prefix> '('           '(six.define-procedure $2
<parameters> ')' <body>                     (six.procedure #f $4 $6))'
                                            
<variable definition> ::=
    <type> <id-or-prefix> <dimensions>      '(six.define-variable $2 $1
<iexpr>                                     $3 $4)'
                                            
<iexpr> ::=
    '=' <expr>                              $2
  |                                         '#f'
                                            
<dimensions> ::=
  | '[' <expr> ']' <dimensions>             '($2 . $4)'
  |                                         '()'
                                            
<oexpr> ::=
    <expr>                                  $1
  |                                         '#f'
                                            
<expr> ::=
    <expr22>                                $1
                                            
<expr22> ::=
    <expr21> ':-' <expr22>                  '(six.x:-y $1 $3)'
  | <expr21>                                $1
                                            
<expr21> ::=
    <expr21> ',' <expr20>                   '(|six.x,y| $1 $3)'
  | <expr20>                                $1
                                            
<expr20> ::=
    'yield' <expr20>                        '(six.yieldx $2)'
  | <expr19>                                $1
                                            
<expr19> ::=
    <expr18> ':=' <expr19>                  '(six.x:=y $1 $3)'
  | <expr18>                                $1
                                            
<expr18> ::=
    <expr17> '%=' <expr18>                  '(six.x%=y $1 $3)'
  | <expr17> '&=' <expr18>                  '(six.x&=y $1 $3)'
  | <expr17> '**=' <expr18>                 '(six.x**=y $1 $3)'
  | <expr17> '*=' <expr18>                  '(six.x*=y $1 $3)'
  | <expr17> '@=' <expr18>                  '(six.x@=y $1 $3)'
  | <expr17> '+=' <expr18>                  '(six.x+=y $1 $3)'
  | <expr17> '-=' <expr18>                  '(six.x-=y $1 $3)'
  | <expr17> '//=' <expr18>                 '(six.x//=y $1 $3)'
  | <expr17> '/=' <expr18>                  '(six.x/=y $1 $3)'
  | <expr17> '<<=' <expr18>                 '(six.x<<=y $1 $3)'
  | <expr17> '=' <expr18>                   '(six.x=y $1 $3)'
  | <expr17> '>>>=' <expr18>                '(six.x>>>=y $1 $3)'
  | <expr17> '>>=' <expr18>                 '(six.x>>=y $1 $3)'
  | <expr17> '^=' <expr18>                  '(six.x^=y $1 $3)'
  | <expr17> '|=' <expr18>                  '(|six.x\|=y| $1 $3)'
  | <expr17>                                $1
                                            
<expr17> ::=
    <expr16> ':' <expr17>                   '(six.x:y $1 $3)'
  | <expr16>                                $1
                                            
<expr16> ::=
    <expr15> '?'  <expr> ':' <expr16>       '(six.x?y:z $1 $3 $5)'
  | <expr15>                                $1
                                            
<expr15> ::=
    <expr15> 'or' <expr14>                  '(six.xory $1 $3)'
  | <expr14>                                $1
                                            
<expr14> ::=
    <expr14> 'and' <expr13>                 '(six.xandy $1 $3)'
  | <expr13>                                $1
                                            
<expr13> ::=
    'not' <expr13>                          '(six.notx $1)'
  | <expr12>                                $1
                                            
<expr12> ::=
    <expr12> '||' <expr11>                  '(|six.x\|\|y| $1 $3)'
  | <expr11>                                $1
                                            
<expr11> ::=
    <expr11> '&&' <expr10>                  '(six.x&&y $1 $3)'
  | <expr10>                                $1
                                            
<expr10> ::=
    <expr10> '|' <expr9>                    '(|six.x\|y| $1 $3)'
  | <expr9>                                 $1
                                            
<expr9> ::=
    <expr9> '^' <expr8>                     '(six.x^y $1 $3)'
  | <expr8>                                 $1
                                            
<expr8> ::=
    <expr8> '&' <expr7>                     '(six.x&y $1 $3)'
  | <expr7>                                 $1
                                            
<expr7> ::=
    <expr7> '!=' <expr6>                    '(six.x!=y $1 $3)'
  | <expr7> '==' <expr6>                    '(six.x==y $1 $3)'
  | <expr7> '!==' <expr6>                   '(six.x!==y $1 $3)'
  | <expr7> '===' <expr6>                   '(six.x===y $1 $3)'
  | <expr6>                                 $1
                                            
<expr6> ::=
    <expr6> '<' <expr5>                     '(six.x<y $1 $3)'
  | <expr6> '<=' <expr5>                    '(six.x<=y $1 $3)'
  | <expr6> '>' <expr5>                     '(six.x>y $1 $3)'
  | <expr6> '>=' <expr5>                    '(six.x>=y $1 $3)'
  | <expr6> 'in' <expr5>                    '(six.xiny $1 $3)'
  | <expr6> 'is' <expr5>                    '(six.xisy $1 $3)'
  | <expr6> 'instanceof' <expr5>            '(six.xinstanceofy $1 $3)'
  | <expr5>                                 $1
                                            
<expr5> ::=
    <expr5> '<<' <expr4>                    '(six.x<<y $1 $3)'
  | <expr5> '>>' <expr4>                    '(six.x>>y $1 $3)'
  | <expr5> '>>>' <expr4>                   '(six.x>>>y $1 $3)'
  | <expr4>                                 $1
                                            
<expr4> ::=
    <expr4> '+' <expr3>                     '(six.x+y $1 $3)'
  | <expr4> '-' <expr3>                     '(six.x-y $1 $3)'
  | <expr3>                                 $1
                                            
<expr3> ::=
    <expr3> '%' <expr2>                     '(six.x%y $1 $3)'
  | <expr3> '*' <expr2>                     '(six.x*y $1 $3)'
  | <expr3> '@' <expr2>                     '(six.x@y $1 $3)'
  | <expr3> '/' <expr2>                     '(six.x/y $1 $3)'
  | <expr3> '//' <expr2>                    '(six.x//y $1 $3)'
  | <expr2>                                 $1
                                            
<expr2> ::=
    '&' <expr2>                             '(six.&x $2)'
  | '+' <expr2>                             '(six.+x $2)'
  | '-' <expr2>                             '(six.-x $2)'
  | '*' <expr2>                             '(six.*x $2)'
  | '**' <expr2>                            '(six.**x $2)'
  | '!'  <expr2>                            '(six.!x $2)'
  | '!'                                     '(six.!)'
  | '++' <expr2>                            '(six.++x $2)'
  | '--' <expr2>                            '(six.--x $2)'
  | '~' <expr2>                             '(six.~x $2)'
  | <expr2> '**' <expr1>                    '(six.x**y $1 $3)'
  | 'await' <expr2>                         '(six.awaitx $2)'
  | 'typeof' <expr2>                        '(six.typeofx $2)'
  | <expr1>                                 $1
                                            
<expr1> ::=
    <expr1> '++'                            '(six.x++ $1)'
  | <expr1> '--'                            '(six.x-- $1)'
  | <expr1> '(' <arguments> ')'             '(six.call $1 . $3)'
  | <expr1> '[' <expr> ']'                  '(six.index $1 $3)'
  | <expr1> '->' <id-or-prefix>             '(six.arrow $1 $3)'
  | <expr1> '.'  <id-or-prefix>             '(six.dot $1 $3)'
  | <expr0>                                 $1
                                            
<expr0> ::=
    <id-or-prefix>                          $1
  | <string>                                '(six.literal $1)'
  | <char>                                  '(six.literal $1)'
  | <number>                                '(six.literal $1)'
  | '(' <expr> ')'                          $2
  | '(' <block stat> ')'                    $2
  | <datum-starting-with-#-or-backquote>    $1
  | '[' <elements> ']'                      $2
  | <type> '(' <parameters> ')' <body>      '(six.procedure $1 $3 $5)'
  | 'function' '(' <parameters> ')'         '(six.procedure #f $3 $5)'
<body>
  | 'new' <id-or-prefix> '(' <arguments>    '(six.new $2 . $4)'
')'
  | 'async' <expr0>                         '(six.asyncx $2)'
                                            
<block stat> ::=
    '{' <stat list> '}'                     '(six.compound . $2)'
                                            
<body> ::=
    '{' <stat list> '}'                     '(six.procedure-body . $2)'
                                            
<stat list> ::=
    <stat> <stat list>                      '($1 . $2)'
  |                                         '()'
                                            
<parameters> ::=
    <nonempty parameters>                   $1
  |                                         '()'
                                            
<nonempty parameters> ::=
    <parameter> ',' <nonempty parameters>   '($1 . $3)'
  | <parameter>                             '($1)'
                                            
<parameter> ::=
    <type> <id-or-prefix>                   '($2 $1)'
                                            
<arguments> ::=
    <nonempty arguments>                    $1
  |                                         '()'
                                            
<nonempty arguments> ::=
    <expr> ',' <nonempty arguments>         '($1 . $3)'
  | <expr>                                  '($1)'
                                            
<elements> ::=
    <nonempty elements>                     $1
  |                                         '(six.null)'
                                            
<nonempty elements> ::=
    <expr>                                  '(six.list $1 (six.null))'
  | <expr> ',' <nonempty elements>          '(six.list $1 $3)'
  | <expr> '|' <expr>                       '(six.cons $1 $3)'
                                            
<id-or-prefix> ::=
    <identifier>                            '(six.identifier $1)'
  | '\' <datum>                             $2
                                            
<type> ::=
    'scmobj'                                'scmobj'
                                            

15.12.2 SIX semantics
---------------------

The semantics of SIX depends on the definition of the 'six.XXX'
identifiers (as procedures and macros).  Many of these identifiers are
predefined macros which give SIX a semantics that is close to C's while
also borrowing some semantics from JavaScript and Python (such as '==='
'in', '**', '//').  The programmer may override these definitions to
change the semantics either globally or locally.  For example, 'six.x^y'
is a predefined macro that expands '(six.x^y x y)' into '(bitwise-xor x
y)'.  If the programmer prefers the '^' operator to express
exponentiation in a specific procedure, then in that procedure 'six.x^y'
can be redefined as a macro that expands '(six.x^y x y)' into '(expt x
y)'.  Note that the associativity and precedence of operators cannot be
changed as that is a syntactic issue, so this will give a left
associative exponentiation operator with an unusual precedence.

   Note that some identifiers do not have a predefined semantics and are
undefined identifiers, for example: 'six.label', 'six.goto',
'six.switch', 'six.case', 'six.break', 'six.continue', 'six.return',
'six.clause', 'six.x:-y', 'six.@', 'six.@=', 'six.import',
'six.from-import', 'six.from-import-*', and 'six.!'.

   Here is an example showing some of the predefined syntax and
semantics of SIX:

     > (list (+ 1 2) \3+4 (+ 5 6))
     (3 7 11)
     > \[ 1+2, \(+ 3 4), 5+6 ]
     (3 7 11)
     > (map (lambda (x) \(x*x-1)/log(x+1)) '(1 2 3 4))
     (0 2.730717679880512 5.7707801635558535 9.320024018394177)
     > (map \function (x) { return (x*x-1)/log(x+1); } '(1 2 3 4))
     (0. 2.730717679880512 5.7707801635558535 9.320024018394177)
     > \map(function (x) { return (x*x-1)/log(x+1); }, [1, 2, 3, 4])
     (0. 2.730717679880512 5.7707801635558535 9.320024018394177)
     > \scmobj n=expt(10,5)
     > n
     100000
     > \scmobj t[3][10]=88
     > \t[0][9]=t[2][1]=11
     11
     > t
     #(#(88 88 88 88 88 88 88 88 88 11)
       #(88 88 88 88 88 88 88 88 88 88)
       #(88 11 88 88 88 88 88 88 88 88))
     > \scmobj radix=new parameter(10)
     > \radix(2)
     > \radix()
     2
     > \for (scmobj i=0; i<5; i++) pp(1<<i*8)
     1
     256
     65536
     16777216
     4294967296
     > \function \make-adder(x) { return function (y) { x+y; }; }
     > \map(new adder(100), [1,2,3,4])
     (101 102 103 104)
     > (map (make-adder 100) (list 1 2 3 4))
     (101 102 103 104)


File: gambit.info,  Node: C-interface,  Next: System limitations,  Prev: Lexical syntax and readtables,  Up: Top

16 C-interface
**************

The Gambit Scheme system offers a mechanism for interfacing Scheme code
and C code called the "C-interface".  A Scheme program indicates which C
functions it needs to have access to and which Scheme procedures can be
called from C, and the C interface automatically constructs the
corresponding Scheme procedures and C functions.  The conversions needed
to transform data from the Scheme representation to the C representation
(and back), are generated automatically in accordance with the argument
and result types of the C function or Scheme procedure.

   The C-interface places some restrictions on the types of data that
can be exchanged between C and Scheme.  The mapping of data types
between C and Scheme is discussed in the next section.  The remaining
sections of this chapter describe each special form of the C-interface.

* Menu:

* mapping of types::                The mapping of types between C and Scheme
* c-declare::                       The 'c-declare' special form
* c-initialize::                    The 'c-initialize' special form
* c-lambda::                        The 'c-lambda' special form
* c-define::                        The 'c-define' special form
* c-define-type::                   The 'c-define-type' special form
* continuations::                   Continuations, the C-interface and threads


File: gambit.info,  Node: mapping of types,  Next: c-declare,  Prev: C-interface,  Up: C-interface

16.1 The mapping of types between C and Scheme
==============================================

Scheme and C do not provide the same set of built-in data types so it is
important to understand which Scheme type is compatible with which C
type and how values get mapped from one environment to the other.  To
improve compatibility a new type is added to Scheme, the 'foreign'
object type, and the following data types are added to C:

'scheme-object'
     denotes the universal type of Scheme objects (type '___SCMOBJ'
     defined in 'gambit.h')
'bool'
     denotes the C++ 'bool' type or the C 'int' type (type '___BOOL'
     defined in 'gambit.h')
'int8'
     8 bit signed integer (type '___S8' defined in 'gambit.h')
'unsigned-int8'
     8 bit unsigned integer (type '___U8' defined in 'gambit.h')
'int16'
     16 bit signed integer (type '___S16' defined in 'gambit.h')
'unsigned-int16'
     16 bit unsigned integer (type '___U16' defined in 'gambit.h')
'int32'
     32 bit signed integer (type '___S32' defined in 'gambit.h')
'unsigned-int32'
     32 bit unsigned integer (type '___U32' defined in 'gambit.h')
'int64'
     64 bit signed integer (type '___S64' defined in 'gambit.h')
'unsigned-int64'
     64 bit unsigned integer (type '___U64' defined in 'gambit.h')
'float32'
     32 bit floating point number (type '___F32' defined in 'gambit.h')
'float64'
     64 bit floating point number (type '___F64' defined in 'gambit.h')
'ISO-8859-1'
     denotes ISO-8859-1 encoded characters (8 bit unsigned integer, type
     '___ISO_8859_1' defined in 'gambit.h')
'UCS-2'
     denotes UCS-2 encoded characters (16 bit unsigned integer, type
     '___UCS_2' defined in 'gambit.h')
'UCS-4'
     denotes UCS-4 encoded characters (32 bit unsigned integer, type
     '___UCS_4' defined in 'gambit.h')
'char-string'
     denotes the C 'char*' type when used as a null terminated string
'nonnull-char-string'
     denotes the nonnull C 'char*' type when used as a null terminated
     string
'nonnull-char-string-list'
     denotes an array of nonnull C 'char*' terminated with a null
     pointer
'ISO-8859-1-string'
     denotes ISO-8859-1 encoded strings (null terminated string of 8 bit
     unsigned integers, i.e.  '___ISO_8859_1*')
'nonnull-ISO-8859-1-string'
     denotes nonnull ISO-8859-1 encoded strings (null terminated string
     of 8 bit unsigned integers, i.e.  '___ISO_8859_1*')
'nonnull-ISO-8859-1-stringlist'
     denotes an array of nonnull ISO-8859-1 encoded strings terminated
     with a null pointer
'UTF-8-string'
     denotes UTF-8 encoded strings (null terminated string of 'char',
     i.e.  'char*')
'nonnull-UTF-8-string'
     denotes nonnull UTF-8 encoded strings (null terminated string of
     'char', i.e.  'char*')
'nonnull-UTF-8-string-list'
     denotes an array of nonnull UTF-8 encoded strings terminated with a
     null pointer
'UTF-16-string'
     denotes UTF-16 encoded strings (null terminated string of 'char',
     i.e.  'char*')
'nonnull-UTF-16-string'
     denotes nonnull UTF-16 encoded strings (null terminated string of
     'char', i.e.  'char*')
'nonnull-UTF-16-string-list'
     denotes an array of nonnull UTF-16 encoded strings terminated with
     a null pointer
'UCS-2-string'
     denotes UCS-2 encoded strings (null terminated string of 16 bit
     unsigned integers, i.e.  '___UCS_2*')
'nonnull-UCS-2-string'
     denotes nonnull UCS-2 encoded strings (null terminated string of 16
     bit unsigned integers, i.e.  '___UCS_2*')
'nonnull-UCS-2-string-list'
     denotes an array of nonnull UCS-2 encoded strings terminated with a
     null pointer
'UCS-4-string'
     denotes UCS-4 encoded strings (null terminated string of 32 bit
     unsigned integers, i.e.  '___UCS_4*')
'nonnull-UCS-4-string'
     denotes nonnull UCS-4 encoded strings (null terminated string of 32
     bit unsigned integers, i.e.  '___UCS_4*')
'nonnull-UCS-4-string-list'
     denotes an array of nonnull UCS-4 encoded strings terminated with a
     null pointer
'wchar_t-string'
     denotes 'wchar_t' encoded strings (null terminated string of
     'wchar_t', i.e.  'wchar_t*')
'nonnull-wchar_t-string'
     denotes nonnull 'wchar_t' encoded strings (null terminated string
     of 'wchar_t', i.e.  'wchar_t*')
'nonnull-wchar_t-string-list'
     denotes an array of nonnull 'wchar_t' encoded strings terminated
     with a null pointer

   To specify a particular C type inside the 'c-lambda', 'c-define' and
'c-define-type' forms, the following "Scheme notation" is used:

'Scheme notation'
     C type
'void'
     'void'
'bool'
     'bool'
'char'
     'char' (may be signed or unsigned depending on the C compiler)
'signed-char'
     'signed char'
'unsigned-char'
     'unsigned char'
'ISO-8859-1'
     'ISO-8859-1'
'UCS-2'
     'UCS-2'
'UCS-4'
     'UCS-4'
'wchar_t'
     'wchar_t'
'size_t'
     'size_t' (type '___SIZE_T' defined in 'gambit.h')
'ssize_t'
     'ssize_t' (type '___SSIZE_T' defined in 'gambit.h')
'ptrdiff_t'
     'ptrdiff_t' (type '___PTRDIFF_T' defined in 'gambit.h')
'short'
     'short'
'unsigned-short'
     'unsigned short'
'int'
     'int'
'unsigned-int'
     'unsigned int'
'long'
     'long'
'unsigned-long'
     'unsigned long'
'long-long'
     'long long'
'unsigned-long-long'
     'unsigned long long'
'float'
     'float'
'double'
     'double'
'int8'
     'int8'
'unsigned-int8'
     'unsigned-int8'
'int16'
     'int16'
'unsigned-int16'
     'unsigned-int16'
'int32'
     'int32'
'unsigned-int32'
     'unsigned-int32'
'int64'
     'int64'
'unsigned-int64'
     'unsigned-int64'
'float32'
     'float32'
'float64'
     'float64'
'(struct "C-STRUCT-ID" [TAGS [RELEASE-FUNCTION]])'
     'struct C-STRUCT-ID' (where C-STRUCT-ID is the name of a C
     structure; see below for the meaning of TAGS and RELEASE-FUNCTION)
'(union "C-UNION-ID" [TAGS [RELEASE-FUNCTION]])'
     'union C-UNION-ID' (where C-UNION-ID is the name of a C union; see
     below for the meaning of TAGS and RELEASE-FUNCTION)
'(type "C-TYPE-ID" [TAGS [RELEASE-FUNCTION]])'
     'C-TYPE-ID' (where C-TYPE-ID is an identifier naming a C type; see
     below for the meaning of TAGS and RELEASE-FUNCTION)
'(pointer TYPE [TAGS [RELEASE-FUNCTION]])'
     'T*' (where T is the C equivalent of TYPE which must be the Scheme
     notation of a C type; see below for the meaning of TAGS and
     RELEASE-FUNCTION)
'(nonnull-pointer TYPE [TAGS [RELEASE-FUNCTION]])'
     same as '(pointer TYPE [TAGS [RELEASE-FUNCTION]])' except the
     'NULL' pointer is not allowed
'(function (TYPE1...) RESULT-TYPE)'
     function with the given argument types and result type
'(nonnull-function (TYPE1...) RESULT-TYPE)'
     same as '(function (TYPE1...) RESULT-TYPE)' except the 'NULL'
     pointer is not allowed
'char-string'
     'char-string'
'nonnull-char-string'
     'nonnull-char-string'
'nonnull-char-string-list'
     'nonnull-char-string-list'
'ISO-8859-1-string'
     'ISO-8859-1-string'
'nonnull-ISO-8859-1-string'
     'nonnull-ISO-8859-1-string'
'nonnull-ISO-8859-1-string-list'
     'nonnull-ISO-8859-1-string-list'
'UTF-8-string'
     'UTF-8-string'
'nonnull-UTF-8-string'
     'nonnull-UTF-8-string'
'nonnull-UTF-8-string-list'
     'nonnull-UTF-8-string-list'
'UTF-16-string'
     'UTF-16-string'
'nonnull-UTF-16-string'
     'nonnull-UTF-16-string'
'nonnull-UTF-16-string-list'
     'nonnull-UTF-16-string-list'
'UCS-2-string'
     'UCS-2-string'
'nonnull-UCS-2-string'
     'nonnull-UCS-2-string'
'nonnull-UCS-2-string-list'
     'nonnull-UCS-2-string-list'
'UCS-4-string'
     'UCS-4-string'
'nonnull-UCS-4-string'
     'nonnull-UCS-4-string'
'nonnull-UCS-4-string-list'
     'nonnull-UCS-4-string-list'
'wchar_t-string'
     'wchar_t-string'
'nonnull-wchar_t-string'
     'nonnull-wchar_t-string'
'nonnull-wchar_t-string-list'
     'nonnull-wchar_t-string-list'
'scheme-object'
     'scheme-object'
'NAME'
     appropriate translation of NAME (where NAME is a C type defined
     with 'c-define-type')
'"C-TYPE-ID"'
     C-TYPE-ID (this form is equivalent to '(type "C-TYPE-ID")')

   The 'struct', 'union', 'type', 'pointer' and 'nonnull-pointer' types
are "foreign types" and they are represented on the Scheme side as
"foreign objects".  A foreign object is internally represented as a
pointer.  This internal pointer is identical to the C pointer being
represented in the case of the 'pointer' and 'nonnull-pointer' types.

   In the case of the 'struct', 'union' and 'type' types, the internal
pointer points to a copy of the C data type being represented.  When an
instance of one of these types is converted from C to Scheme, a block of
memory is allocated from the C heap and initialized with the instance
and then a foreign object is allocated from the Scheme heap and
initialized with the pointer to this copy.  This approach may appear
overly complex, but it allows the conversion of C++ classes that do not
have a zero parameter constructor or an assignment method (i.e.  when
compiling with a C++ compiler an instance is copied using 'new TYPE
(INSTANCE)', which calls the copy-constructor of TYPE if it is a class;
TYPE's assignment operator is never used).  Conversion from Scheme to C
simply dereferences the internal pointer (no allocation from the C heap
is performed).  Deallocation of the copy on the C heap is under the
control of the release function attached to the foreign object (see
below).

   The optional TAGS field of foreign type specifications is used for
type checking on the Scheme side.  The TAGS field must be '#f', a symbol
or a non-empty list of symbols.  When it is not specified the TAGS field
defaults to a symbol whose name, as returned by 'symbol->string', is the
C type declaration for that type.  For example the symbol 'char**' is
the default for the type '(pointer (pointer char))'.  A TAGS field that
is a single symbol is equivalent to a list containing only that symbol.
The first symbol in the list of tags is the primary tag.  For example
the primary tag of the type '(pointer char)' is 'char*' and the primary
tag of the type '(pointer char (foo bar))' is 'foo'.

   Type compatibility between two foreign types depends on their tags.
An instance of a foreign type T can be used where a foreign type E is
expected if and only if

   * T's TAGS field is '#f', or

   * E's TAGS field is '#f', or

   * T's primary tag is a member of E's tags.

   For the safest code a TAGS field of '#f' should be used sparingly, as
it completely bypasses type checking.  The external representation of
Scheme foreign objects (used by the 'write' procedure) contains the
primary tag (if the TAGS field is not '#f'), and the hexadecimal address
denoted by the internal pointer, for example '#<char** #2 0x2AAC535C>'.
Note that the hexadecimal address is in C notation, which can be easily
transferred to a C debugger with a "cut-and-paste".

   A RELEASE-FUNCTION can also be specified within a foreign type
specification.  The RELEASE-FUNCTION must be '#f' or a string naming a C
function with a single parameter of type 'void*' (in which the internal
pointer is passed) and with a result of type '___SCMOBJ' (for returning
an error code).  When the RELEASE-FUNCTION is not specified or is '#f' a
default function is constructed by the C-interface.  This default
function does nothing in the case of the 'pointer' and 'nonnull-pointer'
types (deallocation is not the responsibility of the C-interface) and
returns the fixnum '___FIX(___NO_ERR)' to indicate no error.  In the
case of the 'struct', 'union' and 'type' types, the default function
reclaims the copy on the C heap referenced by the internal pointer (when
using a C++ compiler this is done using 'delete
(TYPE*)INTERNAL-POINTER', which calls the destructor of TYPE if it is a
class) and returns '___FIX(___NO_ERR)'.  In many situations the default
RELEASE-FUNCTION will perform the appropriate cleanup for the foreign
type.  However, in certain cases special operations (such as
decrementing a reference count, removing the object from a table, etc)
must be performed.  For such cases a user supplied RELEASE-FUNCTION is
needed.

   The RELEASE-FUNCTION is invoked at most once for any foreign object.
After the RELEASE-FUNCTION is invoked, the foreign object is considered
"released" and can no longer be used in a foreign type conversion.  When
the garbage collector detects that a foreign object is no longer
reachable by the program, it will invoke the RELEASE-FUNCTION if the
foreign object is not yet released.  When there is a need to release the
foreign object promptly, the program can explicitly call
'(foreign-release! OBJ)' which invokes the RELEASE-FUNCTION if the
foreign object is not yet released, and does nothing otherwise.  The
call '(foreign-released? OBJ)' returns a boolean indicating whether the
foreign object OBJ has been released yet or not.  The call
'(foreign-address OBJ)' returns the address denoted by the internal
pointer of foreign object OBJ or 0 if it has been released.  The call
'(foreign? OBJ)' tests that OBJ is a foreign object.  Finally the call
'(foreign-tags OBJ)' returns the list of tags of foreign object OBJ, or
'#f'.

   The following table gives the C types to which each Scheme type can
be converted:

Scheme type
     Allowed target C types
boolean '#f'
     'scheme-object'; 'bool'; 'pointer'; 'function'; 'char-string';
     'ISO-8859-1-string'; 'UTF-8-string'; 'UTF-16-string';
     'UCS-2-string'; 'UCS-4-string'; 'wchar_t-string'
boolean '#t'
     'scheme-object'; 'bool'
character
     'scheme-object'; 'bool'; ['[un]signed'] 'char'; 'ISO-8859-1';
     'UCS-2'; 'UCS-4'; 'wchar_t'
exact integer
     'scheme-object'; 'bool'; ['unsigned-']
     'int8'/'int16'/'int32'/'int64'; ['unsigned'] 'short'/'int'/'long';
     'size_t'/'ssize_t'/'ptrdiff_t'
inexact real
     'scheme-object'; 'bool'; 'float'; 'double'; 'float32'; 'float64'
string
     'scheme-object'; 'bool'; 'char-string'; 'nonnull-char-string';
     'ISO-8859-1-string'; 'nonnull-ISO-8859-1-string'; 'UTF-8-string';
     'nonnull-UTF-8-string'; 'UTF-16-string'; 'nonnull-UTF-16-string';
     'UCS-2-string'; 'nonnull-UCS-2-string'; 'UCS-4-string';
     'nonnull-UCS-4-string'; 'wchar_t-string'; 'nonnull-wchar_t-string'
foreign object
     'scheme-object'; 'bool';
     'struct'/'union'/'type'/'pointer'/'nonnull-pointer' with the
     appropriate tags
vector
     'scheme-object'; 'bool'
symbol
     'scheme-object'; 'bool'
procedure
     'scheme-object'; 'bool'; 'function'; 'nonnull-function'
other objects
     'scheme-object'; 'bool'

   The following table gives the Scheme types to which each C type will
be converted:

C type
     Resulting Scheme type
scheme-object
     the Scheme object encoded
bool
     boolean
['[un]signed'] 'char'; 'ISO-8859-1'; 'UCS-2'; 'UCS-4'; 'wchar_t'
     character
['unsigned-'] 'int8'/'int16'/'int32'/'int64'; ['unsigned'] 'short'/'int'/'long'; 'size_t'/'ssize_t'/'ptrdiff_t'
     exact integer
'float'; 'double'; 'float32'; 'float64'
     inexact real
'char-string'; 'ISO-8859-1-string'; 'UTF-8-string'; 'UTF-16-string'; 'UCS-2-string'; 'UCS-4-string'; 'wchar_t-string'
     string or '#f' if it is equal to 'NULL'
'nonnull-char-string'; 'nonnull-ISO-8859-1-string'; 'nonnull-UTF-8-string'; 'nonnull-UTF-16-string'; 'nonnull-UCS-2-string'; 'nonnull-UCS-4-string'; 'nonnull-wchar_t-string'
     string
'struct'/'union'/'type'/'pointer'/'nonnull-pointer'
     foreign object with the appropriate tags or '#f' in the case of a
     'pointer' equal to 'NULL'
'function'
     procedure or '#f' if it is equal to 'NULL'
'nonnull-function'
     procedure
'void'
     void object

   All Scheme types are compatible with the C types 'scheme-object' and
'bool'.  Conversion to and from the C type 'scheme-object' is the
identity function on the object encoding.  This provides a low-level
mechanism for accessing Scheme's object representation from C (with the
help of the macros in the 'gambit.h' header file).  When a C 'bool' type
is expected, an extended Scheme boolean can be passed ('#f' is converted
to 0 and all other values are converted to 1).

   The Scheme boolean '#f' can be passed to the C environment where a
'char-string', 'ISO-8859-1-string', 'UTF-8-string', 'UTF-16-string',
'UCS-2-string', 'UCS-4-string', 'wchar_t-string', 'pointer' or
'function' type is expected.  In this case, '#f' is converted to the
'NULL' pointer.  C 'bool's are extended booleans so any value different
from 0 represents true.  Thus, a C 'bool' passed to the Scheme
environment is mapped as follows: 0 to '#f' and all other values to
'#t'.

   A Scheme character passed to the C environment where any C character
type is expected is converted to the corresponding character in the C
environment.  An error is signaled if the Scheme character does not fit
in the C character.  Any C character type passed to Scheme is converted
to the corresponding Scheme character.  An error is signaled if the C
character does not fit in the Scheme character.

   A Scheme exact integer passed to the C environment where a C integer
type (other than 'char') is expected is converted to the corresponding
integral value.  An error is signaled if the value falls outside of the
range representable by that integral type.  C integer values passed to
the Scheme environment are mapped to the same Scheme exact integer.  If
the value is outside the fixnum range, a bignum is created.

   A Scheme inexact real passed to the C environment is converted to the
corresponding 'float', 'double', 'float32' or 'float64' value.  C
'float', 'double', 'float32' and 'float64' values passed to the Scheme
environment are mapped to the closest Scheme inexact real.

   Scheme's rational numbers and complex numbers are not compatible with
any C numeric type.

   A Scheme string passed to the C environment where any C string type
is expected is converted to a null terminated string using the
appropriate encoding.  The C string is a fresh copy of the Scheme
string.  If the C string was created for an argument of a 'c-lambda',
the C string will be reclaimed when the 'c-lambda' returns.  If the C
string was created for returning the result of a 'c-define' to C, the
caller is responsible for reclaiming the C string with a call to the
'___release_string' function (see below for an example).  Any C string
type passed to the Scheme environment causes the creation of a fresh
Scheme string containing a copy of the C string (unless the C string is
equal to 'NULL', in which case it is converted to '#f').

   A foreign type passed to the Scheme environment causes the creation
and initialization of a Scheme foreign object with the appropriate tags
(except for the case of a 'pointer' equal to 'NULL' which is converted
to '#f').  A Scheme foreign object can be passed where a foreign type is
expected, on the condition that the tags are compatible and the Scheme
foreign object is not yet released.  The value '#f' is also acceptable
for a 'pointer' type, and is converted to 'NULL'.

   Scheme procedures defined with the 'c-define' special form can be
passed where the 'function' and 'nonnull-function' types are expected.
The value '#f' is also acceptable for a 'function' type, and is
converted to 'NULL'.  No other Scheme procedures are acceptable.
Conversion from the 'function' and 'nonnull-function' types to Scheme
procedures is not currently implemented.


File: gambit.info,  Node: c-declare,  Next: c-initialize,  Prev: mapping of types,  Up: C-interface

16.2 The 'c-declare' special form
=================================

 -- special form: c-declare c-declaration

     Initially, the C file produced by 'gsc' contains only an '#include'
     of 'gambit.h'.  This header file provides a number of macro and
     procedure declarations to access the Scheme object representation.
     The special form 'c-declare' adds c-declaration (which must be a
     string containing the C declarations) to the C file.  This string
     is copied to the C file on a new line so it can start with
     preprocessor directives.  All types of C declarations are allowed
     (including type declarations, variable declarations, function
     declarations, '#include' directives, '#define's, and so on).  These
     declarations are visible to subsequent 'c-declare's,
     'c-initialize's, and 'c-lambda's, and 'c-define's in the same
     module.  The most common use of this special form is to declare the
     external functions that are referenced in 'c-lambda' special forms.
     Such functions must either be declared explicitly or by including a
     header file which contains the appropriate C declarations.

     The 'c-declare' special form does not return a value.  This form
     can only appear where a 'define' form is acceptable.

     For example:

          (c-declare #<<c-declare-end

          #include <stdio.h>

          extern char *getlogin ();

          #ifdef sparc
          char *host = "sparc";
          #else
          char *host = "unknown";
          #endif

          FILE *tfile;

          c-declare-end
          )


File: gambit.info,  Node: c-initialize,  Next: c-lambda,  Prev: c-declare,  Up: C-interface

16.3 The 'c-initialize' special form
====================================

 -- special form: c-initialize c-code

     Just after the program is loaded and before control is passed to
     the Scheme code, each C file is initialized by calling its
     associated initialization function.  The body of this function is
     normally empty but it can be extended by using the 'c-initialize'
     form.  Each occurrence of the 'c-initialize' form adds code to the
     body of the initialization function in the order of appearance in
     the source file.  c-code must be a string containing the C code to
     execute.  This string is copied to the C file on a new line so it
     can start with preprocessor directives.

     The 'c-initialize' special form does not return a value.  This form
     can only appear where a 'define' form is acceptable.

     For example:

          (c-initialize "tfile = tmpfile ();")


File: gambit.info,  Node: c-lambda,  Next: c-define,  Prev: c-initialize,  Up: C-interface

16.4 The 'c-lambda' special form
================================

 -- special form: c-lambda (type1...) result-type c-name-or-code

     The 'c-lambda' special form makes it possible to create a Scheme
     procedure that will act as a representative of some C function or C
     code sequence.  The first subform is a list containing the type of
     each argument.  The type of the function's result is given next.
     Finally, the last subform is a string that either contains the name
     of the C function to call or some sequence of C code to execute.
     Variadic C functions are not supported.  The resulting Scheme
     procedure takes exactly the number of arguments specified and
     delivers them in the same order to the C function.  When the Scheme
     procedure is called, the arguments will be converted to their C
     representation and then the C function will be called.  The result
     returned by the C function will be converted to its Scheme
     representation and this value will be returned from the Scheme
     procedure call.  An error will be signaled if some conversion is
     not possible.  The temporary memory allocated from the C heap for
     the conversion of the arguments and result will be reclaimed
     whether there is an error or not.

     When c-name-or-code is not a valid C identifier, it is treated as
     an arbitrary piece of C code.  Within the C code the variables
     '___arg1', '___arg2', etc.  can be referenced to access the
     converted arguments.  Note that the C 'return' statement can't be
     used to return from the procedure.  Instead, the '___return' macro
     must be used.  A procedure whose result-type is not 'void' must
     pass the procedure's result as the single argument to the
     '___return' macro, for example '___return(123);' to return the
     value 123.  When result-type is 'void', the '___return' macro must
     be called without a parameter list, for example '___return;'.

     The C code is copied to the C file on a new line so it can start
     with preprocessor directives.  Moreover the C code is always placed
     at the head of a compound statement whose lifetime encloses the C
     to Scheme conversion of the procedure's result.  Consequently,
     temporary storage (strings in particular) declared at the head of
     the C code can be returned with the '___return' macro.

     In the c-name-or-code, the macro '___AT_END' may be defined as the
     piece of C code to execute before control is returned to Scheme but
     after the procedure's result is converted to its Scheme
     representation.  This is mainly useful to deallocate temporary
     storage contained in the result.

     When passed to the Scheme environment, the C 'void' type is
     converted to the void object.

     For example:

          (define fopen
            (c-lambda (nonnull-char-string nonnull-char-string)
                      (pointer "FILE")
             "fopen"))

          (define fgetc
            (c-lambda ((pointer "FILE"))
                      int
             "fgetc"))

          (let ((f (fopen "datafile" "r")))
            (if f (write (fgetc f))))

          (define char-code
            (c-lambda (char) int "___return(___arg1);"))

          (define host
            ((c-lambda () nonnull-char-string "___return(host);")))

          (define stdin
            ((c-lambda () (pointer "FILE") "___return(stdin);")))

          ((c-lambda () void
          #<<c-lambda-end
            printf( "hello\n" );
            printf( "world\n" );
          c-lambda-end
          ))

          (define pack-1-char
            (c-lambda (char)
                      nonnull-char-string
          #<<c-lambda-end
             char *s = (char *)malloc (2);
             if (s != NULL) { s[0] = ___arg1; s[1] = 0; }
             ___return(s);
             #define ___AT_END if (s != NULL) free (s);
          c-lambda-end
          ))

          (define pack-2-chars
            (c-lambda (char char)
                      nonnull-char-string
          #<<c-lambda-end
             char s[3];
             s[0] = ___arg1;
             s[1] = ___arg2;
             s[2] = 0;
             ___return(s);
          c-lambda-end
          ))


File: gambit.info,  Node: c-define,  Next: c-define-type,  Prev: c-lambda,  Up: C-interface

16.5 The 'c-define' special form
================================

 -- special form: c-define (variable define-formals) (type1...)
          result-type c-name scope body

     The 'c-define' special form makes it possible to create a C
     function that will act as a representative of some Scheme
     procedure.  A C function named c-name as well as a Scheme procedure
     bound to the variable variable are defined.  The parameters of the
     Scheme procedure are define-formals and its body is at the end of
     the form.  The type of each argument of the C function, its result
     type and c-name (which must be a string) are specified after the
     parameter specification of the Scheme procedure.  When the C
     function c-name is called from C, its arguments are converted to
     their Scheme representation and passed to the Scheme procedure.
     The result of the Scheme procedure is then converted to its C
     representation and the C function c-name returns it to its caller.

     The scope of the C function can be changed with the scope
     parameter, which must be a string.  This string is placed
     immediately before the declaration of the C function.  So if scope
     is the string '"static"', the scope of c-name is local to the
     module it is in, whereas if scope is the empty string, c-name is
     visible from other modules.

     The 'c-define' special form does not return a value.  It can only
     appear at top level.

     For example:

          (c-define (proc x #!optional (y x) #!rest z) (int int char float) int "f" ""
            (write (cons x (cons y z)))
            (newline)
            (+ x y))

          (proc 1 2 #\x 1.5) => 3 and prints (1 2 #\x 1.5)
          (proc 1)           => 2 and prints (1 1)

          ; if f is called from C with the call  f (1, 2, 'x', 1.5)
          ; the value 3 is returned and (1 2 #\x 1.5) is printed.
          ; f has to be called with 4 arguments.

     The 'c-define' special form is particularly useful when the driving
     part of an application is written in C and Scheme procedures are
     called directly from C. The Scheme part of the application is in a
     sense a "server" that is providing services to the C part.  The
     Scheme procedures that are to be called from C need to be defined
     using the 'c-define' special form.  Before it can be used, the
     Scheme part must be initialized with a call to the function
     '___setup'.  Before the program terminates, it must call the
     function '___cleanup' so that the Scheme part may do final cleanup.
     A sample application is given in the file 'tests/server.scm'.


File: gambit.info,  Node: c-define-type,  Next: continuations,  Prev: c-define,  Up: C-interface

16.6 The 'c-define-type' special form
=====================================

 -- special form: c-define-type name type [c-to-scheme scheme-to-c
          [cleanup]]

     This form associates the type identifier name to the C type type.
     The name must not clash with predefined types (e.g.  'char-string',
     'ISO-8859-1', etc.)  or with types previously defined with
     'c-define-type' in the same file.  The 'c-define-type' special form
     does not return a value.  It can only appear at top level.

     If only the two parameters name and type are supplied then after
     this definition, the use of name in a type specification is
     synonymous to type.

     For example:

          (c-define-type FILE "FILE")
          (c-define-type FILE* (pointer FILE))
          (c-define-type time-struct-ptr (pointer (struct "tms")))
          (define fopen (c-lambda (char-string char-string) FILE* "fopen"))
          (define fgetc (c-lambda (FILE*) int "fgetc"))

     Note that identifiers are not case-sensitive in standard Scheme but
     it is good programming practice to use a name with the same case as
     in C.

     If four or more parameters are supplied, then type must be a string
     naming the C type, c-to-scheme and scheme-to-c must be strings
     suffixing the C macros that convert data of that type between C and
     Scheme.  If cleanup is supplied it must be a boolean indicating
     whether it is necessary to perform a cleanup operation (such as
     freeing memory) when data of that type is converted from Scheme to
     C (it defaults to '#t').  The cleanup information is used when the
     C stack is unwound due to a continuation invocation (see *note
     continuations::).  Although it is safe to always specify '#t', it
     is more efficient in time and space to specify '#f' because the
     unwinding mechanism can skip C-interface frames which only contain
     conversions of data types requiring no cleanup.  Two pairs of C
     macros need to be defined for conversions performed by 'c-lambda'
     forms and two pairs for conversions performed by 'c-define' forms:

          ___BEGIN_CFUN_scheme-to-c(___SCMOBJ, type, int)
          ___END_CFUN_scheme-to-c(___SCMOBJ, type, int)

          ___BEGIN_CFUN_c-to-scheme(type, ___SCMOBJ)
          ___END_CFUN_c-to-scheme(type, ___SCMOBJ)

          ___BEGIN_SFUN_c-to-scheme(type, ___SCMOBJ, int)
          ___END_SFUN_c-to-scheme(type, ___SCMOBJ, int)

          ___BEGIN_SFUN_scheme-to-c(___SCMOBJ, type)
          ___END_SFUN_scheme-to-c(___SCMOBJ, type)

     The macros prefixed with '___BEGIN' perform the conversion and
     those prefixed with '___END' perform any cleanup necessary (such as
     freeing memory temporarily allocated for the conversion).  The
     macro '___END_CFUN_scheme-to-c' must free the result of the
     conversion if it is memory allocated, and '___END_SFUN_scheme-to-c'
     must not (i.e.  it is the responsibility of the caller to free the
     result).

     The first parameter of these macros is the C variable that contains
     the value to be converted, and the second parameter is the C
     variable in which to store the converted value.  The third
     parameter, when present, is the index (starting at 1) of the
     parameter of the 'c-lambda' or 'c-define' form that is being
     converted (this is useful for reporting precise error information
     when a conversion is impossible).

     To allow for type checking, the first three '___BEGIN' macros must
     expand to an unterminated compound statement prefixed by an 'if',
     conditional on the absence of type check error:

          if ((___err = CONVERSION_OPERATION) == ___FIX(___NO_ERR)) {

     The last '___BEGIN' macro must expand to an unterminated compound
     statement:

          { ___err = CONVERSION_OPERATION;

     If type check errors are impossible then a '___BEGIN' macro can
     simply expand to an unterminated compound statement performing the
     conversion:

          { CONVERSION_OPERATION;

     The '___END' macros must expand to a statement, or to nothing if no
     cleanup is required, followed by a closing brace (to terminate the
     compound statement started at the corresponding '___BEGIN' macro).

     The CONVERSION_OPERATION is typically a function call that returns
     an error code value of type '___SCMOBJ' (the error codes are
     defined in 'gambit.h', and the error code '___FIX(___UNKNOWN_ERR)'
     is available for generic errors).  CONVERSION_OPERATION can also
     set the variable '___errdata' of type '___SCMOBJ' to a specific
     Scheme string error message.

     Below is a simple example showing how to interface to an 'EBCDIC'
     character type.  Memory allocation is not needed for conversion and
     type check errors are impossible when converting EBCDIC to Scheme
     characters, but they are possible when converting from Scheme
     characters to EBCDIC since Gambit supports Unicode characters.

          (c-declare #<<c-declare-end

          typedef char EBCDIC; /* EBCDIC encoded characters */

          void put_char (EBCDIC c) { ... } /* EBCDIC I/O functions */
          EBCDIC get_char (void) { ... }

          char EBCDIC_to_ISO_8859_1[256] = { ... }; /* conversion tables */
          char ISO_8859_1_to_EBCDIC[256] = { ... };

          ___SCMOBJ SCMOBJ_to_EBCDIC (___SCMOBJ src, EBCDIC *dst)
          {
            int x = ___INT(src); /* convert from Scheme character to int */
            if (x > 255) return ___FIX(___UNKNOWN_ERR);
            *dst = ISO_8859_1_to_EBCDIC[x];
            return ___FIX(___NO_ERR);
          }

          #define ___BEGIN_CFUN_SCMOBJ_to_EBCDIC(src,dst,i) \
          if ((___err = SCMOBJ_to_EBCDIC (src, &dst)) == ___FIX(___NO_ERR)) {
          #define ___END_CFUN_SCMOBJ_to_EBCDIC(src,dst,i) }

          #define ___BEGIN_CFUN_EBCDIC_to_SCMOBJ(src,dst) \
          { dst = ___CHR(EBCDIC_to_ISO_8859_1[src]);
          #define ___END_CFUN_EBCDIC_to_SCMOBJ(src,dst) }

          #define ___BEGIN_SFUN_EBCDIC_to_SCMOBJ(src,dst,i) \
          { dst = ___CHR(EBCDIC_to_ISO_8859_1[src]);
          #define ___END_SFUN_EBCDIC_to_SCMOBJ(src,dst,i) }

          #define ___BEGIN_SFUN_SCMOBJ_to_EBCDIC(src,dst) \
          { ___err = SCMOBJ_to_EBCDIC (src, &dst);
          #define ___END_SFUN_SCMOBJ_to_EBCDIC(src,dst) }

          c-declare-end
          )

          (c-define-type EBCDIC "EBCDIC" "EBCDIC_to_SCMOBJ" "SCMOBJ_to_EBCDIC" #f)

          (define put-char (c-lambda (EBCDIC) void "put_char"))
          (define get-char (c-lambda () EBCDIC "get_char"))

          (c-define (write-EBCDIC c) (EBCDIC) void "write_EBCDIC" ""
            (write-char c))

          (c-define (read-EBCDIC) () EBCDIC "read_EBCDIC" ""
            (read-char))

     Below is a more complex example that requires memory allocation
     when converting from C to Scheme.  It is an interface to a 2D
     'point' type which is represented in Scheme by a pair of integers.
     The conversion of the 'x' and 'y' components is done by calls to
     the conversion macros for the 'int' type (defined in 'gambit.h').
     Note that no cleanup is necessary when converting from Scheme to C
     (i.e.  the last parameter of the 'c-define-type' is '#f').

          (c-declare #<<c-declare-end

          typedef struct { int x, y; } point;

          void line_to (point p) { ... }
          point get_mouse (void) { ... }
          point add_points (point p1, point p2) { ... }

          ___SCMOBJ SCMOBJ_to_POINT (___PSD ___SCMOBJ src, point *dst, int arg_num)
          {
            ___SCMOBJ ___err = ___FIX(___NO_ERR);
            if (!___PAIRP(src))
              ___err = ___FIX(___UNKNOWN_ERR);
            else
              {
                ___SCMOBJ car = ___CAR(src);
                ___SCMOBJ cdr = ___CDR(src);
                ___BEGIN_CFUN_SCMOBJ_TO_INT(car,dst->x,arg_num)
                ___BEGIN_CFUN_SCMOBJ_TO_INT(cdr,dst->y,arg_num)
                ___END_CFUN_SCMOBJ_TO_INT(cdr,dst->y,arg_num)
                ___END_CFUN_SCMOBJ_TO_INT(car,dst->x,arg_num)
              }
            return ___err;
          }

          ___SCMOBJ POINT_to_SCMOBJ (___processor_state ___ps, point src, ___SCMOBJ *dst, int arg_num)
          {
            ___SCMOBJ ___err = ___FIX(___NO_ERR);
            ___SCMOBJ x_scmobj;
            ___SCMOBJ y_scmobj;
            ___BEGIN_SFUN_INT_TO_SCMOBJ(src.x,x_scmobj,arg_num)
            ___BEGIN_SFUN_INT_TO_SCMOBJ(src.y,y_scmobj,arg_num)
            *dst = ___EXT(___make_pair) (___ps, x_scmobj, y_scmobj);
            if (___FIXNUMP(*dst))
              ___err = *dst; /* return allocation error */
            ___END_SFUN_INT_TO_SCMOBJ(src.y,y_scmobj,arg_num)
            ___END_SFUN_INT_TO_SCMOBJ(src.x,x_scmobj,arg_num)
            return ___err;
          }

          #define ___BEGIN_CFUN_SCMOBJ_to_POINT(src,dst,i) \
          if ((___err = SCMOBJ_to_POINT (___PSP src, &dst, i)) == ___FIX(___NO_ERR)) {
          #define ___END_CFUN_SCMOBJ_to_POINT(src,dst,i) }

          #define ___BEGIN_CFUN_POINT_to_SCMOBJ(src,dst) \
          if ((___err = POINT_to_SCMOBJ (___ps, src, &dst, ___RETURN_POS)) == ___FIX(___NO_ERR)) {
          #define ___END_CFUN_POINT_to_SCMOBJ(src,dst) \
          ___EXT(___release_scmobj) (dst); }

          #define ___BEGIN_SFUN_POINT_to_SCMOBJ(src,dst,i) \
          if ((___err = POINT_to_SCMOBJ (___ps, src, &dst, i)) == ___FIX(___NO_ERR)) {
          #define ___END_SFUN_POINT_to_SCMOBJ(src,dst,i) \
          ___EXT(___release_scmobj) (dst); }

          #define ___BEGIN_SFUN_SCMOBJ_to_POINT(src,dst) \
          { ___err = SCMOBJ_to_POINT (___PSP src, &dst, ___RETURN_POS);
          #define ___END_SFUN_SCMOBJ_to_POINT(src,dst) }

          c-declare-end
          )

          (c-define-type point "point" "POINT_to_SCMOBJ" "SCMOBJ_to_POINT" #f)

          (define line-to (c-lambda (point) void "line_to"))
          (define get-mouse (c-lambda () point "get_mouse"))
          (define add-points (c-lambda (point point) point "add_points"))

          (c-define (write-point p) (point) void "write_point" ""
            (write p))

          (c-define (read-point) () point "read_point" ""
            (read))

     Note that the pair is allocated using the '___make_pair' runtime
     library function.  The prototype of this function is

          ___SCMOBJ ___make_pair(___processor_state ___ps, ___SCMOBJ car, ___SCMOBJ cdr);

     The fields of the pair are initialized to the 'car' and 'cdr'
     parameters.  The '___ps' parameter indicates how the pair is
     allocated.  A 'NULL' '___ps' parameter will allocate the pair
     permanently (i.e.  the pair will only be deallocated when
     '___cleanup' is called).  Otherwise a "still" object is allocated
     and the '___ps' parameter indicates the processor in whose heap the
     object is allocated (this is to support multithreaded execution).
     Still objects are reference counted and initially have a reference
     count equal to 1.  The call to '___release_scmobj' in the macros
     '___END_CFUN_POINT_to_SCMOBJ' and '___END_SFUN_POINT_to_SCMOBJ'
     decrement this reference count.  A still object whose reference
     count is zero will be deallocated when a garbage collection is
     performed and there are no references to it from the Scheme world.
     Note that the use of the '___PSD' macro in the parameter list of
     'SCMOBJ_to_POINT' and the '___PSP' macro in the calls of
     'SCMOBJ_to_POINT', are necessary to propagate the current processor
     state to that function.

     An example that requires memory allocation when converting from C
     to Scheme and Scheme to C is shown below.  It is an interface to a
     "null-terminated array of strings" type which is represented in
     Scheme by a list of strings.  Note that some cleanup is necessary
     when converting from Scheme to C.

          (c-declare #<<c-declare-end

          #include <stdlib.h>
          #include <unistd.h>

          extern char **environ;

          char **get_environ (void) { return environ; }

          void free_strings (char **strings)
          {
            char **ptr = strings;
            while (*ptr != NULL)
              {
                ___EXT(___release_string) (*ptr);
                ptr++;
              }
            free (strings);
          }

          ___SCMOBJ SCMOBJ_to_STRINGS (___PSD ___SCMOBJ src, char ***dst, int arg_num)
          {
            /*
             * Src is a list of Scheme strings.  Dst will be a null terminated
             * array of C strings.
             */

            int i;
            ___SCMOBJ lst = src;
            int len = 4; /* start with a small result array */
            char **result = (char**) malloc (len * sizeof (char*));

            if (result == NULL)
              return ___FIX(___HEAP_OVERFLOW_ERR);

            i = 0;
            result[i] = NULL; /* always keep array null terminated */

            while (___PAIRP(lst))
              {
                ___SCMOBJ scm_str = ___CAR(lst);
                char *c_str;
                ___SCMOBJ ___err;

                if (i >= len-1) /* need to grow the result array? */
                  {
                    char **new_result;
                    int j;

                    len = len * 3 / 2;
                    new_result = (char**) malloc (len * sizeof (char*));
                    if (new_result == NULL)
                      {
                        free_strings (result);
                        return ___FIX(___HEAP_OVERFLOW_ERR);
                      }
                    for (j=i; j>=0; j--)
                      new_result[j] = result[j];
                    free (result);
                    result = new_result;
                  }

                ___err = ___EXT(___SCMOBJ_to_CHARSTRING) (___PSP scm_str, &c_str, arg_num);

                if (___err != ___FIX(___NO_ERR))
                  {
                    free_strings (result);
                    return ___err;
                  }

                result[i++] = c_str;
                result[i] = NULL;
                lst = ___CDR(lst);
              }

            if (!___NULLP(lst))
              {
                free_strings (result);
                return ___FIX(___UNKNOWN_ERR);
              }

            /*
             * Note that the caller is responsible for calling free_strings
             * when it is done with the result.
             */

            *dst = result;
            return ___FIX(___NO_ERR);
          }

          ___SCMOBJ STRINGS_to_SCMOBJ (___processor_state ___ps, char **src, ___SCMOBJ *dst, int arg_num)
          {
            ___SCMOBJ ___err = ___FIX(___NO_ERR);
            ___SCMOBJ result = ___NUL; /* start with the empty list */
            int i = 0;

            while (src[i] != NULL)
              i++;

            /* build the list of strings starting at the tail */

            while (--i >= 0)
              {
                ___SCMOBJ scm_str;
                ___SCMOBJ new_result;

                /*
                 * Invariant: result is either the empty list or a ___STILL pair
                 * with reference count equal to 1.  This is important because
                 * it is possible that ___CHARSTRING_to_SCMOBJ and ___make_pair
                 * will invoke the garbage collector and we don't want the
                 * reference in result to become invalid (which would be the
                 * case if result was a ___MOVABLE pair or if it had a zero
                 * reference count).
                 */

                ___err = ___EXT(___CHARSTRING_to_SCMOBJ) (___ps, src[i], &scm_str, arg_num);

                if (___err != ___FIX(___NO_ERR))
                  {
                    ___EXT(___release_scmobj) (result); /* allow GC to reclaim result */
                    return ___FIX(___UNKNOWN_ERR);
                  }

                /*
                 * Note that scm_str will be a ___STILL object with reference
                 * count equal to 1, so there is no risk that it will be
                 * reclaimed or moved if ___make_pair invokes the garbage
                 * collector.
                 */

                new_result = ___EXT(___make_pair) (___ps, scm_str, result);

                /*
                 * We can zero the reference count of scm_str and result (if
                 * not the empty list) because the pair now references these
                 * objects and the pair is reachable (it can't be reclaimed
                 * or moved by the garbage collector).
                 */

                ___EXT(___release_scmobj) (scm_str);
                ___EXT(___release_scmobj) (result);

                result = new_result;

                if (___FIXNUMP(result))
                  return result; /* allocation failed */
              }

            /*
             * Note that result is either the empty list or a ___STILL pair
             * with a reference count equal to 1.  There will be a call to
             * ___release_scmobj later on (in ___END_CFUN_STRINGS_to_SCMOBJ
             * or ___END_SFUN_STRINGS_to_SCMOBJ) that will allow the garbage
             * collector to reclaim the whole list of strings when the Scheme
             * world no longer references it.
             */

            *dst = result;
            return ___FIX(___NO_ERR);
          }

          #define ___BEGIN_CFUN_SCMOBJ_to_STRINGS(src,dst,i) \
          if ((___err = SCMOBJ_to_STRINGS (___PSP src, &dst, i)) == ___FIX(___NO_ERR)) {
          #define ___END_CFUN_SCMOBJ_to_STRINGS(src,dst,i) \
          free_strings (dst); }

          #define ___BEGIN_CFUN_STRINGS_to_SCMOBJ(src,dst) \
          if ((___err = STRINGS_to_SCMOBJ (___ps, src, &dst, ___RETURN_POS)) == ___FIX(___NO_ERR)) {
          #define ___END_CFUN_STRINGS_to_SCMOBJ(src,dst) \
          ___EXT(___release_scmobj) (dst); }

          #define ___BEGIN_SFUN_STRINGS_to_SCMOBJ(src,dst,i) \
          if ((___err = STRINGS_to_SCMOBJ (___ps, src, &dst, i)) == ___FIX(___NO_ERR)) {
          #define ___END_SFUN_STRINGS_to_SCMOBJ(src,dst,i) \
          ___EXT(___release_scmobj) (dst); }

          #define ___BEGIN_SFUN_SCMOBJ_to_STRINGS(src,dst) \
          { ___err = SCMOBJ_to_STRINGS (___PSP src, &dst, ___RETURN_POS);
          #define ___END_SFUN_SCMOBJ_to_STRINGS(src,dst) }

          c-declare-end
          )

          (c-define-type char** "char**" "STRINGS_to_SCMOBJ" "SCMOBJ_to_STRINGS" #t)

          (define execv (c-lambda (char-string char**) int "execv"))
          (define get-environ (c-lambda () char** "get_environ"))

          (c-define (write-strings x) (char**) void "write_strings" ""
            (write x))

          (c-define (read-strings) () char** "read_strings" ""
            (read))


File: gambit.info,  Node: continuations,  Prev: c-define-type,  Up: C-interface

16.7 Continuations, the C-interface and threads
===============================================

The C-interface allows C to Scheme calls to be nested.  This means that
during a call from C to Scheme another call from C to Scheme can be
performed.  This case occurs in the following program:

     (c-declare #<<c-declare-end

     int p (char *); /* forward declarations */
     int q (void);

     int a (char *x) { return 2 * p (x+1); }
     int b (short y) { return y + q (); }

     c-declare-end
     )

     (define a (c-lambda (char-string) int "a"))
     (define b (c-lambda (short) int "b"))

     (c-define (p z) (char-string) int "p" ""
       (+ (b 10) (string-length z)))

     (c-define (q) () int "q" ""
       123)

     (write (a "hello"))

   In this example, the main Scheme program calls the C function 'a'
which calls the Scheme procedure 'p' which in turn calls the C function
'b' which finally calls the Scheme procedure 'q'.

   Gambit maintains the Scheme continuation separately from the C stack,
thus allowing the Scheme continuation to be unwound independently from
the C stack.  The C stack frame created for the C function 'f' is only
removed from the C stack when control returns from 'f' or when control
returns to a C function "above" 'f'.  Special care is required for
programs which escape to Scheme (using first-class continuations) from a
Scheme to C (to Scheme) call because the C stack frame will remain on
the stack.  The C stack may overflow if this happens in a loop with no
intervening return to a C function.  To avoid this problem make sure the
C stack gets cleaned up by executing a normal return from a Scheme to C
call.

   This approach to manage Scheme to C to Scheme calls may cause
problems when used with Scheme threads because context switching is
implemented with continuations.  If a Scheme thread T1 is in the middle
of a Scheme to C to Scheme call and a second thread T2 does a Scheme to
C to Scheme call and there is a Scheme thread context switch back to T1
which completes its call, the C stack frames of T2 will get removed,
preventing T2 (when it gets resumed) to complete its call correctly.
This situation can be avoided by having only one Scheme thread that does
Scheme to C to Scheme calls.  Other Scheme threads are limited to simple
Scheme to C calls that don't call back to Scheme.


File: gambit.info,  Node: System limitations,  Next: Copyright and license,  Prev: C-interface,  Up: Top

17 System limitations
*********************

   * On some systems floating point overflows will cause the program to
     terminate with a floating point exception.

   * On some systems floating point operations involving '+nan.0'
     '+inf.0', '-inf.0', or '-0.' do not return the value required by
     the IEEE 754 floating point standard.

   * The maximum number of arguments that can be passed to a procedure
     by the 'apply' procedure is 8192.


File: gambit.info,  Node: Copyright and license,  Next: General index,  Prev: System limitations,  Up: Top

18 Copyright and license
************************

The Gambit system release v4.9.4 is Copyright (C) 1994-2022 by Marc
Feeley, all rights reserved.  The Gambit system release v4.9.4 is
licensed under two licenses: the Apache License, Version 2.0, and the
GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1.  You have the option to
choose which of these two licenses to abide by.  The licenses are copied
below.


                                   Apache License
                             Version 2.0, January 2004
                          http://www.apache.org/licenses/

     TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

     1. Definitions.

        "License" shall mean the terms and conditions for use, reproduction,
        and distribution as defined by Sections 1 through 9 of this document.

        "Licensor" shall mean the copyright owner or entity authorized by
        the copyright owner that is granting the License.

        "Legal Entity" shall mean the union of the acting entity and all
        other entities that control, are controlled by, or are under common
        control with that entity. For the purposes of this definition,
        "control" means (i) the power, direct or indirect, to cause the
        direction or management of such entity, whether by contract or
        otherwise, or (ii) ownership of fifty percent (50%) or more of the
        outstanding shares, or (iii) beneficial ownership of such entity.

        "You" (or "Your") shall mean an individual or Legal Entity
        exercising permissions granted by this License.

        "Source" form shall mean the preferred form for making modifications,
        including but not limited to software source code, documentation
        source, and configuration files.

        "Object" form shall mean any form resulting from mechanical
        transformation or translation of a Source form, including but
        not limited to compiled object code, generated documentation,
        and conversions to other media types.

        "Work" shall mean the work of authorship, whether in Source or
        Object form, made available under the License, as indicated by a
        copyright notice that is included in or attached to the work
        (an example is provided in the Appendix below).

        "Derivative Works" shall mean any work, whether in Source or Object
        form, that is based on (or derived from) the Work and for which the
        editorial revisions, annotations, elaborations, or other modifications
        represent, as a whole, an original work of authorship. For the purposes
        of this License, Derivative Works shall not include works that remain
        separable from, or merely link (or bind by name) to the interfaces of,
        the Work and Derivative Works thereof.

        "Contribution" shall mean any work of authorship, including
        the original version of the Work and any modifications or additions
        to that Work or Derivative Works thereof, that is intentionally
        submitted to Licensor for inclusion in the Work by the copyright owner
        or by an individual or Legal Entity authorized to submit on behalf of
        the copyright owner. For the purposes of this definition, "submitted"
        means any form of electronic, verbal, or written communication sent
        to the Licensor or its representatives, including but not limited to
        communication on electronic mailing lists, source code control systems,
        and issue tracking systems that are managed by, or on behalf of, the
        Licensor for the purpose of discussing and improving the Work, but
        excluding communication that is conspicuously marked or otherwise
        designated in writing by the copyright owner as "Not a Contribution."

        "Contributor" shall mean Licensor and any individual or Legal Entity
        on behalf of whom a Contribution has been received by Licensor and
        subsequently incorporated within the Work.

     2. Grant of Copyright License. Subject to the terms and conditions of
        this License, each Contributor hereby grants to You a perpetual,
        worldwide, non-exclusive, no-charge, royalty-free, irrevocable
        copyright license to reproduce, prepare Derivative Works of,
        publicly display, publicly perform, sublicense, and distribute the
        Work and such Derivative Works in Source or Object form.

     3. Grant of Patent License. Subject to the terms and conditions of
        this License, each Contributor hereby grants to You a perpetual,
        worldwide, non-exclusive, no-charge, royalty-free, irrevocable
        (except as stated in this section) patent license to make, have made,
        use, offer to sell, sell, import, and otherwise transfer the Work,
        where such license applies only to those patent claims licensable
        by such Contributor that are necessarily infringed by their
        Contribution(s) alone or by combination of their Contribution(s)
        with the Work to which such Contribution(s) was submitted. If You
        institute patent litigation against any entity (including a
        cross-claim or counterclaim in a lawsuit) alleging that the Work
        or a Contribution incorporated within the Work constitutes direct
        or contributory patent infringement, then any patent licenses
        granted to You under this License for that Work shall terminate
        as of the date such litigation is filed.

     4. Redistribution. You may reproduce and distribute copies of the
        Work or Derivative Works thereof in any medium, with or without
        modifications, and in Source or Object form, provided that You
        meet the following conditions:

        (a) You must give any other recipients of the Work or
            Derivative Works a copy of this License; and

        (b) You must cause any modified files to carry prominent notices
            stating that You changed the files; and

        (c) You must retain, in the Source form of any Derivative Works
            that You distribute, all copyright, patent, trademark, and
            attribution notices from the Source form of the Work,
            excluding those notices that do not pertain to any part of
            the Derivative Works; and

        (d) If the Work includes a "NOTICE" text file as part of its
            distribution, then any Derivative Works that You distribute must
            include a readable copy of the attribution notices contained
            within such NOTICE file, excluding those notices that do not
            pertain to any part of the Derivative Works, in at least one
            of the following places: within a NOTICE text file distributed
            as part of the Derivative Works; within the Source form or
            documentation, if provided along with the Derivative Works; or,
            within a display generated by the Derivative Works, if and
            wherever such third-party notices normally appear. The contents
            of the NOTICE file are for informational purposes only and
            do not modify the License. You may add Your own attribution
            notices within Derivative Works that You distribute, alongside
            or as an addendum to the NOTICE text from the Work, provided
            that such additional attribution notices cannot be construed
            as modifying the License.

        You may add Your own copyright statement to Your modifications and
        may provide additional or different license terms and conditions
        for use, reproduction, or distribution of Your modifications, or
        for any such Derivative Works as a whole, provided Your use,
        reproduction, and distribution of the Work otherwise complies with
        the conditions stated in this License.

     5. Submission of Contributions. Unless You explicitly state otherwise,
        any Contribution intentionally submitted for inclusion in the Work
        by You to the Licensor shall be under the terms and conditions of
        this License, without any additional terms or conditions.
        Notwithstanding the above, nothing herein shall supersede or modify
        the terms of any separate license agreement you may have executed
        with Licensor regarding such Contributions.

     6. Trademarks. This License does not grant permission to use the trade
        names, trademarks, service marks, or product names of the Licensor,
        except as required for reasonable and customary use in describing the
        origin of the Work and reproducing the content of the NOTICE file.

     7. Disclaimer of Warranty. Unless required by applicable law or
        agreed to in writing, Licensor provides the Work (and each
        Contributor provides its Contributions) on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
        implied, including, without limitation, any warranties or conditions
        of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
        PARTICULAR PURPOSE. You are solely responsible for determining the
        appropriateness of using or redistributing the Work and assume any
        risks associated with Your exercise of permissions under this License.

     8. Limitation of Liability. In no event and under no legal theory,
        whether in tort (including negligence), contract, or otherwise,
        unless required by applicable law (such as deliberate and grossly
        negligent acts) or agreed to in writing, shall any Contributor be
        liable to You for damages, including any direct, indirect, special,
        incidental, or consequential damages of any character arising as a
        result of this License or out of the use or inability to use the
        Work (including but not limited to damages for loss of goodwill,
        work stoppage, computer failure or malfunction, or any and all
        other commercial damages or losses), even if such Contributor
        has been advised of the possibility of such damages.

     9. Accepting Warranty or Additional Liability. While redistributing
        the Work or Derivative Works thereof, You may choose to offer,
        and charge a fee for, acceptance of support, warranty, indemnity,
        or other liability obligations and/or rights consistent with this
        License. However, in accepting such obligations, You may act only
        on Your own behalf and on Your sole responsibility, not on behalf
        of any other Contributor, and only if You agree to indemnify,
        defend, and hold each Contributor harmless for any liability
        incurred by, or claims asserted against, such Contributor by reason
        of your accepting any such warranty or additional liability.

     END OF TERMS AND CONDITIONS

     APPENDIX: How to apply the Apache License to your work.

        To apply the Apache License to your work, attach the following
        boilerplate notice, with the fields enclosed by brackets "[]"
        replaced with your own identifying information. (Don't include
        the brackets!)  The text should be enclosed in the appropriate
        comment syntax for the file format. We also recommend that a
        file or class name and description of purpose be included on the
        same "printed page" as the copyright notice for easier
        identification within third-party archives.

     Copyright [yyyy] [name of copyright owner]

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

                       GNU LESSER GENERAL PUBLIC LICENSE
                            Version 2.1, February 1999

      Copyright (C) 1991, 1999 Free Software Foundation, Inc.
          51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

     [This is the first released version of the Lesser GPL.  It also counts
      as the successor of the GNU Library Public License, version 2, hence
      the version number 2.1.]

                                 Preamble

       The licenses for most software are designed to take away your
     freedom to share and change it.  By contrast, the GNU General Public
     Licenses are intended to guarantee your freedom to share and change
     free software--to make sure the software is free for all its users.

       This license, the Lesser General Public License, applies to some
     specially designated software packages--typically libraries--of the
     Free Software Foundation and other authors who decide to use it.  You
     can use it too, but we suggest you first think carefully about whether
     this license or the ordinary General Public License is the better
     strategy to use in any particular case, based on the explanations below.

       When we speak of free software, we are referring to freedom of use,
     not price.  Our General Public Licenses are designed to make sure that
     you have the freedom to distribute copies of free software (and charge
     for this service if you wish); that you receive source code or can get
     it if you want it; that you can change the software and use pieces of
     it in new free programs; and that you are informed that you can do
     these things.

       To protect your rights, we need to make restrictions that forbid
     distributors to deny you these rights or to ask you to surrender these
     rights.  These restrictions translate to certain responsibilities for
     you if you distribute copies of the library or if you modify it.

       For example, if you distribute copies of the library, whether gratis
     or for a fee, you must give the recipients all the rights that we gave
     you.  You must make sure that they, too, receive or can get the source
     code.  If you link other code with the library, you must provide
     complete object files to the recipients, so that they can relink them
     with the library after making changes to the library and recompiling
     it.  And you must show them these terms so they know their rights.

       We protect your rights with a two-step method: (1) we copyright the
     library, and (2) we offer you this license, which gives you legal
     permission to copy, distribute and/or modify the library.

       To protect each distributor, we want to make it very clear that
     there is no warranty for the free library.  Also, if the library is
     modified by someone else and passed on, the recipients should know
     that what they have is not the original version, so that the original
     author's reputation will not be affected by problems that might be
     introduced by others.

       Finally, software patents pose a constant threat to the existence of
     any free program.  We wish to make sure that a company cannot
     effectively restrict the users of a free program by obtaining a
     restrictive license from a patent holder.  Therefore, we insist that
     any patent license obtained for a version of the library must be
     consistent with the full freedom of use specified in this license.

       Most GNU software, including some libraries, is covered by the
     ordinary GNU General Public License.  This license, the GNU Lesser
     General Public License, applies to certain designated libraries, and
     is quite different from the ordinary General Public License.  We use
     this license for certain libraries in order to permit linking those
     libraries into non-free programs.

       When a program is linked with a library, whether statically or using
     a shared library, the combination of the two is legally speaking a
     combined work, a derivative of the original library.  The ordinary
     General Public License therefore permits such linking only if the
     entire combination fits its criteria of freedom.  The Lesser General
     Public License permits more lax criteria for linking other code with
     the library.

       We call this license the "Lesser" General Public License because it
     does Less to protect the user's freedom than the ordinary General
     Public License.  It also provides other free software developers Less
     of an advantage over competing non-free programs.  These disadvantages
     are the reason we use the ordinary General Public License for many
     libraries.  However, the Lesser license provides advantages in certain
     special circumstances.

       For example, on rare occasions, there may be a special need to
     encourage the widest possible use of a certain library, so that it becomes
     a de-facto standard.  To achieve this, non-free programs must be
     allowed to use the library.  A more frequent case is that a free
     library does the same job as widely used non-free libraries.  In this
     case, there is little to gain by limiting the free library to free
     software only, so we use the Lesser General Public License.

       In other cases, permission to use a particular library in non-free
     programs enables a greater number of people to use a large body of
     free software.  For example, permission to use the GNU C Library in
     non-free programs enables many more people to use the whole GNU
     operating system, as well as its variant, the GNU/Linux operating
     system.

       Although the Lesser General Public License is Less protective of the
     users' freedom, it does ensure that the user of a program that is
     linked with the Library has the freedom and the wherewithal to run
     that program using a modified version of the Library.

       The precise terms and conditions for copying, distribution and
     modification follow.  Pay close attention to the difference between a
     "work based on the library" and a "work that uses the library".  The
     former contains code derived from the library, whereas the latter must
     be combined with the library in order to run.

                       GNU LESSER GENERAL PUBLIC LICENSE
        TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

       0. This License Agreement applies to any software library or other
     program which contains a notice placed by the copyright holder or
     other authorized party saying it may be distributed under the terms of
     this Lesser General Public License (also called "this License").
     Each licensee is addressed as "you".

       A "library" means a collection of software functions and/or data
     prepared so as to be conveniently linked with application programs
     (which use some of those functions and data) to form executables.

       The "Library", below, refers to any such software library or work
     which has been distributed under these terms.  A "work based on the
     Library" means either the Library or any derivative work under
     copyright law: that is to say, a work containing the Library or a
     portion of it, either verbatim or with modifications and/or translated
     straightforwardly into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)

       "Source code" for a work means the preferred form of the work for
     making modifications to it.  For a library, complete source code means
     all the source code for all modules it contains, plus any associated
     interface definition files, plus the scripts used to control compilation
     and installation of the library.

       Activities other than copying, distribution and modification are not
     covered by this License; they are outside its scope.  The act of
     running a program using the Library is not restricted, and output from
     such a program is covered only if its contents constitute a work based
     on the Library (independent of the use of the Library in a tool for
     writing it).  Whether that is true depends on what the Library does
     and what the program that uses the Library does.

       1. You may copy and distribute verbatim copies of the Library's
     complete source code as you receive it, in any medium, provided that
     you conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep intact
     all the notices that refer to this License and to the absence of any
     warranty; and distribute a copy of this License along with the
     Library.

       You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange for a
     fee.

       2. You may modify your copy or copies of the Library or any portion
     of it, thus forming a work based on the Library, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

         a) The modified work must itself be a software library.

         b) You must cause the files modified to carry prominent notices
         stating that you changed the files and the date of any change.

         c) You must cause the whole of the work to be licensed at no
         charge to all third parties under the terms of this License.

         d) If a facility in the modified Library refers to a function or a
         table of data to be supplied by an application program that uses
         the facility, other than as an argument passed when the facility
         is invoked, then you must make a good faith effort to ensure that,
         in the event an application does not supply such function or
         table, the facility still operates, and performs whatever part of
         its purpose remains meaningful.

         (For example, a function in a library to compute square roots has
         a purpose that is entirely well-defined independent of the
         application.  Therefore, Subsection 2d requires that any
         application-supplied function or table used by this function must
         be optional: if the application does not supply it, the square
         root function must still compute square roots.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the Library,
     and can be reasonably considered independent and separate works in
     themselves, then this License, and its terms, do not apply to those
     sections when you distribute them as separate works.  But when you
     distribute the same sections as part of a whole which is a work based
     on the Library, the distribution of the whole must be on the terms of
     this License, whose permissions for other licensees extend to the
     entire whole, and thus to each and every part regardless of who wrote
     it.

     Thus, it is not the intent of this section to claim rights or contest
     your rights to work written entirely by you; rather, the intent is to
     exercise the right to control the distribution of derivative or
     collective works based on the Library.

     In addition, mere aggregation of another work not based on the Library
     with the Library (or with a work based on the Library) on a volume of
     a storage or distribution medium does not bring the other work under
     the scope of this License.

       3. You may opt to apply the terms of the ordinary GNU General Public
     License instead of this License to a given copy of the Library.  To do
     this, you must alter all the notices that refer to this License, so
     that they refer to the ordinary GNU General Public License, version 2,
     instead of to this License.  (If a newer version than version 2 of the
     ordinary GNU General Public License has appeared, then you can specify
     that version instead if you wish.)  Do not make any other change in
     these notices.

       Once this change is made in a given copy, it is irreversible for
     that copy, so the ordinary GNU General Public License applies to all
     subsequent copies and derivative works made from that copy.

       This option is useful when you wish to copy part of the code of
     the Library into a program that is not a library.

       4. You may copy and distribute the Library (or a portion or
     derivative of it, under Section 2) in object code or executable form
     under the terms of Sections 1 and 2 above provided that you accompany
     it with the complete corresponding machine-readable source code, which
     must be distributed under the terms of Sections 1 and 2 above on a
     medium customarily used for software interchange.

       If distribution of object code is made by offering access to copy
     from a designated place, then offering equivalent access to copy the
     source code from the same place satisfies the requirement to
     distribute the source code, even though third parties are not
     compelled to copy the source along with the object code.

       5. A program that contains no derivative of any portion of the
     Library, but is designed to work with the Library by being compiled or
     linked with it, is called a "work that uses the Library".  Such a
     work, in isolation, is not a derivative work of the Library, and
     therefore falls outside the scope of this License.

       However, linking a "work that uses the Library" with the Library
     creates an executable that is a derivative of the Library (because it
     contains portions of the Library), rather than a "work that uses the
     library".  The executable is therefore covered by this License.
     Section 6 states terms for distribution of such executables.

       When a "work that uses the Library" uses material from a header file
     that is part of the Library, the object code for the work may be a
     derivative work of the Library even though the source code is not.
     Whether this is true is especially significant if the work can be
     linked without the Library, or if the work is itself a library.  The
     threshold for this to be true is not precisely defined by law.

       If such an object file uses only numerical parameters, data
     structure layouts and accessors, and small macros and small inline
     functions (ten lines or less in length), then the use of the object
     file is unrestricted, regardless of whether it is legally a derivative
     work.  (Executables containing this object code plus portions of the
     Library will still fall under Section 6.)

       Otherwise, if the work is a derivative of the Library, you may
     distribute the object code for the work under the terms of Section 6.
     Any executables containing that work also fall under Section 6,
     whether or not they are linked directly with the Library itself.

       6. As an exception to the Sections above, you may also combine or
     link a "work that uses the Library" with the Library to produce a
     work containing portions of the Library, and distribute that work
     under terms of your choice, provided that the terms permit
     modification of the work for the customer's own use and reverse
     engineering for debugging such modifications.

       You must give prominent notice with each copy of the work that the
     Library is used in it and that the Library and its use are covered by
     this License.  You must supply a copy of this License.  If the work
     during execution displays copyright notices, you must include the
     copyright notice for the Library among them, as well as a reference
     directing the user to the copy of this License.  Also, you must do one
     of these things:

         a) Accompany the work with the complete corresponding
         machine-readable source code for the Library including whatever
         changes were used in the work (which must be distributed under
         Sections 1 and 2 above); and, if the work is an executable linked
         with the Library, with the complete machine-readable "work that
         uses the Library", as object code and/or source code, so that the
         user can modify the Library and then relink to produce a modified
         executable containing the modified Library.  (It is understood
         that the user who changes the contents of definitions files in the
         Library will not necessarily be able to recompile the application
         to use the modified definitions.)

         b) Use a suitable shared library mechanism for linking with the
         Library.  A suitable mechanism is one that (1) uses at run time a
         copy of the library already present on the user's computer system,
         rather than copying library functions into the executable, and (2)
         will operate properly with a modified version of the library, if
         the user installs one, as long as the modified version is
         interface-compatible with the version that the work was made with.

         c) Accompany the work with a written offer, valid for at
         least three years, to give the same user the materials
         specified in Subsection 6a, above, for a charge no more
         than the cost of performing this distribution.

         d) If distribution of the work is made by offering access to copy
         from a designated place, offer equivalent access to copy the above
         specified materials from the same place.

         e) Verify that the user has already received a copy of these
         materials or that you have already sent this user a copy.

       For an executable, the required form of the "work that uses the
     Library" must include any data and utility programs needed for
     reproducing the executable from it.  However, as a special exception,
     the materials to be distributed need not include anything that is
     normally distributed (in either source or binary form) with the major
     components (compiler, kernel, and so on) of the operating system on
     which the executable runs, unless that component itself accompanies
     the executable.

       It may happen that this requirement contradicts the license
     restrictions of other proprietary libraries that do not normally
     accompany the operating system.  Such a contradiction means you cannot
     use both them and the Library together in an executable that you
     distribute.

       7. You may place library facilities that are a work based on the
     Library side-by-side in a single library together with other library
     facilities not covered by this License, and distribute such a combined
     library, provided that the separate distribution of the work based on
     the Library and of the other library facilities is otherwise
     permitted, and provided that you do these two things:

         a) Accompany the combined library with a copy of the same work
         based on the Library, uncombined with any other library
         facilities.  This must be distributed under the terms of the
         Sections above.

         b) Give prominent notice with the combined library of the fact
         that part of it is a work based on the Library, and explaining
         where to find the accompanying uncombined form of the same work.

       8. You may not copy, modify, sublicense, link with, or distribute
     the Library except as expressly provided under this License.  Any
     attempt otherwise to copy, modify, sublicense, link with, or
     distribute the Library is void, and will automatically terminate your
     rights under this License.  However, parties who have received copies,
     or rights, from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

       9. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify or
     distribute the Library or its derivative works.  These actions are
     prohibited by law if you do not accept this License.  Therefore, by
     modifying or distributing the Library (or any work based on the
     Library), you indicate your acceptance of this License to do so, and
     all its terms and conditions for copying, distributing or modifying
     the Library or works based on it.

       10. Each time you redistribute the Library (or any work based on the
     Library), the recipient automatically receives a license from the
     original licensor to copy, distribute, link with or modify the Library
     subject to these terms and conditions.  You may not impose any further
     restrictions on the recipients' exercise of the rights granted herein.
     You are not responsible for enforcing compliance by third parties with
     this License.

       11. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent issues),
     conditions are imposed on you (whether by court order, agreement or
     otherwise) that contradict the conditions of this License, they do not
     excuse you from the conditions of this License.  If you cannot
     distribute so as to satisfy simultaneously your obligations under this
     License and any other pertinent obligations, then as a consequence you
     may not distribute the Library at all.  For example, if a patent
     license would not permit royalty-free redistribution of the Library by
     all those who receive copies directly or indirectly through you, then
     the only way you could satisfy both it and this License would be to
     refrain entirely from distribution of the Library.

     If any portion of this section is held invalid or unenforceable under any
     particular circumstance, the balance of the section is intended to apply,
     and the section as a whole is intended to apply in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of any
     such claims; this section has the sole purpose of protecting the
     integrity of the free software distribution system which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is willing
     to distribute software through any other system and a licensee cannot
     impose that choice.

     This section is intended to make thoroughly clear what is believed to
     be a consequence of the rest of this License.

       12. If the distribution and/or use of the Library is restricted in
     certain countries either by patents or by copyrighted interfaces, the
     original copyright holder who places the Library under this License may add
     an explicit geographical distribution limitation excluding those countries,
     so that distribution is permitted only in or among countries not thus
     excluded.  In such case, this License incorporates the limitation as if
     written in the body of this License.

       13. The Free Software Foundation may publish revised and/or new
     versions of the Lesser General Public License from time to time.
     Such new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the Library
     specifies a version number of this License which applies to it and
     "any later version", you have the option of following the terms and
     conditions either of that version or of any later version published by
     the Free Software Foundation.  If the Library does not specify a
     license version number, you may choose any version ever published by
     the Free Software Foundation.

       14. If you wish to incorporate parts of the Library into other free
     programs whose distribution conditions are incompatible with these,
     write to the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free status
     of all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                 NO WARRANTY

       15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
     EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
     OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
     KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
     LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
     THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

       16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
     AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
     LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
     RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
     FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
     SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
     DAMAGES.

                          END OF TERMS AND CONDITIONS

                How to Apply These Terms to Your New Libraries

       If you develop a new library, and you want it to be of the greatest
     possible use to the public, we recommend making it free software that
     everyone can redistribute and change.  You can do so by permitting
     redistribution under these terms (or, alternatively, under the terms of the
     ordinary General Public License).

       To apply these terms, attach the following notices to the library.  It is
     safest to attach them to the start of each source file to most effectively
     convey the exclusion of warranty; and each file should have at least the
     "copyright" line and a pointer to where the full notice is found.

         <one line to give the library's name and a brief idea of what it does.>
         Copyright (C) <year>  <name of author>

         This library is free software; you can redistribute it and/or
         modify it under the terms of the GNU Lesser General Public
         License as published by the Free Software Foundation; either
         version 2.1 of the License, or (at your option) any later version.

         This library is distributed in the hope that it will be useful,
         but WITHOUT ANY WARRANTY; without even the implied warranty of
         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
         Lesser General Public License for more details.

         You should have received a copy of the GNU Lesser General Public
         License along with this library; if not, write to the Free Software
         Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

     Also add information on how to contact you by electronic and paper mail.

     You should also get your employer (if you work as a programmer) or your
     school, if any, to sign a "copyright disclaimer" for the library, if
     necessary.  Here is a sample; alter the names:

       Yoyodyne, Inc., hereby disclaims all copyright interest in the
       library `Frob' (a library for tweaking knobs) written by James Random Hacker.

       <signature of Ty Coon>, 1 April 1990
       Ty Coon, President of Vice

     That's all there is to it!


File: gambit.info,  Node: General index,  Prev: Copyright and license,  Up: Top

General index
*************

 [index ]
* Menu:

* #:                                     Procedures related to debugging.
                                                             (line   99)
* ##:                                    Procedures related to debugging.
                                                             (line   99)
* ##import:                              ##namespace and ##import forms.
                                                             (line    9)
* ##include:                             Legacy Modules.     (line   83)
* ##namespace:                           ##namespace and ##import forms.
                                                             (line    7)
* +z:                                    Other compilation options.
                                                             (line   25)
* ,(b EXPR):                             Debugging commands. (line  146)
* ,(be EXPR):                            Debugging commands. (line  153)
* ,(bed EXPR):                           Debugging commands. (line  156)
* ,(c EXPR):                             Debugging commands. (line   40)
* ,(e EXPR):                             Debugging commands. (line  194)
* ,(ed EXPR):                            Debugging commands. (line  206)
* ,(h SUBJECT):                          Debugging commands. (line   13)
* ,(st EXPR):                            Debugging commands. (line  217)
* ,(v EXPR):                             Debugging commands. (line  221)
* ,+:                                    Debugging commands. (line  100)
* ,++:                                   Debugging commands. (line  106)
* ,-:                                    Debugging commands. (line  103)
* ,--:                                   Debugging commands. (line  110)
* ,?:                                    Debugging commands. (line   10)
* ,b:                                    Debugging commands. (line  131)
* ,be:                                   Debugging commands. (line  140)
* ,bed:                                  Debugging commands. (line  143)
* ,c:                                    Debugging commands. (line   56)
* ,d:                                    Debugging commands. (line   36)
* ,e:                                    Debugging commands. (line  166)
* ,ed:                                   Debugging commands. (line  190)
* ,h:                                    Debugging commands. (line   20)
* ,help:                                 Debugging commands. (line   10)
* ,i:                                    Debugging commands. (line  160)
* ,l:                                    Debugging commands. (line   76)
* ,N:                                    Debugging commands. (line   83)
* ,N+:                                   Debugging commands. (line   88)
* ,N-:                                   Debugging commands. (line   94)
* ,q:                                    Debugging commands. (line   25)
* ,qt:                                   Debugging commands. (line   29)
* ,s:                                    Debugging commands. (line   62)
* ,st:                                   Debugging commands. (line  210)
* ,t:                                    Debugging commands. (line   33)
* ,y:                                    Debugging commands. (line  114)
* -:                                     GSI.                (line   12)
* - <1>:                                 GSI batch mode.     (line    6)
* - <2>:                                 GSC batch mode.     (line  324)
* -:+ARGUMENT:                           Runtime options.    (line  172)
* -:,:                                   Runtime options.    (line  263)
* -:-[IO...]:                            Runtime options.    (line  175)
* -:0[IO...]:                            Runtime options.    (line  175)
* -:1[IO...]:                            Runtime options.    (line  175)
* -:2[IO...]:                            Runtime options.    (line  175)
* -:add-arg=ARGUMENT:                    Runtime options.    (line  172)
* -:ask-install=WHEN:                    Runtime options.    (line  253)
* -:d:                                   Runtime options.    (line   91)
* -:d$[INTF][:PORT]:                     Runtime options.    (line  155)
* -:d+:                                  Runtime options.    (line  145)
* -:d-:                                  Runtime options.    (line  141)
* -:d@[HOST][:PORT]:                     Runtime options.    (line  149)
* -:da:                                  Runtime options.    (line   99)
* -:dc:                                  Runtime options.    (line  138)
* -:dD:                                  Runtime options.    (line  121)
* -:debug:                               Runtime options.    (line   91)
* -:debug=$[INTF][:PORT]:                Runtime options.    (line  155)
* -:debug=+:                             Runtime options.    (line  145)
* -:debug=-:                             Runtime options.    (line  141)
* -:debug=@[HOST][:PORT]:                Runtime options.    (line  149)
* -:debug=a:                             Runtime options.    (line   99)
* -:debug=c:                             Runtime options.    (line  138)
* -:debug=D:                             Runtime options.    (line  121)
* -:debug=LEVEL:                         Runtime options.    (line  129)
* -:debug=p:                             Runtime options.    (line   95)
* -:debug=q:                             Runtime options.    (line  109)
* -:debug=Q:                             Runtime options.    (line  125)
* -:debug=r:                             Runtime options.    (line  102)
* -:debug=R:                             Runtime options.    (line  113)
* -:debug=s:                             Runtime options.    (line  105)
* -:dLEVEL:                              Runtime options.    (line  129)
* -:dp:                                  Runtime options.    (line   95)
* -:dq:                                  Runtime options.    (line  109)
* -:dQ:                                  Runtime options.    (line  125)
* -:dr:                                  Runtime options.    (line  102)
* -:dR:                                  Runtime options.    (line  113)
* -:ds:                                  Runtime options.    (line  105)
* -:file-settings=[IO...]:               Runtime options.    (line  175)
* -:f[IO...]:                            Runtime options.    (line  175)
* -:gambit:                              Runtime options.    (line   85)
* -:hSIZE:                               Runtime options.    (line   70)
* -:io-settings=[IO...]:                 Runtime options.    (line  175)
* -:i[IO...]:                            Runtime options.    (line  175)
* -:live-ratio=RATIO:                    Runtime options.    (line   77)
* -:lRATIO:                              Runtime options.    (line   77)
* -:max-heap=SIZE:                       Runtime options.    (line   70)
* -:min-heap=SIZE:                       Runtime options.    (line   70)
* -:mSIZE:                               Runtime options.    (line   70)
* -:r5rs:                                Runtime options.    (line   85)
* -:r7rs:                                Runtime options.    (line   85)
* -:s:                                   Runtime options.    (line   85)
* -:S:                                   Runtime options.    (line   85)
* -:s <1>:                               Miscellaneous extensions.
                                                             (line  569)
* -:search=[DIR]:                        Runtime options.    (line  241)
* -:stdio-settings=[IO...]:              Runtime options.    (line  175)
* -:terminal-settings=[IO...]:           Runtime options.    (line  175)
* -:t[IO...]:                            Runtime options.    (line  175)
* -:whitelist=[SOURCE]:                  Runtime options.    (line  246)
* -:~~NAME=DIRECTORY:                    Runtime options.    (line  168)
* -c:                                    GSC batch mode.     (line  278)
* -call_shared:                          Other compilation options.
                                                             (line   25)
* -cc:                                   GSC batch mode.     (line  170)
* -cc-options:                           GSC batch mode.     (line  182)
* -cfg:                                  GSC batch mode.     (line  238)
* -compactness LEVEL:                    GSC batch mode.     (line  347)
* -debug:                                GSC batch mode.     (line  253)
* -debug <1>:                            Miscellaneous extensions.
                                                             (line  838)
* -debug-environments:                   GSC batch mode.     (line  265)
* -debug-environments <1>:               Miscellaneous extensions.
                                                             (line  878)
* -debug-location:                       GSC batch mode.     (line  257)
* -debug-location <1>:                   Miscellaneous extensions.
                                                             (line  852)
* -debug-source:                         GSC batch mode.     (line  261)
* -debug-source <1>:                     Miscellaneous extensions.
                                                             (line  865)
* -dg:                                   GSC batch mode.     (line  246)
* -dynamic:                              GSC batch mode.     (line  278)
* -D___DYNAMIC:                          Building a loadable library.
                                                             (line    6)
* -D___LIBRARY:                          Building a shared-library.
                                                             (line    6)
* -D___PRIMAL:                           Building a shared-library.
                                                             (line    6)
* -D___SHARED:                           Building a shared-library.
                                                             (line    6)
* -D___SINGLE_HOST:                      Other compilation options.
                                                             (line    6)
* -e:                                    GSI.                (line   12)
* -e <1>:                                GSI batch mode.     (line    6)
* -e <2>:                                GSC batch mode.     (line  326)
* -exe:                                  GSC batch mode.     (line   42)
* -exe <1>:                              GSC batch mode.     (line  278)
* -expansion:                            GSC batch mode.     (line  232)
* -f:                                    GSI.                (line   12)
* -f <1>:                                GSC customization.  (line    6)
* -flat:                                 GSC batch mode.     (line  300)
* -fpic:                                 Other compilation options.
                                                             (line   25)
* -fPIC:                                 Other compilation options.
                                                             (line   25)
* -G:                                    Other compilation options.
                                                             (line   25)
* -gvm:                                  GSC batch mode.     (line  235)
* -h:                                    GSI.                (line   12)
* -h <1>:                                GSC.                (line   32)
* -help:                                 GSI.                (line   12)
* -help <1>:                             GSC.                (line   32)
* -i:                                    GSI.                (line   12)
* -i <1>:                                GSC.                (line   37)
* -i <2>:                                GSC batch mode.     (line  149)
* -I/usr/local/Gambit/include:           Other compilation options.
                                                             (line   17)
* -install:                              GSI.                (line   12)
* -install <1>:                          GSI package management mode.
                                                             (line    6)
* -install <2>:                          Installing Modules. (line  109)
* -keep-temp:                            GSC batch mode.     (line  278)
* -Kpic:                                 Other compilation options.
                                                             (line   25)
* -KPIC:                                 Other compilation options.
                                                             (line   25)
* -l BASE:                               GSC batch mode.     (line  307)
* -L/usr/local/Gambit/lib:               Other compilation options.
                                                             (line   17)
* -ld-options:                           GSC batch mode.     (line  193)
* -ld-options-prelude:                   GSC batch mode.     (line  193)
* -link:                                 GSC batch mode.     (line   42)
* -link <1>:                             GSC batch mode.     (line  278)
* -nb-arg-regs N:                        GSC batch mode.     (line  338)
* -nb-gvm-regs N:                        GSC batch mode.     (line  329)
* -nopreload:                            GSC batch mode.     (line  314)
* -O:                                    Other compilation options.
                                                             (line    6)
* -o OUTPUT:                             GSC batch mode.     (line  274)
* -obj:                                  GSC batch mode.     (line  278)
* -pic:                                  Other compilation options.
                                                             (line   25)
* -pkg-config:                           GSC batch mode.     (line  207)
* -pkg-config-path:                      GSC batch mode.     (line  207)
* -postlude:                             GSC batch mode.     (line  163)
* -preload:                              GSC batch mode.     (line  314)
* -prelude:                              GSC batch mode.     (line  155)
* -rdynamic:                             Other compilation options.
                                                             (line   25)
* -report:                               GSC batch mode.     (line  227)
* -shared:                               Other compilation options.
                                                             (line   25)
* -target:                               GSC batch mode.     (line  152)
* -track-scheme:                         GSC batch mode.     (line  269)
* -uninstall:                            GSI.                (line   12)
* -uninstall <1>:                        GSI package management mode.
                                                             (line    6)
* -uninstall <2>:                        Installing Modules. (line  109)
* -update:                               GSI.                (line   12)
* -upgrade:                              GSI package management mode.
                                                             (line    6)
* -upgrade <1>:                          Installing Modules. (line  109)
* -v:                                    GSI.                (line   12)
* -v <1>:                                GSC.                (line   32)
* -verbose:                              GSC batch mode.     (line  224)
* -warnings:                             GSC batch mode.     (line  221)
* .c:                                    GSC batch mode.     (line    6)
* .js:                                   GSC batch mode.     (line    6)
* .scm:                                  GSC batch mode.     (line    6)
* .six:                                  GSC batch mode.     (line    6)
* .sld:                                  GSC batch mode.     (line    6)
* <:                                     Extensions to numeric procedures.
                                                             (line    7)
* <=:                                    Extensions to numeric procedures.
                                                             (line    9)
* =:                                     Extensions to numeric procedures.
                                                             (line    6)
* >:                                     Extensions to numeric procedures.
                                                             (line    8)
* >=:                                    Extensions to numeric procedures.
                                                             (line   10)
* ^C:                                    Runtime options.    (line  113)
* ^C <1>:                                Debugging model.    (line   12)
* ^D:                                    Debugging model.    (line   37)
* ___cleanup:                            c-define.           (line   46)
* ___setup:                              c-define.           (line   46)
* |six.x,y|:                             Undocumented extensions.
                                                             (line  380)
* |six.x\|=y|:                           Undocumented extensions.
                                                             (line  407)
* |six.x\|y|:                            Undocumented extensions.
                                                             (line  408)
* |six.x\|\|y|:                          Undocumented extensions.
                                                             (line  409)
* ~:                                     Handling of file names.
                                                             (line   30)
* ~username:                             Handling of file names.
                                                             (line   39)
* ~~:                                    Handling of file names.
                                                             (line   20)
* abandoned-mutex-exception?:            Exception objects related to threads.
                                                             (line   42)
* abort:                                 Exception-handling. (line  130)
* absolute path:                         Handling of file names.
                                                             (line    6)
* absolute path <1>:                     Handling of file names.
                                                             (line   80)
* acosh:                                 Undocumented extensions.
                                                             (line  282)
* address-info-family:                   Host information.   (line  158)
* address-info-protocol:                 Host information.   (line  180)
* address-info-socket-info:              Host information.   (line  191)
* address-info-socket-type:              Host information.   (line  169)
* address-info?:                         Host information.   (line  145)
* address-infos:                         Host information.   (line   78)
* all-bits-set?:                         Bitwise-operations on exact integers.
                                                             (line  271)
* allocation-limit:                      Miscellaneous extensions.
                                                             (line  784)
* any-bit-set?:                          Undocumented extensions.
                                                             (line  301)
* any-bits-set?:                         Bitwise-operations on exact integers.
                                                             (line  256)
* append-reverse:                        Undocumented extensions.
                                                             (line  263)
* append-reverse!:                       Undocumented extensions.
                                                             (line  264)
* apropos:                               Procedures related to debugging.
                                                             (line   42)
* arithmetic-shift:                      Bitwise-operations on exact integers.
                                                             (line   17)
* asinh:                                 Undocumented extensions.
                                                             (line  284)
* atanh:                                 Undocumented extensions.
                                                             (line  286)
* balanced-quotient:                     Division.           (line    8)
* balanced-remainder:                    Division.           (line   10)
* balanced/:                             Division.           (line   12)
* bit-count:                             Bitwise-operations on exact integers.
                                                             (line  199)
* bit-field:                             Undocumented extensions.
                                                             (line  302)
* bit-field-any?:                        Undocumented extensions.
                                                             (line  303)
* bit-field-clear:                       Undocumented extensions.
                                                             (line  304)
* bit-field-every?:                      Undocumented extensions.
                                                             (line  305)
* bit-field-replace:                     Undocumented extensions.
                                                             (line  306)
* bit-field-replace-same:                Undocumented extensions.
                                                             (line  307)
* bit-field-reverse:                     Undocumented extensions.
                                                             (line  308)
* bit-field-rotate:                      Undocumented extensions.
                                                             (line  309)
* bit-field-set:                         Undocumented extensions.
                                                             (line  310)
* bit-set?:                              Bitwise-operations on exact integers.
                                                             (line  244)
* bit-swap:                              Undocumented extensions.
                                                             (line  311)
* bits:                                  Undocumented extensions.
                                                             (line  296)
* bits->list:                            Undocumented extensions.
                                                             (line  297)
* bits->vector:                          Undocumented extensions.
                                                             (line  299)
* bitwise-and:                           Bitwise-operations on exact integers.
                                                             (line   48)
* bitwise-andc1:                         Bitwise-operations on exact integers.
                                                             (line   64)
* bitwise-andc2:                         Bitwise-operations on exact integers.
                                                             (line   76)
* bitwise-eqv:                           Bitwise-operations on exact integers.
                                                             (line   88)
* bitwise-fold:                          Undocumented extensions.
                                                             (line  312)
* bitwise-for-each:                      Undocumented extensions.
                                                             (line  313)
* bitwise-if:                            Undocumented extensions.
                                                             (line  314)
* bitwise-ior:                           Bitwise-operations on exact integers.
                                                             (line  105)
* bitwise-merge:                         Bitwise-operations on exact integers.
                                                             (line   32)
* bitwise-nand:                          Bitwise-operations on exact integers.
                                                             (line  122)
* bitwise-nor:                           Bitwise-operations on exact integers.
                                                             (line  134)
* bitwise-not:                           Bitwise-operations on exact integers.
                                                             (line  146)
* bitwise-orc1:                          Bitwise-operations on exact integers.
                                                             (line  158)
* bitwise-orc2:                          Bitwise-operations on exact integers.
                                                             (line  170)
* bitwise-unfold:                        Undocumented extensions.
                                                             (line  315)
* bitwise-xor:                           Bitwise-operations on exact integers.
                                                             (line  182)
* block:                                 Miscellaneous extensions.
                                                             (line  748)
* box:                                   Miscellaneous extensions.
                                                             (line  394)
* box?:                                  Miscellaneous extensions.
                                                             (line  395)
* boxes:                                 Miscellaneous extensions.
                                                             (line  398)
* break:                                 Procedures related to debugging.
                                                             (line  286)
* c-declare:                             c-declare.          (line    6)
* c-declare <1>:                         c-declare.          (line    6)
* c-define:                              c-define.           (line    6)
* c-define <1>:                          c-define.           (line    6)
* c-define-type:                         c-define-type.      (line    6)
* c-define-type <1>:                     c-define-type.      (line    6)
* c-initialize:                          c-initialize.       (line    6)
* c-initialize <1>:                      c-initialize.       (line    6)
* c-lambda:                              c-lambda.           (line    6)
* c-lambda <1>:                          c-lambda.           (line    6)
* call-with-current-continuation:        Extensions to standard procedures.
                                                             (line   11)
* call-with-input-file:                  Filesystem devices. (line    9)
* call-with-input-process:               Process devices.    (line    9)
* call-with-input-string:                String-ports.       (line    9)
* call-with-input-u8vector:              U8vector-ports.     (line    9)
* call-with-input-vector:                Vector-ports.       (line    9)
* call-with-output-file:                 Filesystem devices. (line   10)
* call-with-output-process:              Process devices.    (line   10)
* call-with-output-string:               String-ports.       (line   10)
* call-with-output-u8vector:             U8vector-ports.     (line   10)
* call-with-output-vector:               Vector-ports.       (line   10)
* call/cc:                               Extensions to standard procedures.
                                                             (line   12)
* car+cdr:                               Undocumented extensions.
                                                             (line  210)
* case-lambda:                           Undocumented extensions.
                                                             (line  199)
* ceiling-quotient:                      Division.           (line   14)
* ceiling-remainder:                     Division.           (line   16)
* ceiling/:                              Division.           (line   18)
* central installation directory:        Handling of file names.
                                                             (line    6)
* cfun-conversion-exception-arguments:   Exception objects related to C-interface.
                                                             (line    8)
* cfun-conversion-exception-code:        Exception objects related to C-interface.
                                                             (line    9)
* cfun-conversion-exception-message:     Exception objects related to C-interface.
                                                             (line   10)
* cfun-conversion-exception-procedure:   Exception objects related to C-interface.
                                                             (line    7)
* cfun-conversion-exception?:            Exception objects related to C-interface.
                                                             (line    6)
* char->integer:                         Extensions to character procedures.
                                                             (line    6)
* char-ci<=?:                            Extensions to character procedures.
                                                             (line   35)
* char-ci<?:                             Extensions to character procedures.
                                                             (line   33)
* char-ci=?:                             Extensions to character procedures.
                                                             (line   32)
* char-ci>=?:                            Extensions to character procedures.
                                                             (line   36)
* char-ci>?:                             Extensions to character procedures.
                                                             (line   34)
* char<=?:                               Extensions to character procedures.
                                                             (line   30)
* char<?:                                Extensions to character procedures.
                                                             (line   28)
* char=?:                                Extensions to character procedures.
                                                             (line   27)
* char>=?:                               Extensions to character procedures.
                                                             (line   31)
* char>?:                                Extensions to character procedures.
                                                             (line   29)
* circular-list:                         Undocumented extensions.
                                                             (line  251)
* circular-list?:                        Undocumented extensions.
                                                             (line  229)
* clear-bit-field:                       Bitwise-operations on exact integers.
                                                             (line  302)
* close-input-port:                      Object-port operations.
                                                             (line  135)
* close-output-port:                     Object-port operations.
                                                             (line  136)
* close-port:                            Object-port operations.
                                                             (line  137)
* command-args:                          Undocumented extensions.
                                                             (line   91)
* command-line:                          Scheme scripts.     (line   52)
* command-line <1>:                      Command line arguments.
                                                             (line    6)
* command-name:                          Undocumented extensions.
                                                             (line   90)
* compilation-target:                    Miscellaneous extensions.
                                                             (line  595)
* compile-file:                          Procedures specific to compiler.
                                                             (line   49)
* compile-file-to-target:                Procedures specific to compiler.
                                                             (line    9)
* compiler:                              GSC.                (line    6)
* compiler options:                      GSC batch mode.     (line   50)
* concatenate:                           Undocumented extensions.
                                                             (line  238)
* concatenate!:                          Undocumented extensions.
                                                             (line  239)
* cond-expand:                           Miscellaneous extensions.
                                                             (line  656)
* condition-variable-broadcast!:         Procedures.         (line  814)
* condition-variable-name:               Procedures.         (line  734)
* condition-variable-signal!:            Procedures.         (line  759)
* condition-variable-specific:           Procedures.         (line  742)
* condition-variable-specific-set!:      Procedures.         (line  743)
* condition-variable?:                   Procedures.         (line  709)
* configure-command-string:              Undocumented extensions.
                                                             (line  151)
* conjugate:                             Undocumented extensions.
                                                             (line  294)
* cons*:                                 Undocumented extensions.
                                                             (line  253)
* console-port:                          Undocumented extensions.
                                                             (line  115)
* constant-fold:                         Miscellaneous extensions.
                                                             (line  799)
* continuation-capture:                  Miscellaneous extensions.
                                                             (line  993)
* continuation-graft:                    Miscellaneous extensions.
                                                             (line  994)
* continuation-return:                   Miscellaneous extensions.
                                                             (line  995)
* continuation?:                         Miscellaneous extensions.
                                                             (line  992)
* continuations:                         continuations.      (line    6)
* copy-bit:                              Undocumented extensions.
                                                             (line  316)
* copy-bit-field:                        Bitwise-operations on exact integers.
                                                             (line  304)
* copy-file:                             Filesystem operations.
                                                             (line  100)
* cosh:                                  Undocumented extensions.
                                                             (line  288)
* cpu-time:                              Measuring time.     (line   55)
* create-directory:                      Filesystem operations.
                                                             (line    6)
* create-fifo:                           Filesystem operations.
                                                             (line   43)
* create-link:                           Filesystem operations.
                                                             (line   73)
* create-symbolic-link:                  Filesystem operations.
                                                             (line   81)
* create-temporary-directory:            Filesystem operations.
                                                             (line    7)
* current exception-handler:             Exception-handling. (line   44)
* current working directory:             Handling of file names.
                                                             (line    6)
* current working directory <1>:         Handling of file names.
                                                             (line   51)
* current-directory:                     Handling of file names.
                                                             (line   45)
* current-error-port:                    Other procedures related to I/O.
                                                             (line    8)
* current-exception-handler:             Exception-handling. (line   42)
* current-input-port:                    Other procedures related to I/O.
                                                             (line    6)
* current-jiffy:                         Undocumented extensions.
                                                             (line   80)
* current-output-port:                   Other procedures related to I/O.
                                                             (line    7)
* current-processor:                     Undocumented extensions.
                                                             (line   73)
* current-readtable:                     Other procedures related to I/O.
                                                             (line    9)
* current-second:                        Undocumented extensions.
                                                             (line   78)
* current-thread:                        Procedures.         (line    6)
* current-time:                          Measuring time.     (line   19)
* current-user-interrupt-handler:        Undocumented extensions.
                                                             (line  117)
* datum->syntax:                         Undocumented extensions.
                                                             (line  203)
* datum-parsing-exception-kind:          Exception objects related to the reader.
                                                             (line    7)
* datum-parsing-exception-parameters:    Exception objects related to the reader.
                                                             (line    8)
* datum-parsing-exception-readenv:       Exception objects related to the reader.
                                                             (line    9)
* datum-parsing-exception?:              Exception objects related to the reader.
                                                             (line    6)
* dead-end:                              Undocumented extensions.
                                                             (line  177)
* deadlock-exception?:                   Exception objects related to threads.
                                                             (line   21)
* debug:                                 GSC batch mode.     (line  253)
* debug <1>:                             Miscellaneous extensions.
                                                             (line  838)
* debug-environments:                    GSC batch mode.     (line  265)
* debug-environments <1>:                Miscellaneous extensions.
                                                             (line  878)
* debug-location:                        GSC batch mode.     (line  257)
* debug-location <1>:                    Miscellaneous extensions.
                                                             (line  852)
* debug-source:                          GSC batch mode.     (line  261)
* debug-source <1>:                      Miscellaneous extensions.
                                                             (line  865)
* declare:                               Miscellaneous extensions.
                                                             (line  734)
* default-random-source:                 Pseudo random numbers.
                                                             (line   14)
* default-user-interrupt-handler:        Undocumented extensions.
                                                             (line  118)
* defer-user-interrupts:                 Undocumented extensions.
                                                             (line  119)
* define:                                Extensions to standard special forms.
                                                             (line    7)
* define-cond-expand-feature:            Miscellaneous extensions.
                                                             (line  717)
* define-library:                        R7RS Compatible Modules.
                                                             (line   78)
* define-macro:                          Miscellaneous extensions.
                                                             (line  535)
* define-module-alias:                   Undocumented extensions.
                                                             (line  190)
* define-record-type:                    Undocumented extensions.
                                                             (line  181)
* define-structure:                      Records.            (line    6)
* define-syntax:                         Miscellaneous extensions.
                                                             (line  568)
* define-syntax <1>:                     Miscellaneous extensions.
                                                             (line  569)
* define-type:                           Undocumented extensions.
                                                             (line  182)
* define-type-of-thread:                 Undocumented extensions.
                                                             (line   43)
* define-values:                         Undocumented extensions.
                                                             (line  188)
* delete-directory:                      Filesystem operations.
                                                             (line  112)
* delete-file:                           Filesystem operations.
                                                             (line  107)
* delete-file-or-directory:              Filesystem operations.
                                                             (line  117)
* deserialization:                       Homogeneous numeric vectors.
                                                             (line  252)
* deserialization <1>:                   Readtables.         (line  127)
* directory-files:                       Filesystem operations.
                                                             (line  125)
* display-continuation-backtrace:        Miscellaneous extensions.
                                                             (line 1076)
* display-continuation-dynamic-environment: Miscellaneous extensions.
                                                             (line 1074)
* display-continuation-environment:      Miscellaneous extensions.
                                                             (line 1073)
* display-dynamic-environment?:          Procedures related to debugging.
                                                             (line  394)
* display-environment-set!:              Procedures related to debugging.
                                                             (line  374)
* display-exception:                     Miscellaneous extensions.
                                                             (line 1070)
* display-exception-in-context:          Miscellaneous extensions.
                                                             (line 1071)
* display-procedure-environment:         Miscellaneous extensions.
                                                             (line 1072)
* divide-by-zero-exception-arguments:    Exception objects related to type checking.
                                                             (line   91)
* divide-by-zero-exception-procedure:    Exception objects related to type checking.
                                                             (line   90)
* divide-by-zero-exception?:             Exception objects related to type checking.
                                                             (line   89)
* dotted-list?:                          Undocumented extensions.
                                                             (line  231)
* drop:                                  Undocumented extensions.
                                                             (line  269)
* eighth:                                Undocumented extensions.
                                                             (line  219)
* Emacs:                                 Emacs interface.    (line    6)
* eq?-hash:                              Hashing.            (line  123)
* equal?-hash:                           Hashing.            (line  147)
* eqv?-hash:                             Hashing.            (line  135)
* err-code->string:                      Undocumented extensions.
                                                             (line  123)
* error:                                 Other exception objects.
                                                             (line    9)
* error-exception-message:               Other exception objects.
                                                             (line    7)
* error-exception-parameters:            Other exception objects.
                                                             (line    8)
* error-exception?:                      Other exception objects.
                                                             (line    6)
* euclidean-quotient:                    Division.           (line   20)
* euclidean-remainder:                   Division.           (line   22)
* euclidean/:                            Division.           (line   24)
* eval:                                  Miscellaneous extensions.
                                                             (line  517)
* every-bit-set?:                        Undocumented extensions.
                                                             (line  317)
* executable-path:                       Undocumented extensions.
                                                             (line   88)
* exit:                                  Process termination.
                                                             (line    6)
* expression-parsing-exception-kind:     Exception objects related to evaluation and compilation.
                                                             (line    7)
* expression-parsing-exception-parameters: Exception objects related to evaluation and compilation.
                                                             (line    8)
* expression-parsing-exception-source:   Exception objects related to evaluation and compilation.
                                                             (line    9)
* expression-parsing-exception?:         Exception objects related to evaluation and compilation.
                                                             (line    6)
* extended-bindings:                     Miscellaneous extensions.
                                                             (line  807)
* extract-bit-field:                     Bitwise-operations on exact integers.
                                                             (line  300)
* f32vector:                             Homogeneous numeric vectors.
                                                             (line  196)
* f32vector->list:                       Homogeneous numeric vectors.
                                                             (line  201)
* f32vector-append:                      Homogeneous numeric vectors.
                                                             (line  209)
* f32vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  205)
* f32vector-copy:                        Homogeneous numeric vectors.
                                                             (line  206)
* f32vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  207)
* f32vector-fill!:                       Homogeneous numeric vectors.
                                                             (line  203)
* f32vector-length:                      Homogeneous numeric vectors.
                                                             (line  197)
* f32vector-ref:                         Homogeneous numeric vectors.
                                                             (line  198)
* f32vector-set:                         Homogeneous numeric vectors.
                                                             (line  199)
* f32vector-set!:                        Homogeneous numeric vectors.
                                                             (line  200)
* f32vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  213)
* f32vector?:                            Homogeneous numeric vectors.
                                                             (line  194)
* f64vector:                             Homogeneous numeric vectors.
                                                             (line  217)
* f64vector->list:                       Homogeneous numeric vectors.
                                                             (line  222)
* f64vector-append:                      Homogeneous numeric vectors.
                                                             (line  230)
* f64vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  226)
* f64vector-copy:                        Homogeneous numeric vectors.
                                                             (line  227)
* f64vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  228)
* f64vector-fill!:                       Homogeneous numeric vectors.
                                                             (line  224)
* f64vector-length:                      Homogeneous numeric vectors.
                                                             (line  218)
* f64vector-ref:                         Homogeneous numeric vectors.
                                                             (line  219)
* f64vector-set:                         Homogeneous numeric vectors.
                                                             (line  220)
* f64vector-set!:                        Homogeneous numeric vectors.
                                                             (line  221)
* f64vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  234)
* f64vector?:                            Homogeneous numeric vectors.
                                                             (line  215)
* FFI:                                   C-interface.        (line    6)
* fifth:                                 Undocumented extensions.
                                                             (line  216)
* file names:                            Handling of file names.
                                                             (line    6)
* file-attributes:                       File information.   (line  219)
* file-creation-time:                    File information.   (line  220)
* file-device:                           File information.   (line  209)
* file-exists-exception-arguments:       Exception objects related to the host environment.
                                                             (line   80)
* file-exists-exception-procedure:       Exception objects related to the host environment.
                                                             (line   79)
* file-exists-exception?:                Exception objects related to the host environment.
                                                             (line   78)
* file-exists?:                          File information.   (line    6)
* file-group:                            File information.   (line  214)
* file-info:                             File information.   (line   20)
* file-info-attributes:                  File information.   (line  188)
* file-info-creation-time:               File information.   (line  198)
* file-info-device:                      File information.   (line   94)
* file-info-group:                       File information.   (line  140)
* file-info-inode:                       File information.   (line  103)
* file-info-last-access-time:            File information.   (line  158)
* file-info-last-change-time:            File information.   (line  178)
* file-info-last-modification-time:      File information.   (line  168)
* file-info-mode:                        File information.   (line  112)
* file-info-number-of-links:             File information.   (line  121)
* file-info-owner:                       File information.   (line  131)
* file-info-size:                        File information.   (line  149)
* file-info-type:                        File information.   (line   65)
* file-info?:                            File information.   (line   53)
* file-inode:                            File information.   (line  210)
* file-last-access-and-modification-times-set!: File information.
                                                             (line  227)
* file-last-access-time:                 File information.   (line  216)
* file-last-change-time:                 File information.   (line  218)
* file-last-modification-time:           File information.   (line  217)
* file-mode:                             File information.   (line  211)
* file-number-of-links:                  File information.   (line  212)
* file-owner:                            File information.   (line  213)
* file-size:                             File information.   (line  215)
* file-type:                             File information.   (line  208)
* FILE.c:                                GSC batch mode.     (line    6)
* FILE.js:                               GSC batch mode.     (line    6)
* FILE.scm:                              GSC batch mode.     (line    6)
* FILE.six:                              GSC batch mode.     (line    6)
* FILE.sld:                              GSC batch mode.     (line    6)
* filter:                                Undocumented extensions.
                                                             (line  233)
* finite?:                               Undocumented extensions.
                                                             (line  278)
* first:                                 Undocumented extensions.
                                                             (line  212)
* first-set-bit:                         Bitwise-operations on exact integers.
                                                             (line  286)
* fixnum:                                Miscellaneous extensions.
                                                             (line  944)
* fixnum->flonum:                        Flonum specific operations.
                                                             (line    8)
* fixnum-overflow-exception-arguments:   Fixnum specific operations.
                                                             (line  106)
* fixnum-overflow-exception-procedure:   Fixnum specific operations.
                                                             (line  105)
* fixnum-overflow-exception?:            Fixnum specific operations.
                                                             (line  104)
* fixnum?:                               Fixnum specific operations.
                                                             (line    6)
* fl*:                                   Flonum specific operations.
                                                             (line   10)
* fl+:                                   Flonum specific operations.
                                                             (line   12)
* fl+*:                                  Flonum specific operations.
                                                             (line   87)
* fl-:                                   Flonum specific operations.
                                                             (line   14)
* fl/:                                   Flonum specific operations.
                                                             (line   16)
* fl<:                                   Flonum specific operations.
                                                             (line   18)
* fl<=:                                  Flonum specific operations.
                                                             (line   20)
* fl=:                                   Flonum specific operations.
                                                             (line   22)
* fl>:                                   Flonum specific operations.
                                                             (line   24)
* fl>=:                                  Flonum specific operations.
                                                             (line   26)
* flabs:                                 Flonum specific operations.
                                                             (line   28)
* flacos:                                Flonum specific operations.
                                                             (line   30)
* flacosh:                               Flonum specific operations.
                                                             (line   89)
* flasin:                                Flonum specific operations.
                                                             (line   32)
* flasinh:                               Flonum specific operations.
                                                             (line   91)
* flatan:                                Flonum specific operations.
                                                             (line   34)
* flatan <1>:                            Flonum specific operations.
                                                             (line   35)
* flatanh:                               Flonum specific operations.
                                                             (line   93)
* flceiling:                             Flonum specific operations.
                                                             (line   37)
* flcos:                                 Flonum specific operations.
                                                             (line   39)
* flcosh:                                Flonum specific operations.
                                                             (line   95)
* fldenominator:                         Flonum specific operations.
                                                             (line   41)
* fleven?:                               Flonum specific operations.
                                                             (line   43)
* flexp:                                 Flonum specific operations.
                                                             (line   45)
* flexpm1:                               Flonum specific operations.
                                                             (line   97)
* flexpt:                                Flonum specific operations.
                                                             (line   47)
* flfinite?:                             Flonum specific operations.
                                                             (line   51)
* flfloor:                               Flonum specific operations.
                                                             (line   53)
* flhypot:                               Flonum specific operations.
                                                             (line   49)
* flilogb:                               Flonum specific operations.
                                                             (line   99)
* flinfinite?:                           Flonum specific operations.
                                                             (line   55)
* flinteger?:                            Flonum specific operations.
                                                             (line   57)
* fllog:                                 Flonum specific operations.
                                                             (line   59)
* fllog1p:                               Flonum specific operations.
                                                             (line  101)
* flmax:                                 Flonum specific operations.
                                                             (line   61)
* flmin:                                 Flonum specific operations.
                                                             (line   63)
* flnan?:                                Flonum specific operations.
                                                             (line   65)
* flnegative?:                           Flonum specific operations.
                                                             (line   67)
* flnumerator:                           Flonum specific operations.
                                                             (line   69)
* floating point overflow:               System limitations. (line    6)
* flodd?:                                Flonum specific operations.
                                                             (line   71)
* flonum:                                Miscellaneous extensions.
                                                             (line  944)
* flonum?:                               Flonum specific operations.
                                                             (line    6)
* flpositive?:                           Flonum specific operations.
                                                             (line   73)
* flround:                               Flonum specific operations.
                                                             (line   75)
* flscalbn:                              Flonum specific operations.
                                                             (line  103)
* flsin:                                 Flonum specific operations.
                                                             (line   77)
* flsinh:                                Flonum specific operations.
                                                             (line  105)
* flsqrt:                                Flonum specific operations.
                                                             (line   79)
* flsquare:                              Flonum specific operations.
                                                             (line  107)
* fltan:                                 Flonum specific operations.
                                                             (line   81)
* fltanh:                                Flonum specific operations.
                                                             (line  109)
* fltruncate:                            Flonum specific operations.
                                                             (line   83)
* flzero?:                               Flonum specific operations.
                                                             (line   85)
* fold:                                  Undocumented extensions.
                                                             (line  246)
* fold-right:                            Undocumented extensions.
                                                             (line  247)
* force-output:                          Object-port operations.
                                                             (line   97)
* foreign function interface:            C-interface.        (line    6)
* foreign-address:                       Undocumented extensions.
                                                             (line  127)
* foreign-release!:                      Undocumented extensions.
                                                             (line  128)
* foreign-released?:                     Undocumented extensions.
                                                             (line  129)
* foreign-tags:                          Undocumented extensions.
                                                             (line  126)
* foreign?:                              Undocumented extensions.
                                                             (line  125)
* fourth:                                Undocumented extensions.
                                                             (line  215)
* future:                                Undocumented extensions.
                                                             (line  155)
* fx*:                                   Fixnum specific operations.
                                                             (line    8)
* fx+:                                   Fixnum specific operations.
                                                             (line   10)
* fx-:                                   Fixnum specific operations.
                                                             (line   12)
* fx<:                                   Fixnum specific operations.
                                                             (line   14)
* fx<=:                                  Fixnum specific operations.
                                                             (line   16)
* fx=:                                   Fixnum specific operations.
                                                             (line   18)
* fx>:                                   Fixnum specific operations.
                                                             (line   20)
* fx>=:                                  Fixnum specific operations.
                                                             (line   22)
* fxabs:                                 Fixnum specific operations.
                                                             (line   24)
* fxand:                                 Fixnum specific operations.
                                                             (line   26)
* fxandc1:                               Fixnum specific operations.
                                                             (line   28)
* fxandc2:                               Fixnum specific operations.
                                                             (line   30)
* fxarithmetic-shift:                    Fixnum specific operations.
                                                             (line   32)
* fxarithmetic-shift-left:               Fixnum specific operations.
                                                             (line   34)
* fxarithmetic-shift-right:              Fixnum specific operations.
                                                             (line   36)
* fxbit-count:                           Fixnum specific operations.
                                                             (line   38)
* fxbit-set?:                            Fixnum specific operations.
                                                             (line   40)
* fxeqv:                                 Fixnum specific operations.
                                                             (line   42)
* fxeven?:                               Fixnum specific operations.
                                                             (line   44)
* fxfirst-set-bit:                       Fixnum specific operations.
                                                             (line   46)
* fxif:                                  Fixnum specific operations.
                                                             (line   48)
* fxior:                                 Fixnum specific operations.
                                                             (line   50)
* fxlength:                              Fixnum specific operations.
                                                             (line   52)
* fxmax:                                 Fixnum specific operations.
                                                             (line   54)
* fxmin:                                 Fixnum specific operations.
                                                             (line   56)
* fxmodulo:                              Fixnum specific operations.
                                                             (line   58)
* fxnand:                                Fixnum specific operations.
                                                             (line   62)
* fxnegative?:                           Fixnum specific operations.
                                                             (line   60)
* fxnor:                                 Fixnum specific operations.
                                                             (line   64)
* fxnot:                                 Fixnum specific operations.
                                                             (line   66)
* fxodd?:                                Fixnum specific operations.
                                                             (line   68)
* fxorc1:                                Fixnum specific operations.
                                                             (line   70)
* fxorc2:                                Fixnum specific operations.
                                                             (line   72)
* fxpositive?:                           Fixnum specific operations.
                                                             (line   74)
* fxquotient:                            Fixnum specific operations.
                                                             (line   76)
* fxremainder:                           Fixnum specific operations.
                                                             (line   78)
* fxsquare:                              Fixnum specific operations.
                                                             (line  100)
* fxwrap*:                               Fixnum specific operations.
                                                             (line   80)
* fxwrap+:                               Fixnum specific operations.
                                                             (line   82)
* fxwrap-:                               Fixnum specific operations.
                                                             (line   84)
* fxwrapabs:                             Fixnum specific operations.
                                                             (line   86)
* fxwraparithmetic-shift:                Fixnum specific operations.
                                                             (line   88)
* fxwraparithmetic-shift-left:           Fixnum specific operations.
                                                             (line   90)
* fxwraplogical-shift-right:             Fixnum specific operations.
                                                             (line   92)
* fxwrapquotient:                        Fixnum specific operations.
                                                             (line   94)
* fxwrapsquare:                          Fixnum specific operations.
                                                             (line  102)
* fxxor:                                 Fixnum specific operations.
                                                             (line   96)
* fxzero?:                               Fixnum specific operations.
                                                             (line   98)
* Gambit:                                Top.                (line    6)
* Gambit <1>:                            The Gambit system.  (line    6)
* gambit-scheme:                         Miscellaneous extensions.
                                                             (line  743)
* gambit.el:                             Emacs interface.    (line    6)
* GAMBOPT, environment variable:         Runtime options.    (line  263)
* GC:                                    Procedures related to debugging.
                                                             (line  431)
* gc-report-set!:                        Procedures related to debugging.
                                                             (line  430)
* generate-proper-tail-calls:            Procedures related to debugging.
                                                             (line  332)
* generative-lambda:                     Miscellaneous extensions.
                                                             (line  905)
* generative-lambda <1>:                 Miscellaneous extensions.
                                                             (line  905)
* generic:                               Miscellaneous extensions.
                                                             (line  944)
* gensym:                                Miscellaneous extensions.
                                                             (line  447)
* get-environment-variable:              Undocumented extensions.
                                                             (line   84)
* get-environment-variables:             Undocumented extensions.
                                                             (line   86)
* get-output-string:                     String-ports.       (line   15)
* get-output-u8vector:                   U8vector-ports.     (line   15)
* get-output-vector:                     Vector-ports.       (line  134)
* getenv:                                Environment variables.
                                                             (line    6)
* group-info:                            Group information.  (line    6)
* group-info-gid:                        Group information.  (line   50)
* group-info-members:                    Group information.  (line   60)
* group-info-name:                       Group information.  (line   40)
* group-info?:                           Group information.  (line   28)
* gsc:                                   The Gambit system.  (line    6)
* gsc <1>:                               GSC batch mode.     (line    6)
* gsc <2>:                               Procedures specific to compiler.
                                                             (line   11)
* gsc <3>:                               Procedures specific to compiler.
                                                             (line   53)
* gsc <4>:                               Procedures specific to compiler.
                                                             (line  128)
* gsc <5>:                               Procedures specific to compiler.
                                                             (line  179)
* gsc <6>:                               Runtime options.    (line    6)
* gsc-script:                            Scheme scripts.     (line   36)
* gsi:                                   The Gambit system.  (line    6)
* gsi <1>:                               GSI.                (line   12)
* gsi <2>:                               Runtime options.    (line    6)
* gsi-script:                            Scheme scripts.     (line   32)
* guard:                                 Undocumented extensions.
                                                             (line  192)
* hashing:                               Hashing and weak references.
                                                             (line    6)
* heap-overflow-exception?:              Exception objects related to memory management.
                                                             (line    6)
* help:                                  Procedures related to debugging.
                                                             (line    6)
* help-browser:                          Procedures related to debugging.
                                                             (line    7)
* home directory:                        Handling of file names.
                                                             (line    6)
* Homogeneous numeric vectors:           Homogeneous numeric vectors.
                                                             (line    6)
* homogeneous vectors:                   Homogeneous vector syntax.
                                                             (line    6)
* host-info:                             Host information.   (line   15)
* host-info-addresses:                   Host information.   (line   67)
* host-info-aliases:                     Host information.   (line   57)
* host-info-name:                        Host information.   (line   47)
* host-info?:                            Host information.   (line   35)
* host-name:                             Host information.   (line    6)
* identity:                              Miscellaneous extensions.
                                                             (line  508)
* ieee-scheme:                           Miscellaneous extensions.
                                                             (line  743)
* import:                                Miscellaneous extensions.
                                                             (line  536)
* import <1>:                            ##namespace and ##import forms.
                                                             (line    8)
* inactive-thread-exception-arguments:   Undocumented extensions.
                                                             (line   57)
* inactive-thread-exception-procedure:   Undocumented extensions.
                                                             (line   56)
* inactive-thread-exception?:            Undocumented extensions.
                                                             (line   55)
* include:                               Miscellaneous extensions.
                                                             (line  536)
* include <1>:                           Legacy Modules.     (line   82)
* infinite?:                             Undocumented extensions.
                                                             (line  279)
* initial current working directory:     Handling of file names.
                                                             (line   47)
* initial-current-directory:             Handling of file names.
                                                             (line   44)
* initialized-thread-exception-arguments: Undocumented extensions.
                                                             (line   49)
* initialized-thread-exception-procedure: Undocumented extensions.
                                                             (line   48)
* initialized-thread-exception?:         Undocumented extensions.
                                                             (line   47)
* inline:                                Miscellaneous extensions.
                                                             (line  755)
* inline-primitives:                     Miscellaneous extensions.
                                                             (line  758)
* inlining-limit:                        Miscellaneous extensions.
                                                             (line  762)
* input-port-byte-position:              Filesystem devices. (line   87)
* input-port-bytes-buffered:             Undocumented extensions.
                                                             (line  102)
* input-port-char-position:              Undocumented extensions.
                                                             (line  170)
* input-port-characters-buffered:        Undocumented extensions.
                                                             (line  104)
* input-port-column:                     Character-port operations.
                                                             (line    7)
* input-port-line:                       Character-port operations.
                                                             (line    6)
* input-port-readtable:                  Character-port operations.
                                                             (line  161)
* input-port-readtable-set!:             Character-port operations.
                                                             (line  169)
* input-port-timeout-set!:               Object-port operations.
                                                             (line  162)
* input-port?:                           Object-port operations.
                                                             (line    6)
* installation directories:              Handling of file names.
                                                             (line    6)
* integer->char:                         Extensions to character procedures.
                                                             (line    7)
* integer-length:                        Bitwise-operations on exact integers.
                                                             (line  221)
* integer-nth-root:                      Integer square root and nth root.
                                                             (line   16)
* integer-sqrt:                          Integer square root and nth root.
                                                             (line    6)
* interpreter:                           GSI.                (line    6)
* interpreter <1>:                       GSC.                (line    6)
* interrupts-enabled:                    Miscellaneous extensions.
                                                             (line  825)
* invalid-hash-number-exception-arguments: Undocumented extensions.
                                                             (line  133)
* invalid-hash-number-exception-procedure: Undocumented extensions.
                                                             (line  132)
* invalid-hash-number-exception?:        Undocumented extensions.
                                                             (line  131)
* invalid-utf8-encoding-exception-arguments: Undocumented extensions.
                                                             (line   66)
* invalid-utf8-encoding-exception-procedure: Undocumented extensions.
                                                             (line   65)
* invalid-utf8-encoding-exception?:      Undocumented extensions.
                                                             (line   64)
* iota:                                  Undocumented extensions.
                                                             (line  249)
* jiffies-per-second:                    Undocumented extensions.
                                                             (line   82)
* join-timeout-exception-arguments:      Exception objects related to threads.
                                                             (line   70)
* join-timeout-exception-procedure:      Exception objects related to threads.
                                                             (line   69)
* join-timeout-exception?:               Exception objects related to threads.
                                                             (line   68)
* keyword->string:                       Miscellaneous extensions.
                                                             (line  423)
* keyword-expected-exception-arguments:  Exception objects related to procedure call.
                                                             (line  166)
* keyword-expected-exception-procedure:  Exception objects related to procedure call.
                                                             (line  165)
* keyword-expected-exception?:           Exception objects related to procedure call.
                                                             (line  164)
* keyword-hash:                          Hashing.            (line   87)
* keyword?:                              Miscellaneous extensions.
                                                             (line  422)
* keywords:                              Miscellaneous extensions.
                                                             (line  425)
* lambda:                                Extensions to standard special forms.
                                                             (line    6)
* lambda-lift:                           Miscellaneous extensions.
                                                             (line  796)
* last:                                  Undocumented extensions.
                                                             (line  272)
* last-pair:                             Undocumented extensions.
                                                             (line  273)
* LAST_.c:                               GSC batch mode.     (line  278)
* LAST_.js:                              GSC batch mode.     (line  278)
* length+:                               Undocumented extensions.
                                                             (line  208)
* length-mismatch-exception-arg-id:      Exception objects related to type checking.
                                                             (line  121)
* length-mismatch-exception-arguments:   Exception objects related to type checking.
                                                             (line  120)
* length-mismatch-exception-procedure:   Exception objects related to type checking.
                                                             (line  119)
* length-mismatch-exception?:            Exception objects related to type checking.
                                                             (line  118)
* limitations:                           System limitations. (line    6)
* link-flat:                             Procedures specific to compiler.
                                                             (line  177)
* link-incremental:                      Procedures specific to compiler.
                                                             (line  126)
* list->bits:                            Undocumented extensions.
                                                             (line  298)
* list->f32vector:                       Homogeneous numeric vectors.
                                                             (line  202)
* list->f64vector:                       Homogeneous numeric vectors.
                                                             (line  223)
* list->s16vector:                       Homogeneous numeric vectors.
                                                             (line   76)
* list->s32vector:                       Homogeneous numeric vectors.
                                                             (line  118)
* list->s64vector:                       Homogeneous numeric vectors.
                                                             (line  160)
* list->s8vector:                        Homogeneous numeric vectors.
                                                             (line   34)
* list->table:                           Tables.             (line  268)
* list->u16vector:                       Homogeneous numeric vectors.
                                                             (line   97)
* list->u32vector:                       Homogeneous numeric vectors.
                                                             (line  139)
* list->u64vector:                       Homogeneous numeric vectors.
                                                             (line  181)
* list->u8vector:                        Homogeneous numeric vectors.
                                                             (line   55)
* list-copy:                             Undocumented extensions.
                                                             (line  255)
* list-set:                              Undocumented extensions.
                                                             (line  243)
* list-set!:                             Undocumented extensions.
                                                             (line  244)
* list-sort:                             Undocumented extensions.
                                                             (line  275)
* list-sort!:                            Undocumented extensions.
                                                             (line  276)
* list-tabulate:                         Undocumented extensions.
                                                             (line  257)
* list=:                                 Undocumented extensions.
                                                             (line  241)
* load:                                  Procedures specific to compiler.
                                                             (line   53)
* load <1>:                              Legacy Modules.     (line   11)
* mailbox-receive-timeout-exception-arguments: Procedures.   (line  442)
* mailbox-receive-timeout-exception-procedure: Procedures.   (line  441)
* mailbox-receive-timeout-exception?:    Procedures.         (line  440)
* main:                                  Undocumented extensions.
                                                             (line  175)
* make-bitwise-generator:                Undocumented extensions.
                                                             (line  318)
* make-condition-variable:               Procedures.         (line  721)
* make-f32vector:                        Homogeneous numeric vectors.
                                                             (line  195)
* make-f64vector:                        Homogeneous numeric vectors.
                                                             (line  216)
* make-list:                             Undocumented extensions.
                                                             (line  259)
* make-mutex:                            Procedures.         (line  484)
* make-parameter:                        Dynamic environment.
                                                             (line   93)
* make-random-source:                    Pseudo random numbers.
                                                             (line   75)
* make-root-thread:                      Procedures.         (line   28)
* make-s16vector:                        Homogeneous numeric vectors.
                                                             (line   69)
* make-s32vector:                        Homogeneous numeric vectors.
                                                             (line  111)
* make-s64vector:                        Homogeneous numeric vectors.
                                                             (line  153)
* make-s8vector:                         Homogeneous numeric vectors.
                                                             (line   27)
* make-table:                            Tables.             (line   55)
* make-thread:                           Procedures.         (line   27)
* make-thread-group:                     Undocumented extensions.
                                                             (line    8)
* make-tls-context:                      Network devices.    (line  259)
* make-u16vector:                        Homogeneous numeric vectors.
                                                             (line   90)
* make-u32vector:                        Homogeneous numeric vectors.
                                                             (line  132)
* make-u64vector:                        Homogeneous numeric vectors.
                                                             (line  174)
* make-u8vector:                         Homogeneous numeric vectors.
                                                             (line   48)
* make-will:                             Wills.              (line   12)
* module-not-found-exception-arguments:  Undocumented extensions.
                                                             (line   70)
* module-not-found-exception-procedure:  Undocumented extensions.
                                                             (line   69)
* module-not-found-exception?:           Undocumented extensions.
                                                             (line   68)
* module-search-order-add!:              Installing Modules. (line   19)
* module-search-order-reset!:            Installing Modules. (line   18)
* module-whitelist-add!:                 Installing Modules. (line   51)
* module-whitelist-reset!:               Installing Modules. (line   50)
* mostly-fixnum:                         Miscellaneous extensions.
                                                             (line  950)
* mostly-fixnum-flonum:                  Miscellaneous extensions.
                                                             (line  950)
* mostly-flonum:                         Miscellaneous extensions.
                                                             (line  950)
* mostly-flonum-fixnum:                  Miscellaneous extensions.
                                                             (line  950)
* mostly-generic:                        Miscellaneous extensions.
                                                             (line  950)
* multiple-c-return-exception?:          Exception objects related to C-interface.
                                                             (line  127)
* mutex-lock!:                           Procedures.         (line  566)
* mutex-name:                            Procedures.         (line  499)
* mutex-specific:                        Procedures.         (line  506)
* mutex-specific-set!:                   Procedures.         (line  507)
* mutex-state:                           Procedures.         (line  539)
* mutex-unlock!:                         Procedures.         (line  659)
* mutex?:                                Procedures.         (line  472)
* namespace:                             ##namespace and ##import forms.
                                                             (line    6)
* nan?:                                  Undocumented extensions.
                                                             (line  280)
* network-info:                          Network information.
                                                             (line    6)
* network-info-aliases:                  Network information.
                                                             (line   52)
* network-info-name:                     Network information.
                                                             (line   42)
* network-info-number:                   Network information.
                                                             (line   62)
* network-info?:                         Network information.
                                                             (line   30)
* newline:                               Object-port operations.
                                                             (line   75)
* ninth:                                 Undocumented extensions.
                                                             (line  220)
* no-such-file-or-directory-exception-arguments: Exception objects related to the host environment.
                                                             (line   48)
* no-such-file-or-directory-exception-procedure: Exception objects related to the host environment.
                                                             (line   47)
* no-such-file-or-directory-exception?:  Exception objects related to the host environment.
                                                             (line   46)
* noncontinuable-exception-reason:       Exception-handling. (line  132)
* noncontinuable-exception?:             Exception-handling. (line  131)
* nonempty-input-port-character-buffer-exception-arguments: Undocumented extensions.
                                                             (line  107)
* nonempty-input-port-character-buffer-exception-procedure: Undocumented extensions.
                                                             (line  109)
* nonempty-input-port-character-buffer-exception?: Undocumented extensions.
                                                             (line  106)
* nonprocedure-operator-exception-arguments: Exception objects related to procedure call.
                                                             (line   72)
* nonprocedure-operator-exception-code:  Exception objects related to procedure call.
                                                             (line   73)
* nonprocedure-operator-exception-operator: Exception objects related to procedure call.
                                                             (line   71)
* nonprocedure-operator-exception-rte:   Exception objects related to procedure call.
                                                             (line   74)
* nonprocedure-operator-exception?:      Exception objects related to procedure call.
                                                             (line   70)
* normalized path:                       Handling of file names.
                                                             (line  108)
* not-in-compilation-context-exception-arguments: Exception objects related to evaluation and compilation.
                                                             (line  121)
* not-in-compilation-context-exception-procedure: Exception objects related to evaluation and compilation.
                                                             (line  120)
* not-in-compilation-context-exception?: Exception objects related to evaluation and compilation.
                                                             (line  119)
* not-pair?:                             Undocumented extensions.
                                                             (line  223)
* null-list?:                            Undocumented extensions.
                                                             (line  225)
* number-of-arguments-limit-exception-arguments: Exception objects related to procedure call.
                                                             (line   38)
* number-of-arguments-limit-exception-procedure: Exception objects related to procedure call.
                                                             (line   37)
* number-of-arguments-limit-exception?:  Exception objects related to procedure call.
                                                             (line   36)
* object file:                           Procedures specific to compiler.
                                                             (line   53)
* object->serial-number:                 Hashing.            (line    6)
* object->string:                        String-ports.       (line   42)
* object->u8vector:                      Homogeneous numeric vectors.
                                                             (line  250)
* open-directory:                        Directory-ports.    (line    6)
* open-dummy:                            Undocumented extensions.
                                                             (line   96)
* open-event-queue:                      Undocumented extensions.
                                                             (line  173)
* open-file:                             Filesystem devices. (line    6)
* open-input-file:                       Filesystem devices. (line    7)
* open-input-process:                    Process devices.    (line    7)
* open-input-string:                     String-ports.       (line    7)
* open-input-u8vector:                   U8vector-ports.     (line    7)
* open-input-vector:                     Vector-ports.       (line    7)
* open-output-bytevector:                Undocumented extensions.
                                                             (line  422)
* open-output-file:                      Filesystem devices. (line    8)
* open-output-process:                   Process devices.    (line    8)
* open-output-string:                    String-ports.       (line    8)
* open-output-u8vector:                  U8vector-ports.     (line    8)
* open-output-vector:                    Vector-ports.       (line    8)
* open-process:                          Process devices.    (line    6)
* open-string:                           String-ports.       (line    6)
* open-string-pipe:                      String-ports.       (line   13)
* open-tcp-client:                       Network devices.    (line    6)
* open-tcp-server:                       Network devices.    (line  116)
* open-u8vector:                         U8vector-ports.     (line    6)
* open-u8vector-pipe:                    U8vector-ports.     (line   13)
* open-udp:                              Network devices.    (line  379)
* open-vector:                           Vector-ports.       (line    6)
* open-vector-pipe:                      Vector-ports.       (line   89)
* optimize-dead-definitions:             Miscellaneous extensions.
                                                             (line  930)
* optimize-dead-local-variables:         Miscellaneous extensions.
                                                             (line  917)
* options, compiler:                     GSC batch mode.     (line   50)
* options, runtime:                      Runtime options.    (line    6)
* os-exception-arguments:                Exception objects related to the host environment.
                                                             (line    8)
* os-exception-code:                     Exception objects related to the host environment.
                                                             (line    9)
* os-exception-message:                  Exception objects related to the host environment.
                                                             (line   10)
* os-exception-procedure:                Exception objects related to the host environment.
                                                             (line    7)
* os-exception?:                         Exception objects related to the host environment.
                                                             (line    6)
* output-port-byte-position:             Filesystem devices. (line   88)
* output-port-char-position:             Undocumented extensions.
                                                             (line  171)
* output-port-column:                    Character-port operations.
                                                             (line    9)
* output-port-line:                      Character-port operations.
                                                             (line    8)
* output-port-readtable:                 Character-port operations.
                                                             (line  162)
* output-port-readtable-set!:            Character-port operations.
                                                             (line  170)
* output-port-timeout-set!:              Object-port operations.
                                                             (line  163)
* output-port-width:                     Character-port operations.
                                                             (line   32)
* output-port?:                          Object-port operations.
                                                             (line    7)
* overflow, floating point:              System limitations. (line    6)
* parameterize:                          Dynamic environment.
                                                             (line  180)
* partition:                             Undocumented extensions.
                                                             (line  235)
* path-directory:                        Handling of file names.
                                                             (line  138)
* path-expand:                           Handling of file names.
                                                             (line   78)
* path-extension:                        Handling of file names.
                                                             (line  136)
* path-normalize:                        Handling of file names.
                                                             (line  106)
* path-strip-directory:                  Handling of file names.
                                                             (line  139)
* path-strip-extension:                  Handling of file names.
                                                             (line  137)
* path-strip-trailing-directory-separator: Handling of file names.
                                                             (line  140)
* path-strip-volume:                     Handling of file names.
                                                             (line  142)
* path-volume:                           Handling of file names.
                                                             (line  141)
* peek-char:                             Character-port operations.
                                                             (line   62)
* peek-u8:                               Byte-port operations.
                                                             (line    7)
* permission-denied-exception-arguments: Exception objects related to the host environment.
                                                             (line  114)
* permission-denied-exception-procedure: Exception objects related to the host environment.
                                                             (line  113)
* permission-denied-exception?:          Exception objects related to the host environment.
                                                             (line  112)
* poll-on-return:                        Miscellaneous extensions.
                                                             (line  831)
* poll-point:                            Undocumented extensions.
                                                             (line  179)
* port-io-exception-handler-set!:        Undocumented extensions.
                                                             (line  100)
* port-settings-set!:                    Undocumented extensions.
                                                             (line   98)
* port?:                                 Object-port operations.
                                                             (line    8)
* pp:                                    Procedures related to debugging.
                                                             (line  414)
* pretty-print:                          Procedures related to debugging.
                                                             (line  401)
* primordial-exception-handler:          Undocumented extensions.
                                                             (line  121)
* print:                                 Other procedures related to I/O.
                                                             (line   15)
* println:                               Other procedures related to I/O.
                                                             (line   16)
* process-pid:                           Process devices.    (line  138)
* process-status:                        Process devices.    (line  149)
* process-times:                         Measuring time.     (line   54)
* processor-id:                          Undocumented extensions.
                                                             (line   74)
* processor?:                            Undocumented extensions.
                                                             (line   72)
* proper tail-calls:                     Procedures related to debugging.
                                                             (line  334)
* proper tail-calls <1>:                 Miscellaneous extensions.
                                                             (line  892)
* proper-list?:                          Undocumented extensions.
                                                             (line  227)
* proper-tail-calls:                     Miscellaneous extensions.
                                                             (line  892)
* protocol-info:                         Protocol information.
                                                             (line    6)
* protocol-info-aliases:                 Protocol information.
                                                             (line   46)
* protocol-info-name:                    Protocol information.
                                                             (line   36)
* protocol-info-number:                  Protocol information.
                                                             (line   56)
* protocol-info?:                        Protocol information.
                                                             (line   24)
* r4rs-scheme:                           Miscellaneous extensions.
                                                             (line  743)
* r5rs-scheme:                           Miscellaneous extensions.
                                                             (line  743)
* r7rs-guard:                            Undocumented extensions.
                                                             (line  193)
* r7rs-raise:                            Undocumented extensions.
                                                             (line  196)
* r7rs-raise-continuable:                Undocumented extensions.
                                                             (line  197)
* r7rs-with-exception-handler:           Undocumented extensions.
                                                             (line  195)
* raise:                                 Exception-handling. (line  113)
* random-f64vector:                      Pseudo random numbers.
                                                             (line   62)
* random-integer:                        Pseudo random numbers.
                                                             (line   20)
* random-real:                           Pseudo random numbers.
                                                             (line   36)
* random-source-make-f64vectors:         Pseudo random numbers.
                                                             (line  206)
* random-source-make-integers:           Pseudo random numbers.
                                                             (line  153)
* random-source-make-reals:              Pseudo random numbers.
                                                             (line  170)
* random-source-make-u8vectors:          Pseudo random numbers.
                                                             (line  189)
* random-source-pseudo-randomize!:       Pseudo random numbers.
                                                             (line  120)
* random-source-randomize!:              Pseudo random numbers.
                                                             (line  119)
* random-source-state-ref:               Pseudo random numbers.
                                                             (line   99)
* random-source-state-set!:              Pseudo random numbers.
                                                             (line  100)
* random-source?:                        Pseudo random numbers.
                                                             (line   87)
* random-u8vector:                       Pseudo random numbers.
                                                             (line   49)
* range-exception-arg-id:                Exception objects related to type checking.
                                                             (line   56)
* range-exception-arguments:             Exception objects related to type checking.
                                                             (line   55)
* range-exception-procedure:             Exception objects related to type checking.
                                                             (line   54)
* range-exception?:                      Exception objects related to type checking.
                                                             (line   53)
* read:                                  Object-port operations.
                                                             (line   30)
* read-all:                              Object-port operations.
                                                             (line   44)
* read-char:                             Character-port operations.
                                                             (line   43)
* read-file-string:                      Other procedures related to I/O.
                                                             (line   43)
* read-file-string-list:                 Other procedures related to I/O.
                                                             (line   44)
* read-file-u8vector:                    Other procedures related to I/O.
                                                             (line   45)
* read-line:                             Character-port operations.
                                                             (line   90)
* read-substring:                        Character-port operations.
                                                             (line  125)
* read-subu8vector:                      Byte-port operations.
                                                             (line   49)
* read-u8:                               Byte-port operations.
                                                             (line    6)
* readtable-case-conversion?:            Readtables.         (line   35)
* readtable-case-conversion?-set:        Readtables.         (line   36)
* readtable-comment-handler:             Undocumented extensions.
                                                             (line  419)
* readtable-comment-handler-set:         Undocumented extensions.
                                                             (line  420)
* readtable-eval-allowed?:               Readtables.         (line  276)
* readtable-eval-allowed?-set:           Readtables.         (line  277)
* readtable-keywords-allowed?:           Readtables.         (line   82)
* readtable-keywords-allowed?-set:       Readtables.         (line   83)
* readtable-max-unescaped-char:          Readtables.         (line  420)
* readtable-max-unescaped-char-set:      Readtables.         (line  421)
* readtable-max-write-length:            Readtables.         (line  387)
* readtable-max-write-length-set:        Readtables.         (line  388)
* readtable-max-write-level:             Readtables.         (line  353)
* readtable-max-write-level-set:         Readtables.         (line  354)
* readtable-sharing-allowed?:            Readtables.         (line  125)
* readtable-sharing-allowed?-set:        Readtables.         (line  126)
* readtable-start-syntax:                Readtables.         (line  461)
* readtable-start-syntax-set:            Readtables.         (line  462)
* readtable-write-cdr-read-macros?:      Readtables.         (line  300)
* readtable-write-cdr-read-macros?-set:  Readtables.         (line  301)
* readtable-write-extended-read-macros?: Readtables.         (line  302)
* readtable-write-extended-read-macros?-set: Readtables.     (line  303)
* readtable?:                            Readtables.         (line   23)
* real-time:                             Measuring time.     (line   56)
* receive:                               Undocumented extensions.
                                                             (line  186)
* relative path:                         Handling of file names.
                                                             (line    6)
* relative path <1>:                     Handling of file names.
                                                             (line   80)
* remove:                                Undocumented extensions.
                                                             (line  234)
* remq:                                  Undocumented extensions.
                                                             (line  236)
* rename-file:                           Filesystem operations.
                                                             (line   89)
* repl-display-environment?:             Procedures related to debugging.
                                                             (line  385)
* repl-error-port:                       Undocumented extensions.
                                                             (line  114)
* repl-input-port:                       Undocumented extensions.
                                                             (line  112)
* repl-output-port:                      Undocumented extensions.
                                                             (line  113)
* repl-result-history-max-length-set!:   Procedures related to debugging.
                                                             (line   97)
* repl-result-history-ref:               Procedures related to debugging.
                                                             (line   96)
* replace-bit-field:                     Bitwise-operations on exact integers.
                                                             (line  303)
* reverse!:                              Undocumented extensions.
                                                             (line  261)
* round-quotient:                        Division.           (line   26)
* round-remainder:                       Division.           (line   28)
* round/:                                Division.           (line   30)
* rpc-remote-error-exception-arguments:  Undocumented extensions.
                                                             (line   61)
* rpc-remote-error-exception-message:    Undocumented extensions.
                                                             (line   62)
* rpc-remote-error-exception-procedure:  Undocumented extensions.
                                                             (line   60)
* rpc-remote-error-exception?:           Undocumented extensions.
                                                             (line   59)
* run-time-bindings:                     Miscellaneous extensions.
                                                             (line  812)
* runtime options:                       Runtime options.    (line    6)
* s16vector:                             Homogeneous numeric vectors.
                                                             (line   70)
* s16vector->list:                       Homogeneous numeric vectors.
                                                             (line   75)
* s16vector-append:                      Homogeneous numeric vectors.
                                                             (line   83)
* s16vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line   79)
* s16vector-copy:                        Homogeneous numeric vectors.
                                                             (line   80)
* s16vector-copy!:                       Homogeneous numeric vectors.
                                                             (line   81)
* s16vector-fill!:                       Homogeneous numeric vectors.
                                                             (line   77)
* s16vector-length:                      Homogeneous numeric vectors.
                                                             (line   71)
* s16vector-ref:                         Homogeneous numeric vectors.
                                                             (line   72)
* s16vector-set:                         Homogeneous numeric vectors.
                                                             (line   73)
* s16vector-set!:                        Homogeneous numeric vectors.
                                                             (line   74)
* s16vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line   87)
* s16vector?:                            Homogeneous numeric vectors.
                                                             (line   68)
* s32vector:                             Homogeneous numeric vectors.
                                                             (line  112)
* s32vector->list:                       Homogeneous numeric vectors.
                                                             (line  117)
* s32vector-append:                      Homogeneous numeric vectors.
                                                             (line  125)
* s32vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  121)
* s32vector-copy:                        Homogeneous numeric vectors.
                                                             (line  122)
* s32vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  123)
* s32vector-fill!:                       Homogeneous numeric vectors.
                                                             (line  119)
* s32vector-length:                      Homogeneous numeric vectors.
                                                             (line  113)
* s32vector-ref:                         Homogeneous numeric vectors.
                                                             (line  114)
* s32vector-set:                         Homogeneous numeric vectors.
                                                             (line  115)
* s32vector-set!:                        Homogeneous numeric vectors.
                                                             (line  116)
* s32vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  129)
* s32vector?:                            Homogeneous numeric vectors.
                                                             (line  110)
* s64vector:                             Homogeneous numeric vectors.
                                                             (line  154)
* s64vector->list:                       Homogeneous numeric vectors.
                                                             (line  159)
* s64vector-append:                      Homogeneous numeric vectors.
                                                             (line  167)
* s64vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  163)
* s64vector-copy:                        Homogeneous numeric vectors.
                                                             (line  164)
* s64vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  165)
* s64vector-fill!:                       Homogeneous numeric vectors.
                                                             (line  161)
* s64vector-length:                      Homogeneous numeric vectors.
                                                             (line  155)
* s64vector-ref:                         Homogeneous numeric vectors.
                                                             (line  156)
* s64vector-set:                         Homogeneous numeric vectors.
                                                             (line  157)
* s64vector-set!:                        Homogeneous numeric vectors.
                                                             (line  158)
* s64vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  171)
* s64vector?:                            Homogeneous numeric vectors.
                                                             (line  152)
* s8vector:                              Homogeneous numeric vectors.
                                                             (line   28)
* s8vector->list:                        Homogeneous numeric vectors.
                                                             (line   33)
* s8vector-append:                       Homogeneous numeric vectors.
                                                             (line   41)
* s8vector-concatenate:                  Homogeneous numeric vectors.
                                                             (line   37)
* s8vector-copy:                         Homogeneous numeric vectors.
                                                             (line   38)
* s8vector-copy!:                        Homogeneous numeric vectors.
                                                             (line   39)
* s8vector-fill!:                        Homogeneous numeric vectors.
                                                             (line   35)
* s8vector-length:                       Homogeneous numeric vectors.
                                                             (line   29)
* s8vector-ref:                          Homogeneous numeric vectors.
                                                             (line   30)
* s8vector-set:                          Homogeneous numeric vectors.
                                                             (line   31)
* s8vector-set!:                         Homogeneous numeric vectors.
                                                             (line   32)
* s8vector-shrink!:                      Homogeneous numeric vectors.
                                                             (line   45)
* s8vector?:                             Homogeneous numeric vectors.
                                                             (line   26)
* safe:                                  Miscellaneous extensions.
                                                             (line  818)
* scheduler-exception-reason:            Exception objects related to threads.
                                                             (line    7)
* scheduler-exception?:                  Exception objects related to threads.
                                                             (line    6)
* Scheme:                                The Gambit system.  (line    6)
* Scheme, implementation of:             Top.                (line    6)
* scheme-ieee-1178-1990:                 Scheme scripts.     (line   23)
* scheme-r4rs:                           Scheme scripts.     (line   15)
* scheme-r5rs:                           Scheme scripts.     (line   19)
* scheme-srfi-0:                         Scheme scripts.     (line   27)
* script-directory:                      Undocumented extensions.
                                                             (line   94)
* script-file:                           Undocumented extensions.
                                                             (line   93)
* second:                                Undocumented extensions.
                                                             (line  213)
* seconds->time:                         Measuring time.     (line   22)
* separate:                              Miscellaneous extensions.
                                                             (line  748)
* serial-number->object:                 Hashing.            (line    7)
* serialization:                         Homogeneous numeric vectors.
                                                             (line  252)
* serialization <1>:                     Readtables.         (line  127)
* service-info:                          Service information.
                                                             (line    6)
* service-info-aliases:                  Service information.
                                                             (line   54)
* service-info-name:                     Service information.
                                                             (line   44)
* service-info-port-number:              Service information.
                                                             (line   64)
* service-info-protocol:                 Service information.
                                                             (line   74)
* service-info?:                         Service information.
                                                             (line   32)
* set-box!:                              Miscellaneous extensions.
                                                             (line  397)
* setenv:                                Environment variables.
                                                             (line    7)
* seventh:                               Undocumented extensions.
                                                             (line  218)
* sfun-conversion-exception-arguments:   Exception objects related to C-interface.
                                                             (line   71)
* sfun-conversion-exception-code:        Exception objects related to C-interface.
                                                             (line   72)
* sfun-conversion-exception-message:     Exception objects related to C-interface.
                                                             (line   73)
* sfun-conversion-exception-procedure:   Exception objects related to C-interface.
                                                             (line   70)
* sfun-conversion-exception?:            Exception objects related to C-interface.
                                                             (line   69)
* shell-command:                         Shell command execution.
                                                             (line    6)
* sinh:                                  Undocumented extensions.
                                                             (line  290)
* six-script:                            Scheme scripts.     (line   40)
* six.!:                                 Undocumented extensions.
                                                             (line  321)
* six.!x:                                Undocumented extensions.
                                                             (line  322)
* six.&x:                                Undocumented extensions.
                                                             (line  323)
* six.**x:                               Undocumented extensions.
                                                             (line  324)
* six.*x:                                Undocumented extensions.
                                                             (line  325)
* six.++x:                               Undocumented extensions.
                                                             (line  326)
* six.+x:                                Undocumented extensions.
                                                             (line  327)
* six.--x:                               Undocumented extensions.
                                                             (line  328)
* six.-x:                                Undocumented extensions.
                                                             (line  329)
* six.arrow:                             Undocumented extensions.
                                                             (line  330)
* six.asyncx:                            Undocumented extensions.
                                                             (line  331)
* six.awaitx:                            Undocumented extensions.
                                                             (line  332)
* six.break:                             Undocumented extensions.
                                                             (line  333)
* six.call:                              Undocumented extensions.
                                                             (line  334)
* six.case:                              Undocumented extensions.
                                                             (line  335)
* six.clause:                            Undocumented extensions.
                                                             (line  336)
* six.compound:                          Undocumented extensions.
                                                             (line  337)
* six.cons:                              Undocumented extensions.
                                                             (line  338)
* six.continue:                          Undocumented extensions.
                                                             (line  339)
* six.define-procedure:                  Undocumented extensions.
                                                             (line  340)
* six.define-variable:                   Undocumented extensions.
                                                             (line  341)
* six.do-while:                          Undocumented extensions.
                                                             (line  342)
* six.dot:                               Undocumented extensions.
                                                             (line  343)
* six.for:                               Undocumented extensions.
                                                             (line  344)
* six.from-import:                       Undocumented extensions.
                                                             (line  346)
* six.from-import-*:                     Undocumented extensions.
                                                             (line  347)
* six.goto:                              Undocumented extensions.
                                                             (line  345)
* six.identifier:                        Undocumented extensions.
                                                             (line  348)
* six.if:                                Undocumented extensions.
                                                             (line  349)
* six.import:                            Undocumented extensions.
                                                             (line  350)
* six.index:                             Undocumented extensions.
                                                             (line  351)
* six.infix:                             Undocumented extensions.
                                                             (line  320)
* six.label:                             Undocumented extensions.
                                                             (line  352)
* six.list:                              Undocumented extensions.
                                                             (line  353)
* six.literal:                           Undocumented extensions.
                                                             (line  354)
* six.make-array:                        Undocumented extensions.
                                                             (line  355)
* six.new:                               Undocumented extensions.
                                                             (line  356)
* six.notx:                              Undocumented extensions.
                                                             (line  414)
* six.null:                              Undocumented extensions.
                                                             (line  357)
* six.procedure:                         Undocumented extensions.
                                                             (line  358)
* six.procedure-body:                    Undocumented extensions.
                                                             (line  359)
* six.return:                            Undocumented extensions.
                                                             (line  360)
* six.switch:                            Undocumented extensions.
                                                             (line  361)
* six.typeofx:                           Undocumented extensions.
                                                             (line  362)
* six.while:                             Undocumented extensions.
                                                             (line  363)
* six.x!==y:                             Undocumented extensions.
                                                             (line  364)
* six.x!=y:                              Undocumented extensions.
                                                             (line  365)
* six.x%=y:                              Undocumented extensions.
                                                             (line  366)
* six.x%y:                               Undocumented extensions.
                                                             (line  367)
* six.x&&y:                              Undocumented extensions.
                                                             (line  368)
* six.x&=y:                              Undocumented extensions.
                                                             (line  369)
* six.x&y:                               Undocumented extensions.
                                                             (line  370)
* six.x**=y:                             Undocumented extensions.
                                                             (line  371)
* six.x**y:                              Undocumented extensions.
                                                             (line  372)
* six.x*=y:                              Undocumented extensions.
                                                             (line  373)
* six.x*y:                               Undocumented extensions.
                                                             (line  374)
* six.x++:                               Undocumented extensions.
                                                             (line  377)
* six.x+=y:                              Undocumented extensions.
                                                             (line  378)
* six.x+y:                               Undocumented extensions.
                                                             (line  379)
* six.x--:                               Undocumented extensions.
                                                             (line  381)
* six.x-=y:                              Undocumented extensions.
                                                             (line  382)
* six.x-y:                               Undocumented extensions.
                                                             (line  383)
* six.x//=y:                             Undocumented extensions.
                                                             (line  384)
* six.x//y:                              Undocumented extensions.
                                                             (line  385)
* six.x/=y:                              Undocumented extensions.
                                                             (line  386)
* six.x/y:                               Undocumented extensions.
                                                             (line  387)
* six.x:-y:                              Undocumented extensions.
                                                             (line  388)
* six.x:=y:                              Undocumented extensions.
                                                             (line  389)
* six.x:y:                               Undocumented extensions.
                                                             (line  390)
* six.x<<=y:                             Undocumented extensions.
                                                             (line  391)
* six.x<<y:                              Undocumented extensions.
                                                             (line  392)
* six.x<=y:                              Undocumented extensions.
                                                             (line  393)
* six.x<y:                               Undocumented extensions.
                                                             (line  394)
* six.x===y:                             Undocumented extensions.
                                                             (line  395)
* six.x==y:                              Undocumented extensions.
                                                             (line  396)
* six.x=y:                               Undocumented extensions.
                                                             (line  397)
* six.x>=y:                              Undocumented extensions.
                                                             (line  398)
* six.x>>=y:                             Undocumented extensions.
                                                             (line  401)
* six.x>>>=y:                            Undocumented extensions.
                                                             (line  399)
* six.x>>>y:                             Undocumented extensions.
                                                             (line  400)
* six.x>>y:                              Undocumented extensions.
                                                             (line  402)
* six.x>y:                               Undocumented extensions.
                                                             (line  403)
* six.x?y:z:                             Undocumented extensions.
                                                             (line  404)
* six.x@=y:                              Undocumented extensions.
                                                             (line  375)
* six.x@y:                               Undocumented extensions.
                                                             (line  376)
* six.xandy:                             Undocumented extensions.
                                                             (line  410)
* six.xinstanceofy:                      Undocumented extensions.
                                                             (line  411)
* six.xiny:                              Undocumented extensions.
                                                             (line  412)
* six.xisy:                              Undocumented extensions.
                                                             (line  413)
* six.xory:                              Undocumented extensions.
                                                             (line  415)
* six.x^=y:                              Undocumented extensions.
                                                             (line  405)
* six.x^y:                               Undocumented extensions.
                                                             (line  406)
* six.yieldx:                            Undocumented extensions.
                                                             (line  417)
* six.~x:                                Undocumented extensions.
                                                             (line  416)
* sixth:                                 Undocumented extensions.
                                                             (line  217)
* socket-info-address:                   Undocumented extensions.
                                                             (line  142)
* socket-info-family:                    Undocumented extensions.
                                                             (line  143)
* socket-info-port-number:               Undocumented extensions.
                                                             (line  144)
* socket-info?:                          Undocumented extensions.
                                                             (line  141)
* split-at:                              Undocumented extensions.
                                                             (line  270)
* stack-overflow-exception?:             Exception objects related to memory management.
                                                             (line   28)
* standard-bindings:                     Miscellaneous extensions.
                                                             (line  802)
* started-thread-exception-arguments:    Exception objects related to threads.
                                                             (line  105)
* started-thread-exception-procedure:    Exception objects related to threads.
                                                             (line  104)
* started-thread-exception?:             Exception objects related to threads.
                                                             (line  103)
* step:                                  Procedures related to debugging.
                                                             (line  210)
* step-level-set!:                       Procedures related to debugging.
                                                             (line  211)
* string->keyword:                       Miscellaneous extensions.
                                                             (line  424)
* string->uninterned-keyword:            Miscellaneous extensions.
                                                             (line  487)
* string->uninterned-symbol:             Miscellaneous extensions.
                                                             (line  464)
* string-ci<=?:                          Extensions to string procedures.
                                                             (line   14)
* string-ci<?:                           Extensions to string procedures.
                                                             (line   12)
* string-ci=?:                           Extensions to string procedures.
                                                             (line   11)
* string-ci=?-hash:                      Hashing.            (line  111)
* string-ci>=?:                          Extensions to string procedures.
                                                             (line   15)
* string-ci>?:                           Extensions to string procedures.
                                                             (line   13)
* string-concatenate:                    Miscellaneous extensions.
                                                             (line  333)
* string-contains:                       Miscellaneous extensions.
                                                             (line  306)
* string-contains-ci:                    Miscellaneous extensions.
                                                             (line  307)
* string-prefix-ci?:                     Miscellaneous extensions.
                                                             (line  259)
* string-prefix-length:                  Miscellaneous extensions.
                                                             (line  206)
* string-prefix-length-ci:               Miscellaneous extensions.
                                                             (line  208)
* string-prefix?:                        Miscellaneous extensions.
                                                             (line  258)
* string-set:                            Miscellaneous extensions.
                                                             (line  192)
* string-shrink!:                        Miscellaneous extensions.
                                                             (line  380)
* string-suffix-ci?:                     Miscellaneous extensions.
                                                             (line  283)
* string-suffix-length:                  Miscellaneous extensions.
                                                             (line  233)
* string-suffix-length-ci:               Miscellaneous extensions.
                                                             (line  235)
* string-suffix?:                        Miscellaneous extensions.
                                                             (line  282)
* string<=?:                             Extensions to string procedures.
                                                             (line    9)
* string<?:                              Extensions to string procedures.
                                                             (line    7)
* string=?:                              Extensions to string procedures.
                                                             (line    6)
* string=?-hash:                         Hashing.            (line   99)
* string>=?:                             Extensions to string procedures.
                                                             (line   10)
* string>?:                              Extensions to string procedures.
                                                             (line    8)
* subf32vector:                          Homogeneous numeric vectors.
                                                             (line  210)
* subf32vector-fill!:                    Homogeneous numeric vectors.
                                                             (line  204)
* subf32vector-move!:                    Homogeneous numeric vectors.
                                                             (line  211)
* subf64vector:                          Homogeneous numeric vectors.
                                                             (line  231)
* subf64vector-fill!:                    Homogeneous numeric vectors.
                                                             (line  225)
* subf64vector-move!:                    Homogeneous numeric vectors.
                                                             (line  232)
* subs16vector:                          Homogeneous numeric vectors.
                                                             (line   84)
* subs16vector-fill!:                    Homogeneous numeric vectors.
                                                             (line   78)
* subs16vector-move!:                    Homogeneous numeric vectors.
                                                             (line   85)
* subs32vector:                          Homogeneous numeric vectors.
                                                             (line  126)
* subs32vector-fill!:                    Homogeneous numeric vectors.
                                                             (line  120)
* subs32vector-move!:                    Homogeneous numeric vectors.
                                                             (line  127)
* subs64vector:                          Homogeneous numeric vectors.
                                                             (line  168)
* subs64vector-fill!:                    Homogeneous numeric vectors.
                                                             (line  162)
* subs64vector-move!:                    Homogeneous numeric vectors.
                                                             (line  169)
* subs8vector:                           Homogeneous numeric vectors.
                                                             (line   42)
* subs8vector-fill!:                     Homogeneous numeric vectors.
                                                             (line   36)
* subs8vector-move!:                     Homogeneous numeric vectors.
                                                             (line   43)
* substring-fill!:                       Miscellaneous extensions.
                                                             (line  349)
* substring-move!:                       Miscellaneous extensions.
                                                             (line  363)
* subu16vector:                          Homogeneous numeric vectors.
                                                             (line  105)
* subu16vector-fill!:                    Homogeneous numeric vectors.
                                                             (line   99)
* subu16vector-move!:                    Homogeneous numeric vectors.
                                                             (line  106)
* subu32vector:                          Homogeneous numeric vectors.
                                                             (line  147)
* subu32vector-fill!:                    Homogeneous numeric vectors.
                                                             (line  141)
* subu32vector-move!:                    Homogeneous numeric vectors.
                                                             (line  148)
* subu64vector:                          Homogeneous numeric vectors.
                                                             (line  189)
* subu64vector-fill!:                    Homogeneous numeric vectors.
                                                             (line  183)
* subu64vector-move!:                    Homogeneous numeric vectors.
                                                             (line  190)
* subu8vector:                           Homogeneous numeric vectors.
                                                             (line   63)
* subu8vector-fill!:                     Homogeneous numeric vectors.
                                                             (line   57)
* subu8vector-move!:                     Homogeneous numeric vectors.
                                                             (line   64)
* subvector:                             Miscellaneous extensions.
                                                             (line    6)
* subvector-fill!:                       Miscellaneous extensions.
                                                             (line   91)
* subvector-move!:                       Miscellaneous extensions.
                                                             (line  105)
* symbol-hash:                           Hashing.            (line   75)
* syntax:                                Undocumented extensions.
                                                             (line  201)
* syntax->datum:                         Undocumented extensions.
                                                             (line  204)
* syntax->list:                          Undocumented extensions.
                                                             (line  205)
* syntax->vector:                        Undocumented extensions.
                                                             (line  206)
* syntax-case:                           Miscellaneous extensions.
                                                             (line  569)
* syntax-case <1>:                       Undocumented extensions.
                                                             (line  200)
* syntax-rules:                          Miscellaneous extensions.
                                                             (line  569)
* system-stamp:                          Undocumented extensions.
                                                             (line  153)
* system-type:                           Undocumented extensions.
                                                             (line  149)
* system-type-string:                    Undocumented extensions.
                                                             (line  150)
* system-version:                        Undocumented extensions.
                                                             (line  146)
* system-version-string:                 Undocumented extensions.
                                                             (line  147)
* table->list:                           Tables.             (line  252)
* table-copy:                            Tables.             (line  319)
* table-for-each:                        Tables.             (line  224)
* table-length:                          Tables.             (line  125)
* table-merge:                           Tables.             (line  357)
* table-merge!:                          Tables.             (line  336)
* table-ref:                             Tables.             (line  150)
* table-search:                          Tables.             (line  193)
* table-set!:                            Tables.             (line  173)
* table?:                                Tables.             (line  113)
* tables:                                Hashing and weak references.
                                                             (line    6)
* tail-calls:                            Procedures related to debugging.
                                                             (line  334)
* tail-calls <1>:                        Miscellaneous extensions.
                                                             (line  892)
* take:                                  Undocumented extensions.
                                                             (line  268)
* tanh:                                  Undocumented extensions.
                                                             (line  292)
* tcp-client-local-socket-info:          Undocumented extensions.
                                                             (line  135)
* tcp-client-peer-socket-info:           Undocumented extensions.
                                                             (line  136)
* tcp-client-self-socket-info:           Undocumented extensions.
                                                             (line  137)
* tcp-server-socket-info:                Undocumented extensions.
                                                             (line  139)
* tcp-service-register!:                 Network devices.    (line  225)
* tcp-service-unregister!:               Network devices.    (line  227)
* tenth:                                 Undocumented extensions.
                                                             (line  221)
* terminated-thread-exception-arguments: Exception objects related to threads.
                                                             (line  137)
* terminated-thread-exception-procedure: Exception objects related to threads.
                                                             (line  136)
* terminated-thread-exception?:          Exception objects related to threads.
                                                             (line  135)
* test-bit-field?:                       Bitwise-operations on exact integers.
                                                             (line  301)
* third:                                 Undocumented extensions.
                                                             (line  214)
* this-source-file:                      Undocumented extensions.
                                                             (line  184)
* thread:                                Procedures.         (line   77)
* thread-base-priority:                  Procedures.         (line  112)
* thread-base-priority-set!:             Procedures.         (line  113)
* thread-group->thread-group-list:       Undocumented extensions.
                                                             (line   15)
* thread-group->thread-group-vector:     Undocumented extensions.
                                                             (line   16)
* thread-group->thread-list:             Undocumented extensions.
                                                             (line   17)
* thread-group->thread-vector:           Undocumented extensions.
                                                             (line   18)
* thread-group-name:                     Undocumented extensions.
                                                             (line   10)
* thread-group-parent:                   Undocumented extensions.
                                                             (line   11)
* thread-group-resume!:                  Undocumented extensions.
                                                             (line   12)
* thread-group-specific:                 Undocumented extensions.
                                                             (line   19)
* thread-group-specific-set!:            Undocumented extensions.
                                                             (line   20)
* thread-group-suspend!:                 Undocumented extensions.
                                                             (line   13)
* thread-group-terminate!:               Undocumented extensions.
                                                             (line   14)
* thread-group?:                         Undocumented extensions.
                                                             (line    9)
* thread-init!:                          Undocumented extensions.
                                                             (line   45)
* thread-interrupt!:                     Undocumented extensions.
                                                             (line   36)
* thread-join!:                          Procedures.         (line  312)
* thread-mailbox-extract-and-rewind:     Procedures.         (line  383)
* thread-mailbox-next:                   Procedures.         (line  381)
* thread-mailbox-rewind:                 Procedures.         (line  382)
* thread-name:                           Procedures.         (line   90)
* thread-priority-boost:                 Procedures.         (line  128)
* thread-priority-boost-set!:            Procedures.         (line  129)
* thread-quantum:                        Procedures.         (line  144)
* thread-quantum-set!:                   Procedures.         (line  145)
* thread-receive:                        Procedures.         (line  380)
* thread-resume!:                        Undocumented extensions.
                                                             (line   39)
* thread-send:                           Procedures.         (line  363)
* thread-sleep!:                         Procedures.         (line  202)
* thread-specific:                       Procedures.         (line   97)
* thread-specific-set!:                  Procedures.         (line   98)
* thread-start!:                         Procedures.         (line  164)
* thread-state:                          Undocumented extensions.
                                                             (line   22)
* thread-state-abnormally-terminated-reason: Undocumented extensions.
                                                             (line   33)
* thread-state-abnormally-terminated?:   Undocumented extensions.
                                                             (line   32)
* thread-state-initialized?:             Undocumented extensions.
                                                             (line   24)
* thread-state-normally-terminated-result: Undocumented extensions.
                                                             (line   31)
* thread-state-normally-terminated?:     Undocumented extensions.
                                                             (line   30)
* thread-state-running-processor:        Undocumented extensions.
                                                             (line   26)
* thread-state-running?:                 Undocumented extensions.
                                                             (line   25)
* thread-state-uninitialized?:           Undocumented extensions.
                                                             (line   23)
* thread-state-waiting-for:              Undocumented extensions.
                                                             (line   28)
* thread-state-waiting-timeout:          Undocumented extensions.
                                                             (line   29)
* thread-state-waiting?:                 Undocumented extensions.
                                                             (line   27)
* thread-suspend!:                       Undocumented extensions.
                                                             (line   38)
* thread-terminate!:                     Procedures.         (line  226)
* thread-thread-group:                   Undocumented extensions.
                                                             (line   41)
* thread-yield!:                         Procedures.         (line  183)
* thread?:                               Procedures.         (line   15)
* threads:                               Threads.            (line    6)
* time:                                  Measuring time.     (line   83)
* time->seconds:                         Measuring time.     (line   21)
* time?:                                 Measuring time.     (line   20)
* timeout->time:                         Undocumented extensions.
                                                             (line   76)
* top:                                   Undocumented extensions.
                                                             (line   34)
* touch:                                 Undocumented extensions.
                                                             (line  156)
* trace:                                 Procedures related to debugging.
                                                             (line  137)
* transcript-off:                        Extensions to standard procedures.
                                                             (line    7)
* transcript-on:                         Extensions to standard procedures.
                                                             (line    6)
* tty-history:                           Undocumented extensions.
                                                             (line  159)
* tty-history-max-length-set!:           Undocumented extensions.
                                                             (line  161)
* tty-history-set!:                      Undocumented extensions.
                                                             (line  160)
* tty-mode-set!:                         Undocumented extensions.
                                                             (line  164)
* tty-paren-balance-duration-set!:       Undocumented extensions.
                                                             (line  162)
* tty-text-attributes-set!:              Undocumented extensions.
                                                             (line  163)
* tty-type-set!:                         Undocumented extensions.
                                                             (line  165)
* tty?:                                  Undocumented extensions.
                                                             (line  158)
* type-exception-arg-id:                 Exception objects related to type checking.
                                                             (line    9)
* type-exception-arguments:              Exception objects related to type checking.
                                                             (line    8)
* type-exception-procedure:              Exception objects related to type checking.
                                                             (line    7)
* type-exception-type-id:                Exception objects related to type checking.
                                                             (line   10)
* type-exception?:                       Exception objects related to type checking.
                                                             (line    6)
* u16vector:                             Homogeneous numeric vectors.
                                                             (line   91)
* u16vector->list:                       Homogeneous numeric vectors.
                                                             (line   96)
* u16vector-append:                      Homogeneous numeric vectors.
                                                             (line  104)
* u16vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  100)
* u16vector-copy:                        Homogeneous numeric vectors.
                                                             (line  101)
* u16vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  102)
* u16vector-fill!:                       Homogeneous numeric vectors.
                                                             (line   98)
* u16vector-length:                      Homogeneous numeric vectors.
                                                             (line   92)
* u16vector-ref:                         Homogeneous numeric vectors.
                                                             (line   93)
* u16vector-set:                         Homogeneous numeric vectors.
                                                             (line   94)
* u16vector-set!:                        Homogeneous numeric vectors.
                                                             (line   95)
* u16vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  108)
* u16vector?:                            Homogeneous numeric vectors.
                                                             (line   89)
* u32vector:                             Homogeneous numeric vectors.
                                                             (line  133)
* u32vector->list:                       Homogeneous numeric vectors.
                                                             (line  138)
* u32vector-append:                      Homogeneous numeric vectors.
                                                             (line  146)
* u32vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  142)
* u32vector-copy:                        Homogeneous numeric vectors.
                                                             (line  143)
* u32vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  144)
* u32vector-fill!:                       Homogeneous numeric vectors.
                                                             (line  140)
* u32vector-length:                      Homogeneous numeric vectors.
                                                             (line  134)
* u32vector-ref:                         Homogeneous numeric vectors.
                                                             (line  135)
* u32vector-set:                         Homogeneous numeric vectors.
                                                             (line  136)
* u32vector-set!:                        Homogeneous numeric vectors.
                                                             (line  137)
* u32vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  150)
* u32vector?:                            Homogeneous numeric vectors.
                                                             (line  131)
* u64vector:                             Homogeneous numeric vectors.
                                                             (line  175)
* u64vector->list:                       Homogeneous numeric vectors.
                                                             (line  180)
* u64vector-append:                      Homogeneous numeric vectors.
                                                             (line  188)
* u64vector-concatenate:                 Homogeneous numeric vectors.
                                                             (line  184)
* u64vector-copy:                        Homogeneous numeric vectors.
                                                             (line  185)
* u64vector-copy!:                       Homogeneous numeric vectors.
                                                             (line  186)
* u64vector-fill!:                       Homogeneous numeric vectors.
                                                             (line  182)
* u64vector-length:                      Homogeneous numeric vectors.
                                                             (line  176)
* u64vector-ref:                         Homogeneous numeric vectors.
                                                             (line  177)
* u64vector-set:                         Homogeneous numeric vectors.
                                                             (line  178)
* u64vector-set!:                        Homogeneous numeric vectors.
                                                             (line  179)
* u64vector-shrink!:                     Homogeneous numeric vectors.
                                                             (line  192)
* u64vector?:                            Homogeneous numeric vectors.
                                                             (line  173)
* u8vector:                              Homogeneous numeric vectors.
                                                             (line   49)
* u8vector->list:                        Homogeneous numeric vectors.
                                                             (line   54)
* u8vector->object:                      Homogeneous numeric vectors.
                                                             (line  251)
* u8vector-append:                       Homogeneous numeric vectors.
                                                             (line   62)
* u8vector-concatenate:                  Homogeneous numeric vectors.
                                                             (line   58)
* u8vector-copy:                         Homogeneous numeric vectors.
                                                             (line   59)
* u8vector-copy!:                        Homogeneous numeric vectors.
                                                             (line   60)
* u8vector-fill!:                        Homogeneous numeric vectors.
                                                             (line   56)
* u8vector-length:                       Homogeneous numeric vectors.
                                                             (line   50)
* u8vector-ref:                          Homogeneous numeric vectors.
                                                             (line   51)
* u8vector-set:                          Homogeneous numeric vectors.
                                                             (line   52)
* u8vector-set!:                         Homogeneous numeric vectors.
                                                             (line   53)
* u8vector-shrink!:                      Homogeneous numeric vectors.
                                                             (line   66)
* u8vector?:                             Homogeneous numeric vectors.
                                                             (line   47)
* udp-destination-set!:                  Network devices.    (line  462)
* udp-local-socket-info:                 Network devices.    (line  569)
* udp-read-subu8vector:                  Network devices.    (line  471)
* udp-read-u8vector:                     Network devices.    (line  469)
* udp-source-socket-info:                Network devices.    (line  570)
* udp-write-subu8vector:                 Network devices.    (line  472)
* udp-write-u8vector:                    Network devices.    (line  470)
* unbound-global-exception-code:         Exception objects related to evaluation and compilation.
                                                             (line   95)
* unbound-global-exception-rte:          Exception objects related to evaluation and compilation.
                                                             (line   96)
* unbound-global-exception-variable:     Exception objects related to evaluation and compilation.
                                                             (line   94)
* unbound-global-exception?:             Exception objects related to evaluation and compilation.
                                                             (line   93)
* unbound-key-exception-arguments:       Tables.             (line  291)
* unbound-key-exception-procedure:       Tables.             (line  290)
* unbound-key-exception?:                Tables.             (line  289)
* unbound-os-environment-variable-exception-arguments: Exception objects related to the host environment.
                                                             (line  151)
* unbound-os-environment-variable-exception-procedure: Exception objects related to the host environment.
                                                             (line  150)
* unbound-os-environment-variable-exception?: Exception objects related to the host environment.
                                                             (line  149)
* unbound-serial-number-exception-arguments: Hashing.        (line   47)
* unbound-serial-number-exception-procedure: Hashing.        (line   46)
* unbound-serial-number-exception?:      Hashing.            (line   45)
* unbox:                                 Miscellaneous extensions.
                                                             (line  396)
* unbreak:                               Procedures related to debugging.
                                                             (line  287)
* uncaught-exception-arguments:          Exception objects related to threads.
                                                             (line  172)
* uncaught-exception-procedure:          Exception objects related to threads.
                                                             (line  171)
* uncaught-exception-reason:             Exception objects related to threads.
                                                             (line  173)
* uncaught-exception?:                   Exception objects related to threads.
                                                             (line  170)
* uninitialized-thread-exception-arguments: Undocumented extensions.
                                                             (line   53)
* uninitialized-thread-exception-procedure: Undocumented extensions.
                                                             (line   52)
* uninitialized-thread-exception?:       Undocumented extensions.
                                                             (line   51)
* uninterned-keyword?:                   Miscellaneous extensions.
                                                             (line  488)
* uninterned-symbol?:                    Miscellaneous extensions.
                                                             (line  465)
* unknown-keyword-argument-exception-arguments: Exception objects related to procedure call.
                                                             (line  135)
* unknown-keyword-argument-exception-procedure: Exception objects related to procedure call.
                                                             (line  134)
* unknown-keyword-argument-exception?:   Exception objects related to procedure call.
                                                             (line  133)
* unterminated-process-exception-arguments: Process devices. (line  173)
* unterminated-process-exception-procedure: Process devices. (line  172)
* unterminated-process-exception?:       Process devices.    (line  171)
* untrace:                               Procedures related to debugging.
                                                             (line  138)
* user-info:                             User information.   (line   15)
* user-info-gid:                         User information.   (line   70)
* user-info-home:                        User information.   (line   80)
* user-info-name:                        User information.   (line   51)
* user-info-shell:                       User information.   (line   90)
* user-info-uid:                         User information.   (line   61)
* user-info?:                            User information.   (line   39)
* user-name:                             User information.   (line    6)
* vector->bits:                          Undocumented extensions.
                                                             (line  300)
* vector-append:                         Miscellaneous extensions.
                                                             (line   63)
* vector-cas!:                           Miscellaneous extensions.
                                                             (line  136)
* vector-concatenate:                    Miscellaneous extensions.
                                                             (line   75)
* vector-copy:                           Miscellaneous extensions.
                                                             (line   18)
* vector-copy!:                          Miscellaneous extensions.
                                                             (line   38)
* vector-inc!:                           Miscellaneous extensions.
                                                             (line  158)
* vector-set:                            Miscellaneous extensions.
                                                             (line  178)
* vector-shrink!:                        Miscellaneous extensions.
                                                             (line  122)
* void:                                  Miscellaneous extensions.
                                                             (line  512)
* weak references:                       Hashing and weak references.
                                                             (line    6)
* will-execute!:                         Wills.              (line   15)
* will-testator:                         Wills.              (line   14)
* will?:                                 Wills.              (line   13)
* with-exception-catcher:                Exception-handling. (line   84)
* with-exception-handler:                Exception-handling. (line   59)
* with-input-from-file:                  Filesystem devices. (line   11)
* with-input-from-port:                  Undocumented extensions.
                                                             (line  167)
* with-input-from-process:               Process devices.    (line   11)
* with-input-from-string:                String-ports.       (line   11)
* with-input-from-u8vector:              U8vector-ports.     (line   11)
* with-input-from-vector:                Vector-ports.       (line   11)
* with-output-to-file:                   Filesystem devices. (line   12)
* with-output-to-port:                   Undocumented extensions.
                                                             (line  168)
* with-output-to-process:                Process devices.    (line   12)
* with-output-to-string:                 String-ports.       (line   12)
* with-output-to-u8vector:               U8vector-ports.     (line   12)
* with-output-to-vector:                 Vector-ports.       (line   12)
* write:                                 Object-port operations.
                                                             (line   64)
* write-char:                            Character-port operations.
                                                             (line   78)
* write-file-string:                     Other procedures related to I/O.
                                                             (line   77)
* write-file-string-list:                Other procedures related to I/O.
                                                             (line   78)
* write-file-u8vector:                   Other procedures related to I/O.
                                                             (line   79)
* write-substring:                       Character-port operations.
                                                             (line  126)
* write-subu8vector:                     Byte-port operations.
                                                             (line   50)
* write-u8:                              Byte-port operations.
                                                             (line   37)
* wrong-number-of-arguments-exception-arguments: Exception objects related to procedure call.
                                                             (line    8)
* wrong-number-of-arguments-exception-procedure: Exception objects related to procedure call.
                                                             (line    7)
* wrong-number-of-arguments-exception?:  Exception objects related to procedure call.
                                                             (line    6)
* wrong-number-of-values-exception-code: Exception objects related to procedure call.
                                                             (line  105)
* wrong-number-of-values-exception-rte:  Exception objects related to procedure call.
                                                             (line  106)
* wrong-number-of-values-exception-vals: Exception objects related to procedure call.
                                                             (line  104)
* wrong-number-of-values-exception?:     Exception objects related to procedure call.
                                                             (line  103)
* wrong-processor-c-return-exception?:   Exception objects related to C-interface.
                                                             (line  170)
* xcons:                                 Undocumented extensions.
                                                             (line  266)

