; GENERATED BY CHICKEN 4.13.1 FROM scheme.base.scm

(scheme.base#vector->list
  (forall
    (a827)
    (#(procedure)
     scheme.base#vector->list
     ((vector-of a827) |#!optional| fixnum fixnum)
     (list-of a827))))

(scheme.base#input-port-open?
  (#(procedure) scheme.base#input-port-open? (input-port) boolean))

(scheme.base#vector-append
  (#(procedure) scheme.base#vector-append (|#!rest| vector) vector))

(scheme.base#textual-port?
  (#(procedure pure:) scheme.base#textual-port? (*) boolean))

(scheme.base#boolean=?
  (#(procedure)
   scheme.base#boolean=?
   (boolean boolean |#!rest| boolean)
   boolean))

(scheme.base#call-with-port
  (#(procedure)
   scheme.base#call-with-port
   ((or input-port output-port) (procedure ((or input-port output-port)) . *))
   .
   *))

(scheme.base#output-port-open?
  (#(procedure) scheme.base#output-port-open? (output-port) boolean))

(scheme.base#close-port
  (#(procedure)
   scheme.base#close-port
   ((or input-port output-port))
   undefined))

(scheme.base#open-output-bytevector
  (#(procedure) scheme.base#open-output-bytevector () output-port))

(scheme.base#vector-fill!
  (#(procedure)
   scheme.base#vector-fill!
   (vector * |#!optional| fixnum fixnum)
   undefined))

(scheme.base#write-string
  (#(procedure)
   scheme.base#write-string
   (string |#!optional| output-port fixnum fixnum)
   undefined))

(scheme.base#assoc
  (forall
    (a329 b330 c331)
    (#(procedure)
     scheme.base#assoc
     (a329 (list-of (pair b330 c331)) |#!optional| (procedure (b330 a329) *))
     (or false (list-of (pair b330 c331))))))

(scheme.base#get-output-bytevector
  (#(procedure)
   scheme.base#get-output-bytevector
   (output-port)
   (struct u8vector)))

(scheme.base#vector->string
  (#(procedure)
   scheme.base#vector->string
   ((vector-of char) |#!optional| fixnum fixnum)
   string))

(scheme.base#raise (#(procedure) scheme.base#raise (*) noreturn))

(scheme.base#char<=?
  (#(procedure) scheme.base#char<=? (char char |#!rest| char) boolean))

(scheme.base#error-object-irritants
  (#(procedure)
   scheme.base#error-object-irritants
   ((struct condition))
   (or list false)))

(scheme.base#string->utf8
  (#(procedure)
   scheme.base#string->utf8
   (string |#!optional| fixnum fixnum)
   (struct u8vector)))

(scheme.base#utf8->string
  (#(procedure)
   scheme.base#utf8->string
   ((struct u8vector) |#!optional| fixnum fixnum)
   string))

(scheme.base#vector-map
  (#(procedure)
   scheme.base#vector-map
   ((procedure (* |#!rest| *) *) vector |#!rest| vector)
   vector))

(scheme.base#open-input-bytevector
  (#(procedure) scheme.base#open-input-bytevector ((struct u8vector)) *))

(scheme.base#vector-copy
  (forall
    (a825)
    (#(procedure)
     scheme.base#vector-copy
     ((vector-of a825) |#!optional| fixnum fixnum)
     (vector-of a825))))

(scheme.base#error-object?
  (#(procedure predicate: (struct condition))
   scheme.base#error-object?
   (*)
   boolean))

(scheme.base#raise-continuable
  (#(procedure) scheme.base#raise-continuable (*) . *))

(scheme.base#square (#(procedure) scheme.base#square (number) number))

(scheme.base#string>?
  (#(procedure) scheme.base#string>? (string string |#!rest| string) boolean))

(scheme.base#make-list
  (forall
    (x217)
    (#(procedure)
     scheme.base#make-list
     (fixnum |#!optional| x217)
     (list-of x217))))

(scheme.base#string=?
  (#(procedure) scheme.base#string=? (string string |#!rest| string) boolean))

(scheme.base#list-tail
  (forall
    (x246)
    (#(procedure)
     scheme.base#list-tail
     ((list-of x246) fixnum)
     (list-of x246))))

(scheme.base#string<?
  (#(procedure) scheme.base#string<? (string string |#!rest| string) boolean))

(scheme.base#char>=?
  (#(procedure) scheme.base#char>=? (char char |#!rest| char) boolean))

(scheme.base#with-exception-handler
  (#(procedure)
   scheme.base#with-exception-handler
   ((procedure (*) . *) (procedure () . *))
   .
   *))

(scheme.base#vector-copy!
  (#(procedure)
   scheme.base#vector-copy!
   (vector fixnum vector |#!optional| fixnum fixnum)
   undefined))

(scheme.base#file-error?
  (#(procedure pure:) scheme.base#file-error? (*) boolean))

(scheme.base#char=?
  (#(procedure) scheme.base#char=? (char char |#!rest| char) boolean))

(scheme.base#string-map
  (#(procedure)
   scheme.base#string-map
   ((procedure (char |#!rest| char) char) string |#!rest| string)
   string))

(scheme.base#bytevector-append
  (#(procedure)
   scheme.base#bytevector-append
   (|#!rest| (struct u8vector))
   (struct u8vector)))

(scheme.base#read-string
  (#(procedure)
   scheme.base#read-string
   (number |#!optional| input-port)
   (or string eof)))

(scheme.base#string<=?
  (#(procedure) scheme.base#string<=? (string string |#!rest| string) boolean))

(scheme.base#bytevector-copy!
  (#(procedure)
   scheme.base#bytevector-copy!
   ((struct u8vector) fixnum (struct u8vector) |#!optional| fixnum fixnum)
   undefined))

(scheme.base#error-object-message
  (#(procedure)
   scheme.base#error-object-message
   ((struct condition))
   (or string false)))

(scheme.base#symbol=?
  (#(procedure) scheme.base#symbol=? (symbol symbol |#!rest| symbol) boolean))

(scheme.base#features
  (#(procedure pure:) scheme.base#features () (list-of symbol)))

(scheme.base#bytevector-copy
  (#(procedure)
   scheme.base#bytevector-copy
   ((struct u8vector) |#!optional| fixnum fixnum)
   (struct u8vector)))

(scheme.base#list-set!
  (#(procedure) scheme.base#list-set! (list fixnum *) undefined))

(scheme.base#string-for-each
  (#(procedure)
   scheme.base#string-for-each
   ((procedure (char |#!rest| char) *) string |#!rest| string)
   undefined))

(scheme.base#eof-object (#(procedure pure:) scheme.base#eof-object () eof))

(scheme.base#read-error?
  (#(procedure pure:) scheme.base#read-error? (*) boolean))

(scheme.base#member
  (forall
    (a272 b273)
    (#(procedure)
     scheme.base#member
     (a272 (list-of b273) |#!optional| (procedure (b273 a272) *))
     (or false (list-of b273)))))

(scheme.base#char<?
  (#(procedure) scheme.base#char<? (char char |#!rest| char) boolean))

(scheme.base#list-copy
  (forall (a385) (#(procedure) scheme.base#list-copy (a385) a385)))

(scheme.base#string->vector
  (#(procedure)
   scheme.base#string->vector
   (string |#!optional| fixnum fixnum)
   (vector-of char)))

(scheme.base#read-bytevector!
  (#(procedure)
   scheme.base#read-bytevector!
   ((struct u8vector) |#!optional| input-port number number)
   fixnum))

(scheme.base#binary-port?
  (#(procedure pure:) scheme.base#binary-port? (*) boolean))

(scheme.base#vector-for-each
  (#(procedure)
   scheme.base#vector-for-each
   ((procedure (* |#!rest| *) *) vector |#!rest| vector)
   undefined))

(scheme.base#char>?
  (#(procedure) scheme.base#char>? (char char |#!rest| char) boolean))

(scheme.base#read-bytevector
  (#(procedure)
   scheme.base#read-bytevector
   (number |#!optional| input-port)
   (or (struct u8vector) eof)))

(scheme.base#string>=?
  (#(procedure) scheme.base#string>=? (string string |#!rest| string) boolean))

(scheme.base#peek-u8
  (#(procedure) scheme.base#peek-u8 (|#!optional| input-port) fixnum))

; END OF FILE
