#!/usr/bin/env stklos
; A -*- Scheme -*- generated file *DO NOT EDIT**
STklos (#:version "1.70" #:globals (define-record-type comparator? comparator-ordered? comparator-hashable? make-comparator make-pair-comparator make-list-comparator make-vector-comparator make-eq-comparator make-eqv-comparator make-equal-comparator boolean-hash char-hash char-ci-hash string-hash string-ci-hash symbol-hash number-hash make-default-comparator default-hash comparator-register-default! comparator-type-test-predicate comparator-equality-predicate comparator-ordering-predicate comparator-hash-function comparator-test-type comparator-check-type comparator-hash hash-bound hash-salt =? <? >? <=? >=? comparator-if<=> %salt% comparator-max comparator-min comparator-max-in-list comparator-min-in-list default-comparator boolean-comparator real-comparator char-comparator char-ci-comparator string-comparator string-ci-comparator pair-comparator list-comparator vector-comparator eq-comparator eqv-comparator equal-comparator with-hash-salt make-raw-comparator binary=? binary<? binary>? binary<=? binary>=? boolean<? complex<? symbol<? make-hasher make-pair-type-test make-pair=? make-pair<? make-pair-hash norp? make-list-type-test make-list=? make-list<? make-list-hash make-vector-type-test make-vector=? make-vector<? make-vector-hash unknown-object-comparator first-comparator-index *next-comparator-index* *registered-comparators* object-type registered-index registered-comparator dispatch-equality dispatch-ordering default-ordering default-equality s125:make-hash-table s125:hash-table s125:hash-table-unfold s125:alist->hash-table s125:hash-table? s125:hash-table-contains? s125:hash-table-empty? s125:hash-table=? s125:hash-table-mutable? s125:hash-table-ref s125:hash-table-ref/default s125:hash-table-set! s125:hash-table-delete! s125:hash-table-intern! s125:hash-table-update! s125:hash-table-update!/default s125:hash-table-pop! s125:hash-table-clear! s125:hash-table-size s125:hash-table-keys s125:hash-table-values s125:hash-table-entries s125:hash-table-find s125:hash-table-count s125:hash-table-map s125:hash-table-for-each s125:hash-table-map! s125:hash-table-map->list s125:hash-table-fold s125:hash-table-prune! s125:hash-table-copy s125:hash-table-empty-copy s125:hash-table->alist s125:hash-table-union! s125:hash-table-intersection! s125:hash-table-difference! s125:hash-table-xor! deprecated:hash deprecated:string-hash deprecated:string-ci-hash deprecated:hash-by-identity deprecated:hash-table-equivalence-function deprecated:hash-table-hash-function deprecated:hash-table-exists? deprecated:hash-table-walk deprecated:hash-table-merge! scheme s:make-hash-table s:hash-table? s:hash-table-size s:hash-table-exists? s:hash-table-set! s:hash-table-delete! s:hash-table-clear! s:hash-table-ref s:hash-table-ref/default s:hash-table-fold s:hash-table-for-each s:hash-table-copy s:hash-table->alist s:hash-table-keys s:hash-table-values s:hash-table-hash s128:default-hash s128:string-hash s128:string-ci-hash s:hash-table-equivalence-function s:hash-table-hash-function %enforce-comparator-type-tests %comparator-hash-function %not-found %not-found-irritant %not-found-message %check-optional-arguments s125:hash-table-every equal-hash %%make-hash-table deprecated:hash-table-fold) #:macros ())
#(%module-handler scheme/hash-table %module-create current-module ((scheme/comparator)) list-copy %do-imports ((s125:make-hash-table . make-hash-table) (s125:hash-table . hash-table) (s125:hash-table-unfold . hash-table-unfold) (s125:alist->hash-table . alist->hash-table) (s125:hash-table? . hash-table?) (s125:hash-table-contains? . hash-table-contains?) (s125:hash-table-empty? . hash-table-empty?) (s125:hash-table=? . hash-table=?) (s125:hash-table-mutable? . hash-table-mutable?) (s125:hash-table-ref . hash-table-ref) (s125:hash-table-ref/default . hash-table-ref/default) (s125:hash-table-set! . hash-table-set!) (s125:hash-table-delete! . hash-table-delete!) (s125:hash-table-intern! . hash-table-intern!) (s125:hash-table-update! . hash-table-update!) (s125:hash-table-update!/default . hash-table-update!/default) (s125:hash-table-pop! . hash-table-pop!) (s125:hash-table-clear! . hash-table-clear!) (s125:hash-table-size . hash-table-size) (s125:hash-table-keys . hash-table-keys) (s125:hash-table-values . hash-table-values) (s125:hash-table-entries . hash-table-entries) (s125:hash-table-find . hash-table-find) (s125:hash-table-count . hash-table-count) (s125:hash-table-map . hash-table-map) (s125:hash-table-for-each . hash-table-for-each) (s125:hash-table-map! . hash-table-map!) (s125:hash-table-map->list . hash-table-map->list) (s125:hash-table-fold . hash-table-fold) (s125:hash-table-prune! . hash-table-prune!) (s125:hash-table-copy . hash-table-copy) (s125:hash-table-empty-copy . hash-table-empty-copy) (s125:hash-table->alist . hash-table->alist) (s125:hash-table-union! . hash-table-union!) (s125:hash-table-intersection! . hash-table-intersection!) (s125:hash-table-difference! . hash-table-difference!) (s125:hash-table-xor! . hash-table-xor!) (deprecated:hash . hash) (deprecated:string-hash . string-hash) (deprecated:string-ci-hash . string-ci-hash) (deprecated:hash-by-identity . hash-by-identity) (deprecated:hash-table-equivalence-function . hash-table-equivalence-function) (deprecated:hash-table-hash-function . hash-table-hash-function) (deprecated:hash-table-exists? . hash-table-exists?) (deprecated:hash-table-walk . hash-table-walk) (deprecated:hash-table-merge! . hash-table-merge!)) %do-exports SCHEME find-module scheme make-hash-table symbol-value s:make-hash-table hash-table? s:hash-table? hash-table-size s:hash-table-size hash-table-exists? s:hash-table-exists? hash-table-set! s:hash-table-set! hash-table-delete! s:hash-table-delete! hash-table-clear! s:hash-table-clear! hash-table-ref s:hash-table-ref hash-table-ref/default s:hash-table-ref/default hash-table-fold s:hash-table-fold hash-table-for-each s:hash-table-for-each hash-table-copy s:hash-table-copy hash-table->alist s:hash-table->alist hash-table-keys s:hash-table-keys hash-table-values s:hash-table-values hash-table-hash s:hash-table-hash hash-table-mutable? s125:hash-table-mutable? default-hash scheme/comparator s128:default-hash string-hash s128:string-hash string-ci-hash s128:string-ci-hash hash-table-equivalence-function s:hash-table-equivalence-function hash-table-hash-function s:hash-table-hash-function %enforce-comparator-type-tests comparator-type-test-predicate comparator-hash-function "key rejected by hash-table comparator" error apply %comparator-hash-function "srfi-125:not-found" gensym %not-found not-found %not-found-irritant "hash-table key not found" %not-found-message thread-safe memq weak-keys weak-values ephemeral-keys ephemeral-values symbol->string ": unsupported optional argument(s)" string-append %check-optional-arguments s125:hash-table-entries call-with-values s125:hash-table-every comparator? comparator-equality-predicate %%make-hash-table procedure? s125:make-hash-table equal-hash symbol-hash eq? eqv? equal? string=? string-ci=? symbol=? "make-hash-table: unable to infer hash function" "hash-table: wrong number of arguments" "hash-table: two equivalent keys were provided" cadr cddr hash-table-immutable! s125:hash-table s125:hash-table-unfold reverse for-each s125:alist->hash-table s125:hash-table? s125:hash-table-contains? s125:hash-table-empty? s125:hash-table-size ignored s125:hash-table=? s125:hash-table-ref s125:hash-table-ref/default s125:hash-table-clear! length "hash-table-set!: wrong number of arguments" s125:hash-table-set! s125:hash-table-delete! s125:hash-table-intern! s125:hash-table-update! s125:hash-table-update!/default s125:hash-table-for-each "hash-table-pop!: hash table is empty" call/cc s125:hash-table-pop! s125:hash-table-keys s125:hash-table-values values s125:hash-table-find s125:hash-table-count s125:hash-table-map map s125:hash-table-map->list s125:hash-table-map! deprecated:hash-table-fold s125:hash-table-fold s125:hash-table-prune! pair? "too many optional parameters: ~a" s125:hash-table-copy s125:hash-table-empty-copy s125:hash-table->alist s125:hash-table-union! s125:hash-table-intersection! s125:hash-table-difference! s125:hash-table-xor! deprecated:hash deprecated:string-hash deprecated:string-ci-hash deprecated:hash-by-identity deprecated:hash-table-equivalence-function deprecated:hash-table-hash-function deprecated:hash-table-exists? deprecated:hash-table-walk deprecated:hash-table-merge! %module-restore "scheme/hash-table" provide)
2316
  
   -	  % U  V   J % % V    n U  V   ! M V   % % V    ! U  V   % U 	 V 
    % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V      % U ! j  V    " % U # j  V    $ % U % j  V    & % U ' j  V    ( % U ) j  V    * % U  j  V     % U + j  V    , % U - j  V    . % U / % U 0 V 
  q    1 % U 2 % U 0 V 
  q    3 % U 4 % U 0 V 
  q    5 % U 6 j  V    7 % U 8 j  V    9   : # @  % % e V ;  n e V <  ! +  
 :  + # (ÿþ % f  &   
 % U = f u  l >  $  <   % f   '    % u  f e l ?  $ $  $  @ % U A V B   C U D ?   E 	 F  G # F  % U H e V I   % % U J e V I    % U K e V I    % U L e V I   
 % U M e V I       % % % f V N  ! U O V P  ! e l >  $  $  Q # W  % #    % u  l R  $ ! # D  % f e % M )  % # -   <    $ *   =    =  % e f  &      %  > !   > !   '  $  $ $ ! )     ,  , '  $ s S  $  T # Qÿþ % f V U    % % f V V  n f V @  ! +  % f e u  l W  $ $ *      <  	 %   = q X         =          >      % e f g l W  $ $  Y 
 ,  Z 
 ,  [ # l  % U  e V Q  g 
 \ b  % j \ l   $ g 
 ] b  % j ] l    J    % g f l    ? g 
 ^ b 	 % g j Z l    1 g 
 _ b 	 % g j 3 l    # g 
 ` b 	 % g j 5 l     g 
 a b 	 % g j [ l     % U b g l >  $  W # jÿþ % % j Y f e V ?  ! +  % u  % M )  % # A   <    $  > <   % U c l >   , % u   = q    
 % U d  = s >    % u   = n e V e  q   % % e V f  !   '  $ ! )     ,  , &  % e V g   $  h # Yÿú % % j Y f e V ?  ! +  % u % M )  % # 6  % e  &      $ % # 	   % u   '  $ ! #   % u  f e V   % % u   &  !   '  $ s S  $ ! )     ,  , '  $  i # )ÿý % % j Y f e V ?  n g V j  ! +  % #   % u  = !  > s   $ ! e V k   $  l 
   m 
   n # 	  Q % e V   4 $  o # i  % % g V V  n f V p  n e V p  ! +  f  \ O % #   % u  f V     % e % u  f U q V   !  '  $  $ ! u V T   ' % #   % u f V     % e % u f U q V   !  '  $  $ ! u  l T  $  $  r # _ÿý %  <       = !  <    > <         % e V e  n g f #    
 C $ q   ! +  e 
 C b     % g V X       %  '   $ % j G u u j E l >  $    % e  '     $  s # 	  % g f e l   $  t 
   u # fÿþ T  % e V v  \  % f  = n e V e  s   $ % e % M )  % # :   <    > < @      % u  = n e V e  q   % % e V f  !   '  $  <   % U w u   ; s >     $ ! )     ,  , '  $  x # Gÿþ % e Q % M )  % # 0   <    $ % u  = q     % u  = q   %  > !  9 !   '   	 %  > ! e   '  $ ! )     ,  , '  $  y # $  % g f V     % g f l s  $ % %  &   ! +  % u u e V x   $ $  z # ÿü % h g % % j s h g e V ?  !  &  s x  $  { #   % h g % % h g e V   !  &  s x  $  | # +  % # #  % #   % u  f V y  % f e   '  $ ! u  V }  % U ~ u  l >  $ s   $   
   p 
 (   
 *   #   % % e V (  n e V *  s   $  R # \  % #    % u l R  $ ! # I  % f e % M )  % # 2   <   %   '   $ *   =    =  % e f  &      %  > !   > !   '     $ $ ! )     ,  , '  $ s S  $   # ^  % #    % u  l R  $ ! # K  % f e Q % M )  % # 3   <    $ *   =   =  % e f  &   %  > !  > !      9     !   '  $ $ ! )     ,  , '  $ s S  $   # $  % % f V Y  ! +  % #   % u  f % e  &  s x  $ ! u  V }   $   #   % #    % u  l R  $ ! # 
  % u f e l   $ s S  $   #   % e f l "  $  } #   % #   % u  f % f e  &  s   $ ! e l }  $   #   % g V     % g f e l   $ % e g f l    $   #   % #   % f e  &    % u  f l   $  $ ! e l }  $   # Gÿþ % % e V     %  = ! )    >    ,    ! +  % u  V    
 % U  u  V >     % % u V $  ! +      % e V g      $   #   % % e V $  ! +  % e V    $   
 &   #    % #   % u f V    	 % u f e l   $  $ ! e V }   $   #   % #   % u  f V     % u f l   $  $ ! f V }   $   #   % #   % u  f V     % u f l   $  $ ! f V }   $   # &  % #   % u f V     % u f l   $ % u f e l   $ ! e V }   $   # ÿþ % f l ,  $   # ÿþ % f l ,  $   # ÿþ % f l 5  $   # ÿþ % f l ,  $   
 7   
 9   
    #   % e f l }  $   # 	  % f e g l   $   
    % V    J % S U  V   . % U   V ¡  /
