#!/usr/bin/env stklos
; A -*- Scheme -*- generated file *DO NOT EDIT**
STklos (#:version "1.70" #:globals (%define-here and begin case cond define do if lambda let let* letrec or quasiquote quote interaction-environment null-environment scheme-report-environment) #:macros (((define-syntax . define-syntax) scheme/r5rs (lambda (macro-name syn-rules) (if (or (not (pair? syn-rules)) (not (eq? (car syn-rules) 'syntax-rules))) (error 'define-syntax "in `~S', bad syntax-rules ~S" macro-name syn-rules) (let ((keywords (cons macro-name (cadr syn-rules))) (clauses (cddr syn-rules)) (find-clause (symbol-value 'find-clause (find-module 'MBE)))) `(define-macro (,macro-name . args) (%find-macro-clause ',macro-name args ',keywords ',clauses)))))) ((delay . delay) scheme/r5rs (lambda (exp) `(delay-force (%make-promise (list ,exp))))) ((let-syntax . let-syntax) scheme/r5rs (lambda (bindings . body) `(%let-syntax ,(map (lambda (x) (let* ((macro-name (car x)) (syn-rules (cadr x)) (keywords (cons macro-name (cadr syn-rules))) (clauses (cddr syn-rules))) `(,macro-name (lambda args (%find-macro-clause ',macro-name args ',keywords ',clauses))))) bindings) ,@body))) ((letrec-syntax . letrec-syntax) scheme/r5rs (lambda args (error 'letrec-syntax "cannot be used here. You must load the file \"full-syntax\" to access it:" (cons 'letrec-syntax args)))) ((set! . set!) scheme/r5rs (lambda args `(%%set! ,@args)))))
#(%module-handler scheme/r5rs %module-create %define-here (lambda lst `(begin ,@(map (lambda (symb) `(define ,symb #void)) lst))) begin define map %make-syntax and case cond define-syntax delay do if lambda let let-syntax let* letrec letrec-syntax or quasiquote quote set! - %symbol-define * / + < <= = > >= abs acos angle append apply asin assoc assq assv atan boolean? caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr caaar caadr cadar caddr cdaar cdadr cddar cdddr caar cadr cdar cddr call-with-current-continuation call-with-input-file call-with-output-file call-with-values car cdr ceiling char->integer char-alphabetic? char-ci<? char-ci<=? char-ci=? char-ci>? char-ci>=? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char? char<? char<=? char=? char>? char>=? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display dynamic-wind eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor for-each force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char positive? procedure? quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<? string-ci<=? string-ci=? string-ci>? string-ci>=? string-copy string-fill! string-length string-ref string-set! string? string<? string<=? string=? string>? string>=? substring symbol->string symbol? tan truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! vector? with-input-from-file with-output-to-file write write-char zero? current-module ((- . -) (* . *) (/ . /) (+ . +) (< . <) (<= . <=) (= . =) (> . >) (>= . >=) (abs . abs) (acos . acos) (and . and) (angle . angle) (append . append) (apply . apply) (asin . asin) (assoc . assoc) (assq . assq) (assv . assv) (atan . atan) (begin . begin) (boolean? . boolean?) (caaaar . caaaar) (caaadr . caaadr) (caadar . caadar) (caaddr . caaddr) (cadaar . cadaar) (cadadr . cadadr) (caddar . caddar) (cadddr . cadddr) (cdaaar . cdaaar) (cdaadr . cdaadr) (cdadar . cdadar) (cdaddr . cdaddr) (cddaar . cddaar) (cddadr . cddadr) (cdddar . cdddar) (cddddr . cddddr) (caaar . caaar) (caadr . caadr) (cadar . cadar) (caddr . caddr) (cdaar . cdaar) (cdadr . cdadr) (cddar . cddar) (cdddr . cdddr) (caar . caar) (cadr . cadr) (cdar . cdar) (cddr . cddr) (call-with-current-continuation . call-with-current-continuation) (call-with-input-file . call-with-input-file) (call-with-output-file . call-with-output-file) (call-with-values . call-with-values) (car . car) (case . case) (cdr . cdr) (ceiling . ceiling) (char->integer . char->integer) (char-alphabetic? . char-alphabetic?) (char-ci<? . char-ci<?) (char-ci<=? . char-ci<=?) (char-ci=? . char-ci=?) (char-ci>? . char-ci>?) (char-ci>=? . char-ci>=?) (char-downcase . char-downcase) (char-lower-case? . char-lower-case?) (char-numeric? . char-numeric?) (char-ready? . char-ready?) (char-upcase . char-upcase) (char-upper-case? . char-upper-case?) (char-whitespace? . char-whitespace?) (char? . char?) (char<? . char<?) (char<=? . char<=?) (char=? . char=?) (char>? . char>?) (char>=? . char>=?) (close-input-port . close-input-port) (close-output-port . close-output-port) (complex? . complex?) (cond . cond) (cons . cons) (cos . cos) (current-input-port . current-input-port) (current-output-port . current-output-port) (define . define) (define-syntax . define-syntax) (delay . delay) (denominator . denominator) (display . display) (do . do) (dynamic-wind . dynamic-wind) (eof-object? . eof-object?) (eq? . eq?) (equal? . equal?) (eqv? . eqv?) (eval . eval) (even? . even?) (exact->inexact . exact->inexact) (exact? . exact?) (exp . exp) (expt . expt) (floor . floor) (for-each . for-each) (force . force) (gcd . gcd) (if . if) (imag-part . imag-part) (inexact->exact . inexact->exact) (inexact? . inexact?) (input-port? . input-port?) (integer->char . integer->char) (integer? . integer?) (interaction-environment . interaction-environment) (lambda . lambda) (lcm . lcm) (length . length) (let . let) (let-syntax . let-syntax) (let* . let*) (letrec . letrec) (letrec-syntax . letrec-syntax) (list . list) (list->string . list->string) (list->vector . list->vector) (list-ref . list-ref) (list-tail . list-tail) (list? . list?) (load . load) (log . log) (magnitude . magnitude) (make-polar . make-polar) (make-rectangular . make-rectangular) (make-string . make-string) (make-vector . make-vector) (map . map) (max . max) (member . member) (memq . memq) (memv . memv) (min . min) (modulo . modulo) (negative? . negative?) (newline . newline) (not . not) (null-environment . null-environment) (null? . null?) (number->string . number->string) (number? . number?) (numerator . numerator) (odd? . odd?) (open-input-file . open-input-file) (open-output-file . open-output-file) (or . or) (output-port? . output-port?) (pair? . pair?) (peek-char . peek-char) (positive? . positive?) (procedure? . procedure?) (quasiquote . quasiquote) (quote . quote) (quotient . quotient) (rational? . rational?) (rationalize . rationalize) (read . read) (read-char . read-char) (real-part . real-part) (real? . real?) (remainder . remainder) (reverse . reverse) (round . round) (scheme-report-environment . scheme-report-environment) (set-car! . set-car!) (set-cdr! . set-cdr!) (set! . set!) (sin . sin) (sqrt . sqrt) (string . string) (string->list . string->list) (string->number . string->number) (string->symbol . string->symbol) (string-append . string-append) (string-ci<? . string-ci<?) (string-ci<=? . string-ci<=?) (string-ci=? . string-ci=?) (string-ci>? . string-ci>?) (string-ci>=? . string-ci>=?) (string-copy . string-copy) (string-fill! . string-fill!) (string-length . string-length) (string-ref . string-ref) (string-set! . string-set!) (string? . string?) (string<? . string<?) (string<=? . string<=?) (string=? . string=?) (string>? . string>?) (string>=? . string>=?) (substring . substring) (symbol->string . symbol->string) (symbol? . symbol?) (tan . tan) (truncate . truncate) (values . values) (vector . vector) (vector->list . vector->list) (vector-fill! . vector-fill!) (vector-length . vector-length) (vector-ref . vector-ref) (vector-set! . vector-set!) (vector? . vector?) (with-input-from-file . with-input-from-file) (with-output-to-file . with-output-to-file) (write . write) (write-char . write-char) (zero? . zero?)) %do-exports %module-restore "scheme/r5rs" provide)
1874
  
   -F % U  V   J % U  U  # ÿÿ U  % # 
  U  e S  ; ; ; $ ! e V   ; $ ! U  V       	      
                                                 % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U   j   V   % U ! j ! V   % U " j " V   % U # j # V   % U $ j $ V   % U % j % V   % U 	 j 	 V   % U & j & V   % U ' j ' V   % U ( j ( V   % U ) j ) V   % U * j * V   % U + j + V   % U , j , V   % U - j - V   % U  j  V   % U . j . V   % U / j / V   % U 0 j 0 V   % U 1 j 1 V   % U 2 j 2 V   % U 3 j 3 V   % U 4 j 4 V   % U 5 j 5 V   % U 6 j 6 V   % U 7 j 7 V   % U 8 j 8 V   % U 9 j 9 V   % U : j : V   % U ; j ; V   % U < j < V   % U = j = V   % U > j > V   % U ? j ? V   % U @ j @ V   % U A j A V   % U B j B V   % U C j C V   % U D j D V   % U E j E V   % U F j F V   % U G j G V   % U H j H V   % U I j I V   % U J j J V   % U K j K V   % U L j L V   % U M j M V   % U N j N V   % U O j O V   % U 
 j 
 V   % U P j P V   % U Q j Q V   % U R j R V   % U S j S V   % U T j T V   % U U j U V   % U V j V V   % U W j W V   % U X j X V   % U Y j Y V   % U Z j Z V   % U [ j [ V   % U \ j \ V   % U ] j ] V   % U ^ j ^ V   % U _ j _ V   % U ` j ` V   % U a j a V   % U b j b V   % U c j c V   % U d j d V   % U e j e V   % U f j f V   % U g j g V   % U h j h V   % U  j  V   % U i j i V   % U j j j V   % U k j k V   % U l j l V   % U  j  V   % U  j  V   % U  j  V   % U m j m V   % U n j n V   % U  j  V   % U o j o V   % U p j p V   % U q j q V   % U r j r V   % U s j s V   % U t j t V   % U u j u V   % U v j v V   % U w j w V   % U x j x V   % U y j y V   % U z j z V   % U { j { V   % U | j | V   % U } j } V   % U  j  V   % U ~ j ~ V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U  j  V   % U   j   V   % U ¡ j ¡ V   % U ¢ j ¢ V   % U £ j £ V   % U ¤ j ¤ V   % U  j  V   % U ¥ j ¥ V   % U ¦ j ¦ V   % U § j § V   % U ¨ j ¨ V   % U © j © V   % U  j  V   % U  j  V   % U ª j ª V   % U « j « V   % U ¬ j ¬ V   % U ­ j ­ V   % U ® j ® V   % U ¯ j ¯ V   % U ° j ° V   % U ± j ± V   % U ² j ² V   % U ³ j ³ V   % U ´ j ´ V   % U µ j µ V   % U ¶ j ¶ V   % U  j  V   % U · j · V   % U ¸ j ¸ V   % U ¹ j ¹ V   % U º j º V   % U » j » V   % U ¼ j ¼ V   % U ½ j ½ V   % U ¾ j ¾ V   % U ¿ j ¿ V   % U À j À V   % U Á j Á V   % U Â j Â V   % U Ã j Ã V   % U Ä j Ä V   % U Å j Å V   % U Æ j Æ V   % U Ç j Ç V   % U È j È V   % U É j É V   % U Ê j Ê V   % U Ë j Ë V   % U Ì j Ì V   % U Í j Í V   % U Î j Î V   % U Ï j Ï V   % U Ð j Ð V   % U Ñ j Ñ V   % U Ò j Ò V   % U Ó j Ó V   % U Ô j Ô V   % U Õ j Õ V   % U Ö j Ö V   % U × j × V   % U Ø j Ø V   % U Ù j Ù V   % U Ú j Ú V   % U Û j Û V   % U Ü j Ü V   % U Ý j Ý V   % U Þ j Þ V   % U ß j ß V   % % V à   ! U á V â  % V ã   J % S U  V Ó  . % U ä V å  /
