;;;;
;;;; srfi-9.stk -- SRFI-9 (Records)
;;;;
;;;; Copyright Â© 1999-2022 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 27-Sep-1999 13:06 (eg)
;;;;


(define-module srfi/9
  (export define-record-type)

  (define-macro (define-record-type name constructor predicate . fields)
    (let ((struct-type (gensym))
          (tmp         (gensym))
          (val         (gensym)))
      `(begin
         ;; Define the constructor, the predicates and the accessors as global
         (define ,(car constructor) #f)
         (define ,predicate #f)
         ,@(map (lambda (x)
                  (case (length x)
                    ((2) `(define ,(cadr x) #f))
                    ((3) `(begin
                            (define  ,(cadr x) #f)
                            (define ,(caddr x) #f)))
                    (else (error 'define-record-type
                                 "bad field specification ~S" x))))
                fields)
         ;;
         ;; Build the record using STklos structs
         ;;
         (let ((,struct-type (make-struct-type ',name #f ',(map car fields))))
           ;; Make the constructor
           (set! ,(car constructor)
                 (lambda ,(cdr constructor)
                   (let ((,tmp (make-struct ,struct-type)))
                     ,@(map (lambda (x) `(struct-set! ,tmp ',x ,x))
                            (cdr constructor))
                     ,tmp)))

           ;; Make the predicate
           (set! ,predicate
                 (lambda (,tmp) (and (struct? ,tmp) (struct-is-a? ,tmp ,struct-type))))

           ;; Make the accessors
           ,@(map (lambda (x)
                    (if (= (length x) 2)
                        `(set! ,(cadr x) (lambda (,tmp)
                                           (struct-ref ,tmp ',(car x))))
                        ;; length = 3 (otherwise error was detected before)
                        `(begin
                           (set! ,(cadr x) (lambda (,tmp)
                                             (struct-ref ,tmp ',(car x))))
                           (set! ,(caddr x) (lambda (,tmp ,val)
                                              (struct-set! ,tmp ',(car x) ,val))))))
                  fields)
                                        ; Result for oplevel (if any)
           (values (void) ',name))))))

(provide "srfi/9")

#|
  Example of usage

    (define-record-type my-pair
      (kons x y)
      my-pair?
      (x kar set-kar!)
      (y kdr))

    (list
       (my-pair? (kons 1 2))        ; => #t
       (my-pair? (cons 1 2))        ; => #f
       (kar (kons 1 2))         ; => 1
       (kdr (kons 1 2))         ; => 2
       (let ((k (kons 1 2)))
         (set-kar! k 3)
         (kar k)))              ; => 3
|#
