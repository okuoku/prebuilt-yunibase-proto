#!/usr/bin/env stklos
; A -*- Scheme -*- generated file *DO NOT EDIT**
STklos (#:version "1.70" #:globals (define-record-type comparator? comparator-ordered? comparator-hashable? make-comparator make-pair-comparator make-list-comparator make-vector-comparator make-eq-comparator make-eqv-comparator make-equal-comparator boolean-hash char-hash char-ci-hash string-hash string-ci-hash symbol-hash number-hash make-default-comparator default-hash comparator-register-default! comparator-type-test-predicate comparator-equality-predicate comparator-ordering-predicate comparator-hash-function comparator-test-type comparator-check-type comparator-hash hash-bound hash-salt =? <? >? <=? >=? comparator-if<=> %salt% comparator-max comparator-min comparator-max-in-list comparator-min-in-list default-comparator boolean-comparator real-comparator char-comparator char-ci-comparator string-comparator string-ci-comparator pair-comparator list-comparator vector-comparator eq-comparator eqv-comparator equal-comparator with-hash-salt make-raw-comparator binary=? binary<? binary>? binary<=? binary>=? boolean<? complex<? symbol<? make-hasher make-pair-type-test make-pair=? make-pair<? make-pair-hash norp? make-list-type-test make-list=? make-list<? make-list-hash make-vector-type-test make-vector=? make-vector<? make-vector-hash unknown-object-comparator first-comparator-index *next-comparator-index* *registered-comparators* object-type registered-index registered-comparator dispatch-equality dispatch-ordering default-ordering default-equality s8vector? make-s8vector s8vector s8vector-length s8vector-ref s8vector-set! s8vector->list list->s8vector u8vector? make-u8vector u8vector u8vector-length u8vector-ref u8vector-set! u8vector->list list->u8vector s16vector? make-s16vector s16vector s16vector-length s16vector-ref s16vector-set! s16vector->list list->s16vector u16vector? make-u16vector u16vector u16vector-length u16vector-ref u16vector-set! u16vector->list list->u16vector s32vector? make-s32vector s32vector s32vector-length s32vector-ref s32vector-set! s32vector->list list->s32vector u32vector? make-u32vector u32vector u32vector-length u32vector-ref u32vector-set! u32vector->list list->u32vector s64vector? make-s64vector s64vector s64vector-length s64vector-ref s64vector-set! s64vector->list list->s64vector u64vector? make-u64vector u64vector u64vector-length u64vector-ref u64vector-set! u64vector->list list->u64vector f32vector? make-f32vector f32vector f32vector-length f32vector-ref f32vector-set! f32vector->list list->f32vector f64vector? make-f64vector f64vector f64vector-length f64vector-ref f64vector-set! f64vector->list list->f64vector c64vector? make-c64vector c64vector c64vector-length c64vector-ref c64vector-set! c64vector->list list->c64vector c128vector? make-c128vector c128vector c128vector-length c128vector-ref c128vector-set! c128vector->list list->c128vector uvector? uvector-length uvector-ref uvector-set! uvector->list %list->uvector %uvector->list %uniform-vector-functions f32? c128? s32? s16? s8? f64? u32? s64? c64? u16? u8? u64? f32vector-unfold f32vector-unfold-right f32vector-copy f32vector-reverse-copy f32vector-append f32vector-concatenate f32vector-append-subvectors f32vector-empty? f32vector= f32vector-take f32vector-take-right f32vector-drop f32vector-drop-right f32vector-segment f32vector-fold f32vector-fold-right f32vector-map f32vector-map! f32vector-for-each f32vector-count f32vector-cumulate f32vector-take-while f32vector-take-while-right f32vector-drop-while f32vector-drop-while-right f32vector-index f32vector-index-right f32vector-skip f32vector-skip-right f32vector-any f32vector-every f32vector-partition f32vector-filter f32vector-remove f32vector-swap! f32vector-fill! f32vector-reverse! f32vector-copy! f32vector-reverse-copy! f32vector-unfold! f32vector-unfold-right! reverse-f32vector->list reverse-list->f32vector f32vector->vector vector->f32vector make-f32vector-generator f32vector-comparator write-f32vector base %uvector-unfold %uvector-copy %uvector-append-subvectors %uvector-empty? %uvector= %uvector-iterate %uvector-segment f32vector<) #:macros (((comparator-if<=> . comparator-if<=>) srfi/128 (lambda args (%find-macro-clause 'comparator-if<=> args '(comparator-if<=>) '(((if<=> a b less equal greater) (comparator-if<=> (make-default-comparator) a b less equal greater)) ((comparator-if<=> comparator a b less equal greater) (cond ((=? comparator a b) equal) ((<? comparator a b) less) (else greater))))))) ((hash-salt . hash-salt) srfi/128 (lambda args (%find-macro-clause 'hash-salt args '(hash-salt) '(((hash-salt) (%salt%)))))) ((hash-bound . hash-bound) srfi/128 (lambda args (%find-macro-clause 'hash-bound args '(hash-bound) '(((hash-bound) 33554432)))))))
#(%module-handler srfi/160/f32 %module-create current-module ((srfi/4) (srfi/128) (srfi/160/base)) list-copy %do-imports ((make-f32vector . make-f32vector) (f32vector . f32vector) (f32vector-unfold . f32vector-unfold) (f32vector-unfold-right . f32vector-unfold-right) (f32vector-copy . f32vector-copy) (f32vector-reverse-copy . f32vector-reverse-copy) (f32vector-append . f32vector-append) (f32vector-concatenate . f32vector-concatenate) (f32vector-append-subvectors . f32vector-append-subvectors) (f32? . f32?) (f32vector? . f32vector?) (f32vector-empty? . f32vector-empty?) (f32vector= . f32vector=) (f32vector-ref . f32vector-ref) (f32vector-length . f32vector-length) (f32vector-take . f32vector-take) (f32vector-take-right . f32vector-take-right) (f32vector-drop . f32vector-drop) (f32vector-drop-right . f32vector-drop-right) (f32vector-segment . f32vector-segment) (f32vector-fold . f32vector-fold) (f32vector-fold-right . f32vector-fold-right) (f32vector-map . f32vector-map) (f32vector-map! . f32vector-map!) (f32vector-for-each . f32vector-for-each) (f32vector-count . f32vector-count) (f32vector-cumulate . f32vector-cumulate) (f32vector-take-while . f32vector-take-while) (f32vector-take-while-right . f32vector-take-while-right) (f32vector-drop-while . f32vector-drop-while) (f32vector-drop-while-right . f32vector-drop-while-right) (f32vector-index . f32vector-index) (f32vector-index-right . f32vector-index-right) (f32vector-skip . f32vector-skip) (f32vector-skip-right . f32vector-skip-right) (f32vector-any . f32vector-any) (f32vector-every . f32vector-every) (f32vector-partition . f32vector-partition) (f32vector-filter . f32vector-filter) (f32vector-remove . f32vector-remove) (f32vector-set! . f32vector-set!) (f32vector-swap! . f32vector-swap!) (f32vector-fill! . f32vector-fill!) (f32vector-reverse! . f32vector-reverse!) (f32vector-copy! . f32vector-copy!) (f32vector-reverse-copy! . f32vector-reverse-copy!) (f32vector-unfold! . f32vector-unfold!) (f32vector-unfold-right! . f32vector-unfold-right!) (f32vector->list . f32vector->list) (reverse-f32vector->list . reverse-f32vector->list) (list->f32vector . list->f32vector) (reverse-list->f32vector . reverse-list->f32vector) (f32vector->vector . f32vector->vector) (vector->f32vector . vector->f32vector) (make-f32vector-generator . make-f32vector-generator) (f32vector-comparator . f32vector-comparator) (write-f32vector . write-f32vector)) %do-exports uvector-tag (lambda () (let ((s8 0) (u8 1) (s16 2) (u16 3) (s32 4) (u32 5) (s64 6) (u64 7) (f32 8) (f64 9) (c64 10) (c128 11)) f32)) %make-syntax srfi/160/base find-module base %uvector-unfold symbol-value %uvector-copy %uvector-append-subvectors %uvector-empty? %uvector= %uvector-iterate %uvector-segment f32vector-unfold f32vector-unfold-right f32vector-length pair? "too many optional parameters: ~a" error f32vector-copy f32vector-reverse-copy f32vector-append f32vector-concatenate f32vector-append-subvectors f32vector-empty? f32vector= f32vector-take f32vector-take-right f32vector-drop f32vector-drop-right f32vector-segment f32vector-fold f32vector-fold-right f32vector-map f32vector-map! f32vector-for-each f32vector-count f32vector-cumulate f32vector-skip f32vector-take-while f32vector-skip-right f32vector-take-while-right f32vector-drop-while f32vector-drop-while-right f32vector-index f32vector-index-right f32vector-any f32vector-every f32vector-partition f32vector-filter f32vector-remove %uvector-swap! f32vector-swap! %uvector-fill! f32vector-fill! f32vector-reverse! f32vector-copy! f32vector-reverse-copy! f32vector-unfold! f32vector-unfold-right! vector-length make-f32vector f32vector-set! vector->f32vector make-vector f32vector-ref f32vector->vector f32vector->list list->f32vector reverse-list->f32vector reverse-f32vector->list eof-object make-f32vector-generator f32vector< f32vector? hash-table-hash make-comparator f32vector-comparator write write-f32vector %module-restore values "srfi/160/f32" provide)
2181
  
   -y % U  V   J % % V    n U  V   ! M V   % % V    ! U  V   % U 	 U 
 #    % Q R T  T  T  T  T  T  T  T 	 T 
 T  +   $ ! U  V    	 % U  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     % U  j  V     #   % T  g M f e M l   $   #   % T  g M f e N l   $   # Wÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % T  M Q u e f M l   $   # Wÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % T  M Q u e f N l   $   # 
ÿÿ % T  M e l   $   # 
  % T  M e l   $    # 
ÿÿ % T  N e l   $  ! # 	  % T  e l   $  " # 	ÿÿ % T  e l   $  # # 	  % f Q e l   $  $ #   % f % f V   !  1 s   $  % #   % f e l   $  & #   % T  M Q f Q % f V   !  1 ! M l   $  ' # 
  % T  f e l   $  ( # ÿü % T  h f  ; ! M T 
 M g l   $  ) # ÿü % T  h f  ; ! M T 
 N g l   $  * # ÿý % T  g f  ; ! M Q M M l   $  + # ÿý % T  g f  ; ! N Q M M l   $  , # ÿý % T  g f  ; ! M T 	 M M l   $  - # ÿý % T  g f  ; ! M T  M M l   $  . #   % T  g e ?  ! M T  M f l   $  / #   % e % f e V 0  s $  $  1 #   % e % f e V 2  9 s &  $  3 #   % e % f e V 0  s &  $  4 #   % e % f e V 2  9 s $  $  5 # ÿý % T  g f  ; ! M T  M M l   $  6 # ÿý % T  g f  ; ! M T  N M l   $  7 # ÿý % T  g f  ; ! M T  M M l   $  0 # ÿý % T  g f  ; ! M T  N M l   $  2 # ÿý % T  g f  ; ! M R M M l   $  8 # ÿý % T  g f  ; ! M T  M M l   $  9 #   % T  f e ?  ! M T  M M l   $  : #   % T  f e ?  ! M T  M M l   $  ; #   % T  f e ?  ! M T  M M l   $  < % U = j  V    > % U ? j  V    @ # Yÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % T  u e u e f N V    $  A # Zÿü *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % T  u u u e f M V    $  B # Zÿü *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % T  u u u e f N V    $  C #   % T  i h g f e M V    $  D #   % T  i h g f e N V    $  E # ÿþ *    <      %   = ! )    >    ,    <   % u V F    %   = ! )    >    ,  % u  V    
 % U  u  V      % % f  1 q G  ! +  % M )  % #    e  \   $ % u  e   1 ! u  A q H  %  9 !   '  $ ! )     , % u   &  ,  $  I # ÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % % f  1 q J  ! +  % M )  % #   e  \   $ u  e   1 n u e V K  B %  9 !   '  $ ! )     , % u   &  ,  $  L # ÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % % u e f V   ! +  % % e V     ! O % M )  % #   f  ¢    $ %    n u  f V K  !  ; !   '  $ ! )     ,  , '  $  M #   % % e V N  s   $  O # Vÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      % % u e f V   s M  $  P # nÿþ *    <      %   = ! )    >    ,    <   % u V     %   = ! )    >    ,  % u  V    
 % U  u  V      # "   u   ¥   % l Q   $ % % u u  V K  ! +         $ $ $  R #   % % f V   n e V   ! +  % u V   n u  V   ¢    $ % u V   n u  V   £     M % Q % M )  % # 9  e  ¡    $ % u e V K  n u  e V K  a     % u e V K  n u  e V K  _    	 %    !   '  $ ! )     ,  , '  $  S % j T j # j S j U V V   W # Kÿþ % % e V     %  = ! )    >    ,    ! +  % u  V    
 % U  u  V         % V          % u e l X  $ % u l X  $  Y % V Z   J % S U  V [  . % U \ V ]  /
