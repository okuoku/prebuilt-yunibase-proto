;;;;
;;;; 160/f64.stk         -- SRFI-160: Homogeneous numeric vector libraries
;;;;                                  (f64 sublibrary)
;;;;
;;;; Copyright Â© 2021 Jeronimo Pellegrini <j_p@aleph0.info>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Jeronimo Pellegrini [j_p@aleph0.info]
;;;;    Creation date: 17-Jun-2022 15:54
;;;;

(define-module srfi/160/f64

  (import (srfi 4)
          (srfi 128)
          (srfi 160 base))
  (export
   ;; Constructors
   make-f64vector   ;; BASE
   f64vector        ;; BASE
   f64vector-unfold
   f64vector-unfold-right
   f64vector-copy
   f64vector-reverse-copy
   f64vector-append
   f64vector-concatenate
   f64vector-append-subvectors

   ;; Predicates
   f64?              ;; BASE
   f64vector?        ;; BASE
   f64vector-empty?
   f64vector=

   ;; Selectors
   f64vector-ref     ;; BASE
   f64vector-length  ;; BASE

   ;; Iteration
   f64vector-take
   f64vector-take-right
   f64vector-drop
   f64vector-drop-right
   f64vector-segment
   f64vector-fold
   f64vector-fold-right
   f64vector-map
   f64vector-map!
   f64vector-for-each
   f64vector-count
   f64vector-cumulate

   ;; Searching
   f64vector-take-while
   f64vector-take-while-right
   f64vector-drop-while
   f64vector-drop-while-right
   f64vector-index
   f64vector-index-right
   f64vector-skip
   f64vector-skip-right
   f64vector-any
   f64vector-every
   f64vector-partition
   f64vector-filter
   f64vector-remove

   ;; Mutators
   f64vector-set!            ;; BASE
   f64vector-swap!
   f64vector-fill!
   f64vector-reverse!
   f64vector-copy!
   f64vector-reverse-copy!
   f64vector-unfold!
   f64vector-unfold-right!

   ;; Conversion
   f64vector->list           ;; BASE
   reverse-f64vector->list
   list->f64vector           ;; BASE
   reverse-list->f64vector
   f64vector->vector
   vector->f64vector

   ;; Generators
   make-f64vector-generator

   ;; Comparators
   f64vector-comparator

   ;; Output
   write-f64vector)


;; A case of "macros for performance"... Not the best thing to do, we could
;; actually have done a more sofisticated job in generating the output from
;; the template, but this keeps it simple.
;; The macro (uvector-tag) will expand to f64 in the template.
;; However, in the generated file, the f64 will be replaed by the tag name.
;; So the macro will expand to the VALUE of the tag, which is the
;; fastest thing we can do. Not even access to a global will be done, the
;; correct constant will be pushed onto the stack.
;;
;;  (%s32vector-something (uvector-tag) args)
;; EXPANDS into
;;  (u8vector-something 4 args)
;; and NOT into
;;  (%u8vector-something s32 args)

(define-macro (uvector-tag)
  (let ((s8   0)
        (u8   1)
        (s16  2)
        (u16  3)
        (s32  4)
        (u32  5)
        (s64  6)
        (u64  7)
        (f32  8)
        (f64  9)
        (c64  10)
        (c128 11))
    f64))

;; We'll be accessing the base module to get some procedures from it:
(define base (find-module 'srfi/160/base))

;; These are implemented in C, and used here to build the actual procedures:
(define %uvector-unfold            (symbol-value '%uvector-unfold base))
(define %uvector-copy              (symbol-value '%uvector-copy base))
(define %uvector-append-subvectors (symbol-value '%uvector-append-subvectors base))
(define %uvector-empty?            (symbol-value '%uvector-empty? base))
(define %uvector=                  (symbol-value '%uvector= base))
(define %uvector-iterate           (symbol-value '%uvector-iterate base))
(define %uvector-segment           (symbol-value '%uvector-segment base))

;;;
;;; Constructors OK
;;;

;; make-vector OK
;; vector      OK

(define (f64vector-unfold f len seed)
  (%uvector-unfold (uvector-tag) f #f len seed #f))

(define (f64vector-unfold-right f len seed)
  (%uvector-unfold (uvector-tag) f #f len seed #t))

(define (f64vector-copy v :optional (start 0) (end (f64vector-length v)))
  (%uvector-copy (uvector-tag) #f 0 v start end #f))

(define (f64vector-reverse-copy v :optional (start 0) (end (f64vector-length v)))
  (%uvector-copy (uvector-tag) #f 0 v start end #t))

(define (f64vector-append . vecs)
  (%uvector-append-subvectors (uvector-tag) #f vecs))

(define (f64vector-concatenate vecs)
  (%uvector-append-subvectors (uvector-tag) #f vecs))

(define (f64vector-append-subvectors . vecs)
  (%uvector-append-subvectors (uvector-tag) #t vecs))

;;;
;;; Predicates OK
;;;

(define (f64vector-empty? v) (%uvector-empty? (uvector-tag) v))

(define (f64vector= . args) (%uvector= (uvector-tag) args))

;;;
;;; Selectors OK
;;;

;; vector-ref    OK
;; vector-length OK

;; Iteration OK

(define (f64vector-take v n) (f64vector-copy v 0 n))
(define (f64vector-take-right v n)
  (f64vector-copy v (- (f64vector-length v) n))) ; FIXME: optimize?

(define (f64vector-drop v n)       (f64vector-copy v n))
(define (f64vector-drop-right v n)
  (%uvector-copy (uvector-tag) #f 0 v 0 (- (f64vector-length v) n) #f)) ; FIXME: optimize?

(define (f64vector-segment v n) (%uvector-segment (uvector-tag) v n))

(define (f64vector-fold kons knil v1 . v2)
  (%uvector-iterate (uvector-tag) kons (cons v1 v2)
   #f   ;; do NOT mutate
   10   ;; operation (10 = fold)
   #f   ;; NOT from-right
   knil ;; seed
   ))

(define (f64vector-fold-right kons knil v1 . v2)
  (%uvector-iterate (uvector-tag) kons (cons v1 v2)
   #f   ;; do NOT mutate
   10   ;; operation (10 = fold)
   #t   ;; YES from-right
   knil ;; seed
   ))

(define (f64vector-map proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   0  ;; operation (0 = map)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-map! proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #t ;; DO mutate
   0  ;; operation (0 = map)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-for-each proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   9  ;; operation (9 = for-each)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-count proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   5  ;; operation (5 = count)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-cumulate kons knil v1)
  (%uvector-iterate (uvector-tag) kons (list v1)
   #f   ;; do NOT mutate
   11   ;; operation (11 = cumulate)
   #f   ;; NOT from-right
   knil ;; seed
   ))

;;;
;;; Searching OK
;;;

(define (f64vector-take-while pred? vec)
  (f64vector-take vec (f64vector-skip pred? vec)))

(define (f64vector-take-while-right pred? vec)
  (f64vector-drop vec (+ 1 (f64vector-skip-right pred? vec))))

(define (f64vector-drop-while pred? vec)
  (f64vector-drop vec (f64vector-skip pred? vec)))

(define (f64vector-drop-while-right pred? vec)
  (f64vector-take vec (+ 1 (f64vector-skip-right pred? vec))))


(define (f64vector-index proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   3  ;; operation (3 = index)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-index-right proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   3  ;; operation (3 = index)
   #t ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-skip proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   4  ;; operation (4 = skip)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-skip-right proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   4  ;; operation (4 = skip)
   #t ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-any proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   1  ;; operation (1 = any)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-every proc v1 . vs)
  (%uvector-iterate (uvector-tag) proc (cons v1 vs)
   #f ;; do NOT mutate
   2  ;; operation (2 = every)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-partition proc v1)
  (%uvector-iterate (uvector-tag) proc (list v1)
   #f ;; do NOT mutate
   6  ;; operation (6 = partition)
   #f ;; NOT from-right
   #f ;; NO seed
   ))

(define (f64vector-filter proc v1)
  (%uvector-iterate (uvector-tag) proc (list v1)
   #f ;; do NOT mutate
   7  ;; operation (7 = filter)
   #f ;; NOT from-right
   #f ;; NO seed
   ))
(define (f64vector-remove proc v1)
  (%uvector-iterate (uvector-tag) proc (list v1)
   #f ;; do NOT mutate
   8  ;; operation (8 = remove)
   #f ;; NOT from-right
   #f ;; NO seed
   ))


;;;
;;; Mutators OK
;;;

;; vector-set! OK

;; FIXME:
;; vector-fill! and vector-swap! do not depend on vector type,
;; but vector-fill! does some type checking for each element
;; written. Maybe this could be optimized...
(define f64vector-swap! (symbol-value '%uvector-swap!         base))
(define f64vector-fill! (symbol-value '%uvector-fill!         base))

(define (f64vector-reverse! v :optional (start 0) (end (f64vector-length v)))
  (%uvector-copy (uvector-tag) v start v start end #t)
  #void)

(define (f64vector-copy! to at from :optional (start 0) (end (f64vector-length from)))
  (%uvector-copy (uvector-tag) to at from start end #f)
  #void)

(define (f64vector-reverse-copy! to at from :optional (start 0) (end (f64vector-length from)))
  (%uvector-copy (uvector-tag) to at from start end #t)
  #void)

(define (f64vector-unfold! f v start end seed)
  (%uvector-unfold (uvector-tag) f v start end seed #f)
  #void)

(define (f64vector-unfold-right! f v start end seed)
  (%uvector-unfold (uvector-tag) f v start end seed #t)
  #void)

;;;
;;; Conversion OK
;;;

(define (vector->f64vector v :optional (start 0) (end (vector-length v)))
  (let* ((w (make-f64vector (- end start))))
    (do ((i start (+ i 1)))
        ((= i end))
      (f64vector-set! w (- i start) (vector-ref v i)))
    w))

(define (f64vector->vector v :optional (start 0) (end (f64vector-length v)))
  (let* ((w (make-vector (- end start))))
    (do ((i start (+ i 1)))
        ((= i end))
      (vector-set! w (- i start) (f64vector-ref v i)))
    w))


(define (f64vector->list v :optional (start 0) (end (f64vector-length v)))
  (let ((v (f64vector-copy v start end)))
    (let loop ((i (fx- (f64vector-length v) 1))
               (lst '()))
      (if (fx< i 0)
          lst
          (loop (fx- i 1) (cons (f64vector-ref v i) lst))))))


(define (reverse-list->f64vector lst)
  (f64vector-reverse-copy (list->f64vector lst)))

(define (reverse-f64vector->list v :optional (start 0) (end (f64vector-length v)))
  (f64vector->list (f64vector-reverse-copy v start end)))

;;;
;;; Generators OK
;;;

(define (make-f64vector-generator v :optional (start 0) (end (f64vector-length v)))
  (lambda () (if (fx>= start end)
            (eof-object)
            (let ((x (f64vector-ref v start)))
              (set! start (fx+ 1 start))
              x))))

;;;
;;; Comparators OK
;;;

;; Adapted from reference implementation in Chicken:
(define (f64vector< vec1 vec2)
     (let ((len1 (f64vector-length vec1))
           (len2 (f64vector-length vec2)))
       (cond
         ((fx< (f64vector-length vec1)
               (f64vector-length vec2))
          #t)
         ((fx> (f64vector-length vec1)
               (f64vector-length vec2))
          #f)
         (else
          (let loop ((i 0))
            (cond
              ((fx= i len1) #f)
              ((< (f64vector-ref vec1 i) (f64vector-ref vec2 i))
               #t)
              ((> (f64vector-ref vec1 i) (f64vector-ref vec2 i))
               #f)
              (else
               (loop (fx+ i 1)))))))))

(define f64vector-comparator
  (make-comparator f64vector? f64vector= f64vector< hash-table-hash))

;;;
;;; Output OK
;;;

(define (write-f64vector v :optional port)
  (unless ()
    (error))
  (if port
      (write v port)
      (write v)))

  )

(provide "srfi/160/f64")
