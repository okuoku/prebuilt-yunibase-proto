;;;;
;;;;
;;;; equiv.stk         -- Equal on circular structures
;;;;
;;;; Copyright Â© 2018-2023 Erick Gallesio <eg@stklos.net>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;    Original author: William D Clinger
;;;;  STklos adaptation: Erick Gallesio
;;;;      Creation date: 27-Nov-2018 11:26
;;;;

;;; This code uses some parts of the implementation of William
;;; D. Clinger for the (withdrawn) SRFI 85 (Recursive Equivalence
;;; Predicate).
;;;
;;; Source: https://srfi-email.schemers.org/srfi-85/msg/2763083
;;;
;;; Some minor adaptations for STklos:
;;;  - the initial bounded member is done in C (%equal-try primitive)
;;;  - the hash table functions used here are those of STklos
;;;  - order of functions changed and minor editions
;;;
;;; William D Clinger licence terms:
;;;     Copyright 2006 William D Clinger.
;;;
;;;     Permission to copy this software, in whole or in part, to use this
;;;     software for any lawful purpose, and to redistribute this software
;;;     is granted subject to the restriction that all copies made of this
;;;     software must include this copyright notice in full.
;;;
;;;     I also request that you send me a copy of any improvements that you
;;;     make to this software so that they may be incorporated within it to
;;;     the benefit of the Scheme community.
;;;
;;;     Last modified 5 December 2007
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; EQUIV?
;;;
;;; EQUIV? is a version of EQUAL? that terminates on all arguments.
;;;
;;; The basic idea of the algorithm is presented in
;;;
;;; J E Hopcroft and R M Karp.  A Linear Algorithm for
;;; Testing Equivalence of Finite Automata.
;;; Cornell University Technical Report 71-114,
;;; December 1971.
;;; http://techreports.library.cornell.edu:8081/Dienst/UI/1.0/Display/cul.cs/TR71-114
;;;
;;; The algorithm uses FIND and MERGE operations, which
;;; roughly correspond to done? and equate! in the code below.
;;; The algorithm maintains a stack of comparisons to do,
;;; and a set of equivalences that would be implied by the
;;; comparisons yet to be done.
;;;
;;; When comparing objects x and y whose equality cannot be
;;; determined without recursion, the algorithm pushes all
;;; the recursive subgoals onto the stack, and merges the
;;; equivalence classes for x and y.  If any of the subgoals
;;; involve comparing x and y, the algorithm will notice
;;; that they are in the same equivalence class and will
;;; avoid circularity by assuming x and y are equal.
;;; If all of the subgoals succeed, then x and y really are
;;; equal, so the algorithm is correct.
;;;
;;; If the hash tables give amortized constant-time lookup on
;;; object identity, then this algorithm could be made to run
;;; in O(n) time, where n is the number of nodes in the larger
;;; of the two structures being compared.
;;;
;;; If implemented in portable R5RS Scheme, the algorithm
;;; should still run in O(n^2) time, or close to it.
;;;
;;; This implementation uses two techniques to reduce the
;;; cost of the algorithm for common special cases:
;;;
;;; It starts out by trying the traditional recursive algorithm
;;; to bounded depth.
;;; It handles easy cases specially.


(export %equiv?)



(define %equiv? #f)

(let ((%equal? equal?)
      (%member member)
      (%assoc  assoc))

  (define (equiv? x y)

    #:equal?   ;; Set the name of external procedure

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;
    ;; Tables mapping objects to their equivalence classes.
    ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Equivalence classes are represented as lists,
    ;; which means they can't be merged in constant time.
    (define (initial-equivalences)
      (make-hash-table eq?))


    ;; Are x and y equivalent according to the table?
    (define (done? x y table)
      (memq x (hash-table-ref/default table y '())))


    ;; Merge the equivalence classes of x and y in the table,
    ;; and return the table.  Changes the table.
    (define (equate! x y table)
      (let ((xclass (hash-table-ref/default table x '()))
            (yclass (hash-table-ref/default table y '())))
        (cond ((and (null? xclass) (null? yclass))
               (let ((class (list x y)))
                 (hash-table-set! table x class)
                 (hash-table-set! table y class)))
              ((null? xclass)
               (let ((class0 (cons x (cdr yclass))))
                 (set-cdr! yclass class0)
                 (hash-table-set! table x yclass)))
              ((null? yclass)
               (let ((class0 (cons y (cdr xclass))))
                 (set-cdr! xclass class0)
                 (hash-table-set! table y xclass)))
              ((eq? xclass yclass)
               #t)
              ((memq x yclass)
               #t)
              (else
               (let ((class0 (append (cdr xclass) yclass)))
                 (set-cdr! xclass class0)
                 (for-each (lambda (y) (hash-table-set! table y xclass))
                           yclass))))))


    ;; A comparison is easy if eqv? returns the right answer.
    (define (easy? x y)
      (cond ((eqv? x y)          #t)
            ((pair? x)           (not (pair? y)))
            ((pair? y)           #t)
            ((vector? x)         (not (vector? y)))
            ((vector? y)         #t)
            ((not (string? x))     #t)
            ((not (string? y))     #t)
            (else                #f)))


    ;; Returns #t iff x and y would have the same (possibly infinite)
    ;; printed representation.  Always terminates.
    (define (equiv? x y)
      (let ((done (initial-equivalences)))
        ;; done is a hash table that maps objects to their
        ;; equivalence classes.
        ;;
        ;; Algorithmic invariant:  If all of the comparisons that
        ;; are in progress (pushed onto the control stack) come out
        ;; equal, then all of the equivalences in done are correct.
        ;;
        ;; Invariant of this implementation:  The equivalence classes
        ;; omit easy cases, which are defined as cases in which eqv?
        ;; always returns the correct answer.  The equivalence classes
        ;; also omit strings, because strings can be compared without
        ;; risk of circularity.
        ;;
        ;; Invariant of this prototype:  The equivalence classes include
        ;; only pairs and vectors.  If records or other things are to be
        ;; compared recursively, then they should be added to done.
        ;;
        ;; Without constant-time lookups, it is important to keep
        ;; done as small as possible.  This implementation takes
        ;; advantage of several common cases for which it is not
        ;; necessary to keep track of a node's equivalence class.
        (define (equiv? x y)
          ;;(step x y done)
          (cond ((eqv? x y)
                 #t)
                ((and (pair? x) (pair? y))
                 (let ((x1 (car x))
                       (y1 (car y))
                       (x2 (cdr x))
                       (y2 (cdr y)))
                   (cond ((done? x y done)
                          #t)
                         ((eqv? x1 y1)
                          (equate! x y done)
                          (equiv? x2 y2))
                         ((eqv? x2 y2)
                          (equate! x y done)
                          (equiv? x1 y1))
                         ((easy? x1 y1)
                          #f)
                         ((easy? x2 y2)
                          #f)
                         (else
                          (equate! x y done)
                          (and (equiv? x1 y1)
                             (equiv? x2 y2))))))
                ((and (vector? x) (vector? y))
                 (let ((n (vector-length x)))
                   (if (= n (vector-length y))
                       (if (done? x y done)
                           #t
                           (begin (equate! x y done)
                                  (vector-equiv? x y n 0)))
                       #f)))
                (else (%equal? x y))))

        ;; Like equiv? above, except x and y are known to be vectors,
        ;; n is the length of both, and i is the first index that has
        ;; not yet been pushed onto the todo set.
        (define (vector-equiv? x y n i)
          (if (< i n)
              (let ((xi (vector-ref x i))
                    (yi (vector-ref y i)))
                (if (easy? xi yi)
                    (if (eqv? xi yi)
                        (vector-equiv? x y n (+ i 1))
                        #f)
                    (and (equiv? xi yi)
                       (vector-equiv? x y n (+ i 1)))))
              #t))

        (equiv? x y)))

    (let ((res (%equal-try x y)))   ;;; res is #t, #f or '() if undecided
      (if (boolean? res)
          res
          (equiv? x y))))

  (set! %equiv? equiv?))

